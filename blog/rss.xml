<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>UniRep Docs Blog</title>
        <link>https://developer.unirep.io/blog</link>
        <description>UniRep Docs Blog</description>
        <lastBuildDate>Tue, 04 Jul 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[voteathon, Built for hackers by the hackers.]]></title>
            <link>https://developer.unirep.io/blog/voteathon</link>
            <guid>https://developer.unirep.io/blog/voteathon</guid>
            <pubDate>Tue, 04 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[This summer, our UniRep group took part in the well-known IC3 conference. It's a great event for those interested in the subject of cryptography. You can learn more about IC3 from their website.]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" src="/assets/images/voteathon-84fa62a964f459e0f2890b8b9b6a6d0f.png" width="1440" height="443" class="img__Ss2"></p><h1>Overview</h1><p>This summer, our UniRep group took part in the well-known IC3 conference. It's a great event for those interested in the subject of cryptography. You can learn more about IC3 from their <a href="https://www.initc3.org/index.html" target="_blank" rel="noopener noreferrer">website</a>.
We were lucky enough to show off the UniRep protocol during the event. Working with some PSE colleagues and two contributors from outside the group, we took part in a week-long project challenge.</p><h1>Motivation</h1><p>Our group of seven brainstormed ideas for the project. We thought about creating an app similar to Stack Overflow where users could earn reputation points by asking and answering questions. However, we knew from past experience that this could be a complicated task. Then, while chatting about the hackathon itself, we had a new idea.</p><p>We thought about creating a voting app for hackathons. It could be driven by the community, and hackers could earn reputation points through it.
Usually, a panel of judges decides which projects are the best. But what if we made the voting anonymous and fair, and let the hackers themselves vote for the projects they like the most? This way, hackers could start building their reputation from one hackathon to the next.</p><p>We've come up with just such an app, which we're calling voteathon.</p><iframe src="https://giphy.com/embed/W1Sx4lnn3tu7wEMabW" width="480" height="270" frameborder="0" class="giphy-embed" allowfullscreen="" style="display:block;margin:16px auto"></iframe><p><a href="https://giphy.com/gifs/onmyblocktv-on-my-block-kendra-onmyblock-W1Sx4lnn3tu7wEMabW" target="_blank" rel="noopener noreferrer">via GIPHY</a></p><h1>Idea to action</h1><p>This application can better illustrate the ownership of data of UniRep protocol. We want to showcase the good use cases to demonstrate the proof of reputation. In this project, hackers can choose to prove how many votes they have to claim the award. The idea of the application is that the user can use the first epoch key to join a project and receive votes. Then the second epoch key is used to prove membership in the hackathon and also is regarded as a nullifier to record the user has voted. After the judge finishes, the user can start claiming their votes. The smart contract will calculate the third highest scores of a project, then set the <code>winnerScore</code> to that number. If a user can generate a proof that the score is higher than <code>winnerScore</code>, the user can mint an NFT (or any other award the hackathon provides) to a specified address. Of course, the user will emit a nullifier as well to notice that the user has already claimed the prize.</p><h1>Letâ€™s get started</h1><p>To efficiently build a UniRep app, we use <code>npx create-unirep-app</code> to create all packages we need:  circuits, contracts, relay and frontend. Then we modify the smart contracts to have the functions that are required in Voteathon: <code>joinProject</code>, <code>vote</code>, <code>claimPrize</code>. Then the router and frontend should also change how a ZK proof is generated and how the smart contract would be called. </p><p>See: <a href="https://developer.unirep.io/docs/getting-started/create-unirep-app" target="_blank" rel="noopener noreferrer">Getting Started with <code>create-unirep-app</code></a> to learn more about how to use unirep related packages.</p><h1>Customization</h1><p>To achieve the idea that we use the first and second epoch key in Voteathon, we need to customize the smart contract and the client.</p><p>In <code>joinProject</code> function in the smart contract, it uses <code>decodeEpochKeySignals</code> to decode the information in the public signals.</p><div class="language-solidity codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-solidity codeBlock_TAPP thin-scrollbar"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token plain">Unirep</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">EpochKeySignals </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> signals </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> unirep</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">decodeEpochKeySignals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        publicSignals</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Note: in version v2.0.0-alpha-3, Unirep provides this decoder, but in the later version, developers have to deploy a helper first. See: <a href="https://developer.unirep.io/docs/next/contracts-api/verifiers/epoch-key-verifier-helper" target="_blank" rel="noopener noreferrer">epoch-key-verifier-helper</a></p></blockquote><p>Then we can check if the user reveals nonce and which nonce it is.
For example</p><div class="language-solidity codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-solidity codeBlock_TAPP thin-scrollbar"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signals</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">revealNonce </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Voteathon: should reveal nonce'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signals</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nonce </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Voteathon: invalid nonce'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If the user chooses not to reveal nonce, it will all be zero.</p><p>And in <code>vote</code> function, it checks that</p><div class="language-solidity codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-solidity codeBlock_TAPP thin-scrollbar"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signals</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">revealNonce </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Voteathon: should reveal nonce'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signals</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">nonce </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Voteathon: invalid nonce'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>to make sure the user uses two different epoch keys in different actions.</p><p>Then in the client, the users are required to generate an epoch key proof with revealing nonces.</p><div class="language-ts codeBlockContainer_ZGJx theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_qZBB"><pre tabindex="0" class="prism-code language-ts codeBlock_TAPP thin-scrollbar"><code class="codeBlockLines_AdAo"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> epochKeyProof </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">await</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">userState</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">genEpochKeyProof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nonce</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        revealNonce</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup_TNwR"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_MVhB" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_yxgH"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_QJLJ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The options can be set to make sure the user generates the proofs with public nonces. By default the <code>revealNonce</code> is set to <code>false</code>.</p><h1>Improvement</h1><p>Then we found out the circuits should be changed as well because we need a nullifier to limit how users claim prizes. Therefore, our external contributor, Joy, helps us build the nullifier circuits and the circuits for users cannot vote themselves projects. Which was a big effort because we need to compile circuits with <code>yarn circuits buildsnark</code> and generate a new verifier (with <code>yarn contracts build</code>). Then it should be imported in the smart contract, and we need to customize how users generate circuit inputs. And it is also hard to use circom to identify which public signal means which variable. We realized that building an additional circuit is not so friendly to <code>create-unirep-app</code> developers. It is neither documented nor automatically built. It was such a good lesson for us to improve the DX in the future.</p><p>Then there are many improvements we can make for Voteathon in the future. For example, the <code>signup</code> and <code>joinProject</code> could be merged to reduce the signup time. The idea is that we use <a href="https://developer.unirep.io/docs/contracts-api/unirep-sol#manualusersignup" target="_blank" rel="noopener noreferrer"><code>manualSignup</code></a> in Unirep.sol, and generate a proof that includes <a href="https://developer.unirep.io/docs/circuits-api/circuits#signup-proof" target="_blank" rel="noopener noreferrer">signup proof</a> and <a href="https://developer.unirep.io/docs/circuits-api/circuits#epoch-key-proof" target="_blank" rel="noopener noreferrer">epoch key proof</a>. So it can not only sign up the user but also prove his epoch key. The second improvement that can be made is the durability. How could Voteathon smart contract be an infrastructure for every hackathon event and how the contract can be reused. It could be a challenging issue.</p><iframe src="https://giphy.com/embed/zTQQPJXn1j8Jy" width="480" height="364" frameborder="0" class="giphy-embed" allowfullscreen="" style="display:block;margin:16px auto"></iframe><p><a href="https://giphy.com/gifs/90s-80s-grunge-zTQQPJXn1j8Jy" target="_blank" rel="noopener noreferrer">via GIPHY</a></p><h1>Future plan</h1><p>This was a fun exercise for us all. There is a few things we need to continue iterating before a production release. We definitely would love this to be used in various hackathons. <br>
Try app here: <a href="https://voteathon.org/" target="_blank" rel="noopener noreferrer">https://voteathon.org/</a> <br>
See all projects: <a href="https://voteathon.org/projects" target="_blank" rel="noopener noreferrer">https://voteathon.org/projects</a> <br></p><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="special-thanks-to">Special thanks to:<a href="#special-thanks-to" class="hash-link" aria-label="Direct link to Special thanks to:" title="Direct link to Special thanks to:">â€‹</a></h2><ul><li>Nico Serrano  <a href="https://github.com/NicoSerranoP" target="_blank" rel="noopener noreferrer">https://github.com/NicoSerranoP</a></li><li>Jake C-T <a href="https://github.com/jacque006" target="_blank" rel="noopener noreferrer">https://github.com/jacque006</a></li><li>Ya-wen, Jeng <a href="https://github.com/vivianjeng" target="_blank" rel="noopener noreferrer">https://github.com/vivianjeng</a></li><li>AtHeartEngineer <a href="https://github.com/AtHeartEngineer" target="_blank" rel="noopener noreferrer">https://github.com/AtHeartEngineer</a></li><li>Joy Wang  <a href="https://github.com/joyqvq" target="_blank" rel="noopener noreferrer">https://github.com/joyqvq</a> </li><li>Simon Brown <a href="https://github.com/orbmis" target="_blank" rel="noopener noreferrer">https://github.com/orbmis</a></li></ul><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="resource">Resource:<a href="#resource" class="hash-link" aria-label="Direct link to Resource:" title="Direct link to Resource:">â€‹</a></h2><ul><li>Github Repo: <a href="https://github.com/NicoSerranoP/voteathon" target="_blank" rel="noopener noreferrer">https://github.com/NicoSerranoP/voteathon</a></li><li>Design: <a href="https://www.figma.com/file/glCnyZFoJKKfFvINALn2Z3/IC3-hackathon?type=design&amp;node-id=0%3A1&amp;mode=design&amp;t=GeqvikyMM6r8DYSM-1" target="_blank" rel="noopener noreferrer">https://www.figma.com/file/glCnyZFoJKKfFvINALn2Z3/IC3-hackathon?type=design&amp;node-id=0%3A1&amp;mode=design&amp;t=GeqvikyMM6r8DYSM-1</a></li></ul>]]></content:encoded>
            <category>hackathon</category>
            <category>voting</category>
            <category>attester</category>
        </item>
        <item>
            <title><![CDATA[UniRep Travels to Turkey, 2023]]></title>
            <link>https://developer.unirep.io/blog/unirep-travels-to-turkey-2023</link>
            <guid>https://developer.unirep.io/blog/unirep-travels-to-turkey-2023</guid>
            <pubDate>Mon, 15 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In April, the UniRep Protocol was presented to a group of software engineers interested in privacy-related technology at the ETHPrivacy conference for a privacy hackathon in Istanbul, Turkey.]]></description>
            <content:encoded><![CDATA[<img loading="lazy" src="/img/turkey.jpg" alt="Alt Text" width="600px" style="display:block;margin:16px auto" class="img__Ss2"><h1>UniRep Travels to Turkey</h1><p>In April, the <a href="https://developer.unirep.io/" target="_blank" rel="noopener noreferrer">UniRep Protocol</a> was presented to a group of software engineers interested in privacy-related technology at the <a href="https://www.leadingprivacy.com/istanbul" target="_blank" rel="noopener noreferrer">ETHPrivacy</a> conference for a privacy hackathon in Istanbul, Turkey.</p><p>The location for the event was relevant as Turkey is one of the fastest-growing countries for the adoption of blockchain-related products. More importantly, there are concerns within Turkey about freedom of speech and other human rights where privacy can help, so it made sense to have a privacy conference there.</p><p>UniRep allows developers to build applications where a user's data is always in control of the user. A higher-level description is that the data is on a blockchain, and a user submits a zero-knowledge proof proving ownership over an epoch key that had data attested to it. Examples will follow if that does not make sense quite yet (checkout our <a href="https://developer.unirep.io/docs/welcome" target="_blank" rel="noopener noreferrer">docs</a> if you want to dive in immediately).</p><p>One idea a hacker had at the hackathon was creating a completely anonymous GitHub. In 2023, this seems germane because of the arrest of Tornado Cash developer Alexey Pertsev, who was arrested for simply writing code (which is speech). The question, though, is how could UniRep be used to create this anonymous GitHub? Or another good question: how can we know who should be pushing to the main branch, for example, if the developer is anonymous and we are not sure of their credibility or experience?</p><p>The term "reputation" in UniRep's name might be confusing at first. Some may first think about reputation being what a certain social group may think about them. In the context of UniRep, though, reputation is data. With this in mind, we can start to imagine what data can be associated with an anonymous developer that can build their "reputation" so they can push to main.</p><p>To illustrate, let's assume you have specific criteria for selecting developers who can push to the main branch, such as requiring a certain number of stars on their projects, a minimum of 5 personal projects, and/or X amount of commits on a project on branches that are not the main branch. UniRep has the capacity to do all of that. Check out the hackathon project <a href="https://github.com/gagichce/zk-dev" target="_blank" rel="noopener noreferrer">here</a>, which was bootstrapped with <a href="https://developer.unirep.io/docs/next/getting-started/create-unirep-app" target="_blank" rel="noopener noreferrer">create-unirep-app</a>. All the mentioned GitHub data can be linked to their anonymous identity, lending credibility to their anon identities.</p><p>Simplistically, what UniRep allows developers to do is <em>associate data</em> with <em>anonymous users</em>; UniRep is acting as storage for zk-applications in this regard.</p><p>Another example from the hackathon was from the ODTU group in Istanbul, associated with Middle East Technical University. Their project was a zero-knowledge DAO where anonymous developers can create and vote on proposals anonymously with the support of an anonymous transfer of ERC-20 tokens! You can check out their <a href="https://github.com/onuruci/zk-dao" target="_blank" rel="noopener noreferrer">source</a> here.</p><p>UniRep is a generalized protocol and can be used to build any application you can dream of. We are currently reviewing our version 2 audit and making fixes to tidy up any loose ends and prepare for a full release of version 2 of the protocol! Exciting times ahead for the protocol and the zk-ecosystem as interest keeps rising.</p><p><strong>References:</strong></p><ul><li><a href="https://github.com/gagichce/zk-dev" target="_blank" rel="noopener noreferrer">https://github.com/gagichce/zk-dev</a></li><li><a href="https://github.com/onuruci/zk-dao" target="_blank" rel="noopener noreferrer">https://github.com/onuruci/zk-dao</a></li></ul>]]></content:encoded>
            <category>unirep in turkey</category>
            <category>eth privacy</category>
        </item>
        <item>
            <title><![CDATA[Good Bye, UniRep.Social]]></title>
            <link>https://developer.unirep.io/blog/Good-bye-unirep-social</link>
            <guid>https://developer.unirep.io/blog/Good-bye-unirep-social</guid>
            <pubDate>Thu, 02 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[via GIPHY]]></description>
            <content:encoded><![CDATA[<iframe src="https://giphy.com/embed/65R80T3r72EGTzlNad" width="480" height="360" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe><p><a href="https://giphy.com/gifs/space-force-brian-eno-starf-feet-65R80T3r72EGTzlNad" target="_blank" rel="noopener noreferrer">via GIPHY</a></p><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="time-to-reimagine">Time to Reimagine!<a href="#time-to-reimagine" class="hash-link" aria-label="Direct link to Time to Reimagine!" title="Direct link to Time to Reimagine!">â€‹</a></h2><p>In this post, we'll review our lessons learned and why we decided to sunset unirep.social.
The post is written collaboratively by Chiali, Vivian, Doris with the help of Kichong and a touch of ChatGPT.</p><p>Unirep.social was our first-generation prototype, and we built it to learn how to build and leverage the protocol. It was an exciting journey and we're still going.</p><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="the-journey-so-far">The journey so far<a href="#the-journey-so-far" class="hash-link" aria-label="Direct link to The journey so far" title="Direct link to The journey so far">â€‹</a></h2><p>Unirep.social is our first experimental social app in the Privacy &amp; Scaling Explorations Team. We wanted it to be familiar, so we took inspiration from popular social media platforms like Reddit, Facebook, and Twitter. In the early design phase, we considered limiting characters in posts, but eventually decided to let users post however they want. We also wanted to protect users' privacy by giving them three epoch keys in each epoch transition, so that it's impossible to identify someone by their traits.</p><p>We wanted to balance freedom of speech with empowering users to form communities and gamifying parts of the experience. At first, Unirep.social was just a simple platform for posting, voting, and commenting. But as development continued, we realized it would be better to show how users earned and spent points (rep). To do this, we had to make changes to our synchronizer and backend database.</p><p>We found that users sometimes didn't know what they were waiting for, so they would take actions they weren't ready for (such as spending too many points). To prevent these mistakes, we added a queue that stored users' actions and processed them one by one, along with a progress bar to show their recent progress.</p><p>Later, we realized that some users might want to be recognized instead of staying anonymous. So, we added a username feature that worked in our circuits, backend, and frontend. This was another big change, and there were still some issues to work out, but the main functions worked well. To make the app more like a general-use social media, we added Topics to posts so users can publish posts under specific topics, and find only the posts that interest them.</p><p>Finally, we noticed that there was often confusion between the social media platform "Unirep Social" and the protocol "Unirep". To address this, we decided to rebrand the social media platform and redesign the website to better align with our target audience, based on lessons learned from our experience with Unirep.social.</p><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="lesson-learned-1-invite-only-exclusivity">Lesson Learned #1: Invite-Only Exclusivity<a href="#lesson-learned-1-invite-only-exclusivity" class="hash-link" aria-label="Direct link to Lesson Learned #1: Invite-Only Exclusivity" title="Direct link to Lesson Learned #1: Invite-Only Exclusivity">â€‹</a></h2><p>When we released the pre-alpha, we used an invite-only exclusivity strategy, thinking people would be eager to try it out. However, it only worked 20% of the time, with some attention brought to the application due to Vitalik's promotion. The invite-only exclusivity mechanism only works well when invites can easily be shared. We failed to build a sustainable invite interaction, as the invitation codes were sent manually by email, causing a delay from when a user requested the code to when they received the six-character code, dampening the user's excitement.</p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="takeaways--next-steps">Takeaways &amp; next steps:<a href="#takeaways--next-steps" class="hash-link" aria-label="Direct link to Takeaways &amp; next steps:" title="Direct link to Takeaways &amp; next steps:">â€‹</a></h3><p>Instead of invite-only, the team revisited this strategy and decided that unirep.social should be open to the public, with everyone free to join. We redesigned and built the sign-up flow using Github and Twitter OAuth to have an anti-Sybil mechanism. To avoid overwhelming users with a heavy brain dump during sign-up, we did not show the private key, which is a long text that mixes numbers and characters that is hard to remember. This iteration has made it easier for us to grow our user base, but challenges remain regarding requesting users to download and save their private key.</p><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="lesson-learned-2-airdrop">Lesson Learned #2: Airdrop<a href="#lesson-learned-2-airdrop" class="hash-link" aria-label="Direct link to Lesson Learned #2: Airdrop" title="Direct link to Lesson Learned #2: Airdrop">â€‹</a></h2><p>During the initial protocol and pre-alpha, we wanted to give users rep so they could interact in the app per epoch, so we automatically airdropped 30 rep to users. While this was an easy way to get the system started, we soon realized it caused the reputation score to be inaccurate and meaningless because if a user never created a post or interacted in the system, their rep score would still go up. This also caused unfairness to users who joined the system later, as they wouldn't be able to catch up with the rep score compared to users who joined earlier and had piled up for a long time.</p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="takeaways--next-steps-1">Takeaways &amp; next steps:<a href="#takeaways--next-steps-1" class="hash-link" aria-label="Direct link to Takeaways &amp; next steps:" title="Direct link to Takeaways &amp; next steps:">â€‹</a></h3><p>Our core contributor, Chance, realized this issue and proposed building a "subsidy" within unirep.social. We built this in the attester, not on the protocol level. The subsidy act like free allowance that system hand out to the users every epoch just for app interactions. It can not be accumulated over time, but in each epoch user get the fair subsidy of 30 points. This does opens the more open interaction, because user is spending the allowance instead of the reputation they have earned hard. Although this does boost more user interaction within the system, but the proving gets a little complex, not only we need to proof the real reputation, there is another set of logic to proof about the allowance, and the allowance that user gives to another users in order to help other earn.</p><h2 class="anchor anchorWithStickyNavbar_fF9Z" id="lesson-learned-3-synchronizer">Lesson Learned #3: Synchronizer<a href="#lesson-learned-3-synchronizer" class="hash-link" aria-label="Direct link to Lesson Learned #3: Synchronizer" title="Direct link to Lesson Learned #3: Synchronizer">â€‹</a></h2><p>The Unirep protocol originally queried events using queryFilter functions in Ethers.js, which generated all events since deployment and had no storage configuration in the old synchronizer. This led to frequent slow queries of on-chain data and difficulty for applications like Unirep Social to inherit the Unirep synchronizer object.</p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="takeaways--next-steps-2">Takeaways &amp; next steps:<a href="#takeaways--next-steps-2" class="hash-link" aria-label="Direct link to Takeaways &amp; next steps:" title="Direct link to Takeaways &amp; next steps:">â€‹</a></h3><p>The team rewrote the  synchronizer for Unirep protocol, which makes it easier to build the synchronizer for Unirep Social and other apps built on top of the protocol. Before, the synchronizer for Unirep Social needed to handle events for both the protocol and the application. Now, events can be separated and the Unirep protocol synchronizer can be extended to applications, which makes it more efficient and easier to manage. </p><p>Users can also customize storage configuration by specifying the database that stores the data history in each event. Synchronization happens only once and storage can be reused to avoid querying on-chain data frequently.</p><h4 class="anchor anchorWithStickyNavbar_fF9Z" id="today-we-thank-you-for-your-support-over-the-past-year">Today, we thank you for your support over the past year.<a href="#today-we-thank-you-for-your-support-over-the-past-year" class="hash-link" aria-label="Direct link to Today, we thank you for your support over the past year." title="Direct link to Today, we thank you for your support over the past year.">â€‹</a></h4><p>Thank you for trying our app, finding issues, and pushing us to have a bigger impact. We hope you'll stay tuned for our next project launch, and we look forward to building projects that help our open society.</p>]]></content:encoded>
            <category>prototype</category>
            <category>iterate</category>
        </item>
        <item>
            <title><![CDATA[Year in review, 2022]]></title>
            <link>https://developer.unirep.io/blog/year-in-review-2022</link>
            <guid>https://developer.unirep.io/blog/year-in-review-2022</guid>
            <pubDate>Fri, 16 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[It's the year's end, and let's talk about what UniRep has accomplished in 2022.]]></description>
            <content:encoded><![CDATA[<p><img loading="lazy" src="/assets/images/2022yearreview-ac8795c577f97d34d3cf4c6a2a0bb511.png" width="1920" height="1080" class="img__Ss2"></p><p>It's the year's end, and let's talk about what UniRep has accomplished in 2022.</p><p>2022 is an exciting year for us, and we had our first highlight moments in April during Devconnect, and we were finally able to show the public what we have been building in the past months. Although it was exciting, we quickly realized that our synchronizer could have been more optimal. It broke on 2nd day of the event, which caused the user state transition to fail. It was also challenging to debug such an event. That was the first lesson learned for us in 2022.</p><blockquote><p>Tips from Chiali: It's essential to test out your concept as soon as possible.</p><iframe src="https://giphy.com/embed/3orieKKmYyvUdR3RkY" width="480" height="366" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe><p><a href="https://giphy.com/gifs/season-3-the-simpsons-3x13-3orieKKmYyvUdR3RkY" target="_blank" rel="noopener noreferrer">via GIPHY</a></p></blockquote><p>Right after the Devconnect, we took a step back to visit all the core components. The action of refracting is about time. Before April 2022, it was the exploring phase, we weren't entirely sure how to approach...etc. There were many to-do lists on the table.</p><p>One of the fascinating learning was on the demo app (attester), we realized that if we automatically airdrop Rep to anyone who signs up, it would cause infiltration and un-equality, but every attester has different needs. We went a long way in debating on how this attester should be experienced and came up with the solution of "subsidy."</p><p>We head down 100% between April and October to make it happen. During this time, we also iterated on how to work as a team and started using GitHub issues to manage our workflow and set up a two weeks sprint.</p><p>Right now, the team is focused on protocol v2. We have been releasing small pieces since December, along with <a href="https://github.com/Unirep/create-unirep-app" target="_blank" rel="noopener noreferrer">create-unirep-app</a>, the idea is to enable everyone to build their own app (attester) easily. Protocol v2 comes with many optimizations, and we also break up the packages to be easily imported, etc.</p><p>We hope that we will be able to test this developer experience with you soon. Please keep an eye on our updates.</p><iframe src="https://giphy.com/embed/L4fB9di7ekn3F5PXaW" width="480" height="365" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe><p><a href="https://giphy.com/gifs/share-the-love-pass-it-forward-L4fB9di7ekn3F5PXaW" target="_blank" rel="noopener noreferrer">via GIPHY</a></p><p>Here is the run-down list if you interested to learn more:</p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="unirep-and-unirep-social-applied-zk">Unirep and Unirep Social, Applied ZK<a href="#unirep-and-unirep-social-applied-zk" class="hash-link" aria-label="Direct link to Unirep and Unirep Social, Applied ZK" title="Direct link to Unirep and Unirep Social, Applied ZK">â€‹</a></h3><p><a href="https://www.youtube.com/watch?v=6WnVCB7oK3U" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=6WnVCB7oK3U</a></p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="building-a-unirep-ecosystem-by-chance-hudson--devcon-bogotÃ¡">Building a Unirep ecosystem by Chance Hudson | Devcon BogotÃ¡<a href="#building-a-unirep-ecosystem-by-chance-hudson--devcon-bogotÃ¡" class="hash-link" aria-label="Direct link to Building a Unirep ecosystem by Chance Hudson | Devcon BogotÃ¡" title="Direct link to Building a Unirep ecosystem by Chance Hudson | Devcon BogotÃ¡">â€‹</a></h3><p><a href="https://www.youtube.com/watch?v=jd2Dg9czJzI" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=jd2Dg9czJzI</a></p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="unirep-social-a-demo-application-of-unirep-protocol">Unirep Social: A demo application of Unirep protocol<a href="#unirep-social-a-demo-application-of-unirep-protocol" class="hash-link" aria-label="Direct link to Unirep Social: A demo application of Unirep protocol" title="Direct link to Unirep Social: A demo application of Unirep protocol">â€‹</a></h3><p><a href="https://www.youtube.com/watch?v=O2p92yM0-tI" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=O2p92yM0-tI</a></p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="zk-hack-iii---build-a-zkdao-with-unirep-protocol">ZK HACK III - Build a ZKDAO with UniRep Protocol<a href="#zk-hack-iii---build-a-zkdao-with-unirep-protocol" class="hash-link" aria-label="Direct link to ZK HACK III - Build a ZKDAO with UniRep Protocol" title="Direct link to ZK HACK III - Build a ZKDAO with UniRep Protocol">â€‹</a></h3><p><a href="https://www.youtube.com/watch?v=UoTekviYWts&amp;list=PLj80z0cJm8QFGB6AsiAG3EB06L7xr5S1c&amp;index=45" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=UoTekviYWts&amp;list=PLj80z0cJm8QFGB6AsiAG3EB06L7xr5S1c&amp;index=45</a></p><h3 class="anchor anchorWithStickyNavbar_fF9Z" id="how-to-build-a-simple-app-with-unirep-protocol---taiwanchinese-lang">How to build a simple app with UniRep protocol - Taiwan/Chinese lang.<a href="#how-to-build-a-simple-app-with-unirep-protocol---taiwanchinese-lang" class="hash-link" aria-label="Direct link to How to build a simple app with UniRep protocol - Taiwan/Chinese lang." title="Direct link to How to build a simple app with UniRep protocol - Taiwan/Chinese lang.">â€‹</a></h3><p><a href="https://youtu.be/9nQHoYtXBnM" target="_blank" rel="noopener noreferrer">https://youtu.be/9nQHoYtXBnM</a></p><p>Lastly, if you are thinking of playing create-unirep-app, although it's not fully completed:
<a href="https://www.npmjs.com/package/create-unirep-app" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/create-unirep-app</a></p><p>If you are interested in contributing with us, drop us message in our <a href="https://discord.gg/UmS33GXkD2" target="_blank" rel="noopener noreferrer">discord!</a></p>]]></content:encoded>
            <category>year in review</category>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://developer.unirep.io/blog/welcome</link>
            <guid>https://developer.unirep.io/blog/welcome</guid>
            <pubDate>Mon, 17 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to the UniRep blog. We'll have stuff here soon.]]></description>
            <content:encoded><![CDATA[<p>Welcome to the UniRep blog. We'll have stuff here soon.</p>]]></content:encoded>
            <category>hello</category>
        </item>
    </channel>
</rss>