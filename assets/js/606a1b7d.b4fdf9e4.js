"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[6792],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(2784);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,g=d["".concat(p,".").concat(m)]||d[m]||l[m]||a;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},56421:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7896),i=(r(2784),r(30876));const a={},o="2. User signs up",s={unversionedId:"getting-started/start-with-typescript/user-signs-up",id:"version-1.0.1/getting-started/start-with-typescript/user-signs-up",title:"2. User signs up",description:"Should connect to a deployed contract first.",source:"@site/versioned_docs/version-1.0.1/getting-started/start-with-typescript/2.-user-signs-up.md",sourceDirName:"getting-started/start-with-typescript",slug:"/getting-started/start-with-typescript/user-signs-up",permalink:"/docs/1.0.1/getting-started/start-with-typescript/user-signs-up",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/getting-started/start-with-typescript/2.-user-signs-up.md",tags:[],version:"1.0.1",sidebarPosition:2,frontMatter:{},sidebar:"apiSidebar",previous:{title:"1. deploy",permalink:"/docs/1.0.1/getting-started/start-with-typescript/deploy"},next:{title:"3. Attester signs up",permalink:"/docs/1.0.1/getting-started/start-with-typescript/attester-signs-up"}},p={},c=[],u={toc:c},d="wrapper";function l(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2-user-signs-up"},"2. User signs up"),(0,i.kt)("p",null,"Should connect to a deployed contract first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { getUnirepContract } from '@unirep/contracts'\n\n// user can connect the Unirep smart contract with getUnirepContract\nconst contract = await getUnirepContract(\n    UNIREP_CONTRACT_ADDRESS,\n    signer\n)\n")),(0,i.kt)("p",null,"Use the Semaphore identity commitment to sign up in UniRep smart contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ZkIdentity } from '@unirep/crypto'\n\n// generate a Semaphore identity\nconst identity = new ZkIdentity()\n// sign up in UniRep smart contract with Semaphore identity commitment\nconst tx = await contract['userSignUp(uint256)'](\n    identity.genIdentityCommitment()\n)\n")),(0,i.kt)("p",null,"Save the serialized Semaphore identity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'// print the Semaphore identity and save it\nconsole.log(identity.serializeIdentity())\n// Example output:\n// {"identityNullifier":"27d1ae5c98aab64b851a9c668a7eec0d835867a17d4b9454a8bf9824836271d6","identityTrapdoor":"2596ecc2a1e1f6a8f279e097464e6edc3b18b946d934398dfe52a34c4e414e67","secret":["27d1ae5c98aab64b851a9c668a7eec0d835867a17d4b9454a8bf9824836271d6","2596ecc2a1e1f6a8f279e097464e6edc3b18b946d934398dfe52a34c4e414e67"]}\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See: ",(0,i.kt)("a",{parentName:"p",href:"/docs/1.0.1/package/crypto"},"@unirep/crypto"))))}l.isMDXComponent=!0}}]);