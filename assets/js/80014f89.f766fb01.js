"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[4708],{30876:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>u});var n=a(2784);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=s(a),d=i,u=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(u,l(l({ref:t},h),{},{components:a})):n.createElement(u,l({ref:t},h))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},33922:(e,t,a)=>{a.r(t),a.d(t,{NetworkURL:()=>m,assets:()=>p,contentTitle:()=>l,contractVersion:()=>h,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>s,urlBase:()=>c});var n=a(7896),i=(a(2784),a(30876));const r={title:"Subgraph"},l=void 0,o={unversionedId:"subgraph",id:"version-2.1.x/subgraph",title:"Subgraph",description:"The Graph is a protocol for indexing networks like Ethereum and IPFS. Site owners publish subgraphs that expose site data for anyone to query. UniRep's subgraph allows you to retrieve data from the Unirep.sol smart contract.",source:"@site/versioned_docs/version-2.1.x/subgraph.mdx",sourceDirName:".",slug:"/subgraph",permalink:"/docs/subgraph",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.1.x/subgraph.mdx",tags:[],version:"2.1.x",frontMatter:{title:"Subgraph"},sidebar:"apiSidebar",previous:{title:"Attestation",permalink:"/docs/protocol/attestation"},next:{title:"Readme",permalink:"/docs/core-api/"}},p={},s=[{value:"Deployment",id:"deployment",level:2},{value:"Query Examples",id:"query-examples",level:2},{value:"Schema",id:"schema",level:2},{value:"Attestation",id:"attestation",level:3},{value:"StateTreeLeaf",id:"statetreeleaf",level:3},{value:"EpochTreeLeaf",id:"epochtreeleaf",level:3},{value:"HistoryTreeLeaf",id:"historytreeleaf",level:3},{value:"Epoch",id:"epoch",level:3},{value:"Nullifier",id:"nullifier",level:3},{value:"User",id:"user",level:3},{value:"Attester",id:"attester",level:3}],h="2.0.0",c="https://api.studio.thegraph.com/query/48080",m={Sepolia:c+"/sepolia/v"+h,Fuji:c+"/fuji/v"+h},d={toc:s,contractVersion:h},u="wrapper";function k(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/"},"The Graph")," is a protocol for indexing networks like Ethereum and IPFS. Site owners publish subgraphs that expose site data for anyone to query. UniRep's subgraph allows you to retrieve data from the ",(0,i.kt)("a",{href:`https://github.com/Unirep/Unirep/blob/v${h}/packages/contracts/contracts/Unirep.sol`},(0,i.kt)("inlineCode",{parentName:"p"},"Unirep.sol"))," smart contract."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The Graph protocol uses the ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," query language. For examples, see the ",(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/querying/graphql-api/"},"GraphQL API documentation"),".")),(0,i.kt)("h2",{id:"deployment"},"Deployment"),(0,i.kt)("p",null,"UniRep subgraph version ",h," is deployed on the following networks:"),(0,i.kt)("table",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Network"),(0,i.kt)("th",null,"API")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"Sepolia"),(0,i.kt)("td",null,(0,i.kt)("a",{href:`${m.Sepolia}`},m.Sepolia))),(0,i.kt)("tr",null,(0,i.kt)("td",null,"Arbitrum Sepolia"),(0,i.kt)("td",null,"NOT SUPPORTED YET")),(0,i.kt)("tr",null,(0,i.kt)("td",null,"Avalanche Fuji"),(0,i.kt)("td",null,(0,i.kt)("a",{href:`${m.Fuji}`},m.Fuji)))),(0,i.kt)("h2",{id:"query-examples"},"Query Examples"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Query the first 100 attesters (by default, sorted by ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),").")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"id")," is computed by"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"event.transaction.hash.concatI32(event.logIndex.toI32())\n"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query MyQuery {\n    attesters {\n        attesterId\n        blockNumber\n        epochLength\n        startTimestamp\n        transactionHash\n    }\n}\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Query the first 100 users from a certain attester ID (by default, sorted by ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),").")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery {\n    users(\n        where: {\n            attesterId: "812064237485286466066480536294992408637941768146"\n        }\n    ) {\n        commitment\n    }\n}\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Query the first 100 state tree leaves, sorted by ",(0,i.kt)("inlineCode",{parentName:"li"},"index"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery {\n    stateTreeLeaves(\n        orderBy: index\n        where: {\n            attesterId: "812064237485286466066480536294992408637941768146"\n            epoch: "1"\n        }\n    ) {\n        leaf\n    }\n}\n')),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Query the first 1000 state tree leaves, sorted by ",(0,i.kt)("inlineCode",{parentName:"li"},"index"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery {\n    stateTreeLeaves(\n        first: 1000\n        orderBy: index\n        where: {\n            attesterId: "812064237485286466066480536294992408637941768146"\n            epoch: "1"\n        }\n    ) {\n        leaf\n    }\n}\n')),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"Query the next 1000 state tree leaves, sorted by ",(0,i.kt)("inlineCode",{parentName:"li"},"index"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'query MyQuery {\n    stateTreeLeaves(\n        skip: 1000\n        first: 1000\n        orderBy: index\n        where: {\n            attesterId: "812064237485286466066480536294992408637941768146"\n            epoch: "1"\n        }\n    ) {\n        leaf\n    }\n}\n')),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("h3",{id:"attestation"},"Attestation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch in which an attestation occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epochKey"),": The receiver's epoch key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fieldIndex"),": The index of the data field that was changed"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"change"),": The change number of the data"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the attestation transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the attestation transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The attestation transaction hash")),(0,i.kt)("h3",{id:"statetreeleaf"},"StateTreeLeaf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch in which the state tree leaf was emitted"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leaf"),": The emitted state tree leaf"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index"),": The index of the state tree leaf in the epoch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")),(0,i.kt)("h3",{id:"epochtreeleaf"},"EpochTreeLeaf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch in which the epoch tree leaf was emitted"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leaf"),": The emitted epoch tree leaf"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index"),": The index of the epoch tree leaf in the epoch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")),(0,i.kt)("h3",{id:"historytreeleaf"},"HistoryTreeLeaf"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leaf"),": The emitted history tree leaf"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")),(0,i.kt)("h3",{id:"epoch"},"Epoch"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number"),": The number of the ended epoch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")),(0,i.kt)("h3",{id:"nullifier"},"Nullifier"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch in which the nullifier was emitted"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullifier"),": The nullifier that was used to prevent a double user state transition"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")),(0,i.kt)("h3",{id:"user"},"User"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"commitment"),": The Semaphore identity commitment"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epoch"),": The epoch in which the user signed up"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The address of the attester the user signed up to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"leafIndex"),": The state tree leaf of the signup event"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")),(0,i.kt)("h3",{id:"attester"},"Attester"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": An id to avoid data collision"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attesterId"),": The attester address"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"startTimestamp"),": The start time of the attester's first epoch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"epochLength"),": The length of the attester's epochs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockNumber"),": The block number in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"blockTimestamp"),": The timestamp of the block in which the transaction occurred"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transactionHash"),": The transaction hash")))}k.isMDXComponent=!0}}]);