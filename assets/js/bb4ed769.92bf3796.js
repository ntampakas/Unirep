"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[2379],{30876:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var r=n(2784);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},u="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,c=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||a;return n?r.createElement(m,s(s({ref:e},l),{},{components:n})):r.createElement(m,s({ref:e},l))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[u]="string"==typeof t?t:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8956:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7896),o=(n(2784),n(30876));const a={},s="User state transition",i={unversionedId:"protocol/contract/user-state-transition",id:"version-1.0.1/protocol/contract/user-state-transition",title:"User state transition",description:"There are three steps in user state transition (see user state transition proof), and they should be performed in order.",source:"@site/versioned_docs/version-1.0.1/protocol/contract/user-state-transition.md",sourceDirName:"protocol/contract",slug:"/protocol/contract/user-state-transition",permalink:"/docs/1.0.1/protocol/contract/user-state-transition",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/protocol/contract/user-state-transition.md",tags:[],version:"1.0.1",frontMatter:{},sidebar:"apiSidebar",previous:{title:"Sign up",permalink:"/docs/1.0.1/protocol/contract/sign-up"},next:{title:"Verify proofs",permalink:"/docs/1.0.1/protocol/contract/verify-proofs"}},c={},p=[{value:"Start user state transition",id:"start-user-state-transition",level:2},{value:"Process attestations",id:"process-attestations",level:2},{value:"User State Transition",id:"user-state-transition-1",level:2}],l={toc:p},u="wrapper";function f(t){let{components:e,...n}=t;return(0,o.kt)(u,(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"user-state-transition"},"User state transition"),(0,o.kt)("p",null,"There are three steps in user state transition (see ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},"user state transition proof"),"), and they should be performed in order."),(0,o.kt)("h2",{id:"start-user-state-transition"},"Start user state transition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"/**\n* @dev User submit a start user state transition proof\n* publicSignals[0] = [ globalStateTree ]\n* publicSignals[1] = [ blindedUserState ]\n* publicSignals[2] = [ blindedHashChain ]\n* @param publicSignals The public signals of the start user state transition proof\n* @param proof The The proof of the start user state transition proof\n*/\nfunction startUserStateTransition(\n    uint256[] memory publicSignals,\n    uint256[8] memory proof\n) external \n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L538"},"Unirep.sol/startUserStateTransition"))),(0,o.kt)("h2",{id:"process-attestations"},"Process attestations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"/**\n* @dev User submit a process attestations proof\n* publicSignals[0] = [ outputBlindedUserState ]\n* publicSignals[1] = [ outputBlindedHashChain ]\n* publicSignals[2] = [ inputBlindedUserState ]\n* @param publicSignals The public signals of the process attestations proof\n* @param proof The process attestations proof\n*/\nfunction processAttestations(\n    uint256[] memory publicSignals,\n    uint256[8] memory proof\n) external\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L567"},"Unirep.sol/processAttestations"))),(0,o.kt)("h2",{id:"user-state-transition-1"},"User State Transition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"/**\n* @dev User submit the latest user state transition proof\n* publicSignals[0] = [ fromGlobalStateTree ]\n* publicSignals[1] = [ newGlobalStateTreeLeaf ]\n* publicSignals[2: 2 + numEpochKeyNoncePerEpoch] = [ epkNullifiers ]\n* publicSignals[2 + numEpochKeyNoncePerEpoch] = [ transitionFromEpoch ]\n* publicSignals[3 + numEpochKeyNoncePerEpoch:\n                5+  numEpochKeyNoncePerEpoch] = [ blindedUserStates ]\n* publicSignals[5+  numEpochKeyNoncePerEpoch:\n                5+2*numEpochKeyNoncePerEpoch] = [ blindedHashChains ]\n* publicSignals[5+2*numEpochKeyNoncePerEpoch] = [ fromEpochTree ]\n* @param publicSignals The the public signals of the user state transition proof\n* @param proof The proof of the user state transition proof\n*/\nfunction updateUserStateRoot(\n    uint256[] memory publicSignals,\n    uint256[8] memory proof\n) external\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"source: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L606"},"Unirep.sol/updateUserStateRoot"))))}f.isMDXComponent=!0}}]);