"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[5513],{30876:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),o=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=o(a),u=r,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[m]="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78738:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var n=a(7896),r=(a(2784),a(30876));const i={id:"DataSchema",title:"Class: DataSchema",sidebar_label:"DataSchema",sidebar_position:0,custom_edit_url:null},l=void 0,p={unversionedId:"core-api/classes/DataSchema",id:"version-2.1.x/core-api/classes/DataSchema",title:"Class: DataSchema",description:"The DataSchema class abstracts UniRep data into a JavaScript object.",source:"@site/versioned_docs/version-2.1.x/core-api/classes/DataSchema.md",sourceDirName:"core-api/classes",slug:"/core-api/classes/DataSchema",permalink:"/docs/core-api/classes/DataSchema",draft:!1,editUrl:null,tags:[],version:"2.1.x",sidebarPosition:0,frontMatter:{id:"DataSchema",title:"Class: DataSchema",sidebar_label:"DataSchema",sidebar_position:0,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Exports",permalink:"/docs/core-api/modules"},next:{title:"Synchronizer",permalink:"/docs/core-api/classes/Synchronizer"}},s={},o=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"config",id:"config",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"schema",id:"schema",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"Methods",id:"methods",level:2},{value:"buildAttestation",id:"buildattestation",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"buildAttestations",id:"buildattestations",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"parseData",id:"parsedata",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"parseSchema",id:"parseschema",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-6",level:4}],d={toc:o},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"DataSchema")," class abstracts UniRep data into a JavaScript object.\nThis class can be used to encode and decode attestation data,\nand build attestations that are ready to be submitted to the UniRep smart contract."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { Attestation, DataSchema, SchemaField } from '@unirep/core'\n\nconst schema: SchemaField[] = [\n  {name: 'posRep', type: 'uint64', updateBy: 'sum',},\n  {name: 'negRep', type: 'uint64', updateBy: 'sum',},\n  {name: 'graffiti', type: 'uint205', updateBy: 'replace',},\n  {name: 'postCount', type: 'uint49', updateBy: 'sum',},\n  {name: 'commentCount', type: 'uint49', updateBy: 'sum',},\n  {name: 'voteCount', type: 'uint49', updateBy: 'sum',},\n]\n\nconst d = new DataSchema(schema)\n")),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new DataSchema"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"schema"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"config?"),")"),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"schema")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/core-api/modules#schemafield"},(0,r.kt)("inlineCode",{parentName:"a"},"SchemaField")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"config")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"CircuitConfig")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"CircuitConfig.default"))))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L55"},"packages/core/src/DataSchema.ts:55")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"config"},"config"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"config"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"CircuitConfig")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L53"},"packages/core/src/DataSchema.ts:53")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"schema"},"schema"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"schema"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"[]"),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L52"},"packages/core/src/DataSchema.ts:52")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"buildattestation"},"buildAttestation"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"buildAttestation"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"change"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/core-api/modules#attestation"},(0,r.kt)("inlineCode",{parentName:"a"},"Attestation"))),(0,r.kt)("p",null,"Build an ",(0,r.kt)("inlineCode",{parentName:"p"},"Attestation")," object to be used for a UniRep contract"),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"change")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data change. If it is ",(0,r.kt)("inlineCode",{parentName:"td"},"sum")," field, the data will be changed by addition. If it is ",(0,r.kt)("inlineCode",{parentName:"td"},"replacement")," field, the data will be changed by replacement.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"change.name")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"change.val")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bigint")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/core-api/modules#attestation"},(0,r.kt)("inlineCode",{parentName:"a"},"Attestation"))),(0,r.kt)("p",null,"The attestation object will be submitted to the Unirep contract."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Sum field")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// 10 will be added to the 'posRep' field in the user data\nconst sumChange = { name: 'posRep', val: BigInt(10) }\nconst sumAttestation: Attestation = d.buildAttestation(sumChange)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Replacement field")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// 20 will replace the current value in the 'graffiti' field in user data\nconst replacementChange = { name: 'graffiti', val: BigInt(20) }\nconst replacementAttestation: Attestation = d.buildAttestation(replacementChange)\n")),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L168"},"packages/core/src/DataSchema.ts:168")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"buildattestations"},"buildAttestations"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"buildAttestations"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"changes"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/core-api/modules#attestation"},(0,r.kt)("inlineCode",{parentName:"a"},"Attestation")),"[]"),(0,r.kt)("p",null,"Build multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"Attestation")," objects to be used for a UniRep contract"),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"changes")),(0,r.kt)("td",{parentName:"tr",align:"left"},"{ ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ; ",(0,r.kt)("inlineCode",{parentName:"td"},"val"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"bigint"),"  }[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The array of data change.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/core-api/modules#attestation"},(0,r.kt)("inlineCode",{parentName:"a"},"Attestation")),"[]"),(0,r.kt)("p",null,"The array of attestations will be submitted to the Unirep contract."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Multiple attestations can be built using `buildAttestations()`\nconst changes = [\n  { name: 'posRep', val: BigInt(10) },\n  { name: 'negRep', val: BigInt(10) },\n  { name: 'negRep', val: BigInt(20) },\n  { name: 'graffiti', val: BigInt(30) },\n]\n\n//Returns two `Attestation` objects: 'posRep' and 'negRep' attestations are combined into one attestation\nconst attestations: Attestation[] = d.buildAttestations(changes)\n")),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L209"},"packages/core/src/DataSchema.ts:209")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"parsedata"},"parseData"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"parseData"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"data"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"any")),(0,r.kt)("p",null,"Parse encoded schema, producing a dictionary of user-defined field names and attestation values"),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bigint"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The raw data appended to the Unirep contract.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"any")),(0,r.kt)("p",null,"The names of the data and its values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// JS literal representing emitted data from a UniRep contract\nconst data = [\n  553402322211286548490n,\n  0n,\n  0n,\n  0n,\n  205688069665150755269371147819668813122841983204197482918576158n,\n  0n\n]\n\nconst parsedData = d.parseData(data)\n// Result:\n// parsedData = {\n//   posRep: 10n,\n//   negRep: 30n,\n//   graffiti: 30n,\n//   postCount: 0n,\n//   commentCount: 0n,\n//   voteCount: 0n\n// }\n")),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L276"},"packages/core/src/DataSchema.ts:276")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"parseschema"},"parseSchema"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"parseSchema"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"schema"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"any"),"[]"),(0,r.kt)("p",null,"Verify a user-defined data schema"),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"schema")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/core-api/modules#schemafield"},(0,r.kt)("inlineCode",{parentName:"a"},"SchemaField")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The array of ",(0,r.kt)("inlineCode",{parentName:"td"},"SchemaField"))))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"any"),"[]"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  ...schema: SchemaField, // exploded `SchemaField` fields\n  dataIndex: number,\n  offset: number, // bit offset in attester change\n  bits: number // bits allocated\n}\n")),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L73"},"packages/core/src/DataSchema.ts:73")))}c.isMDXComponent=!0}}]);