"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[3107],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),f=a,k=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(k,o(o({ref:t},c),{},{components:r})):n.createElement(k,o({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},29586:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7896),a=(r(2784),r(30876));const i={id:"src.BaseProof",title:"Class: BaseProof",sidebar_label:"BaseProof",custom_edit_url:null},o=void 0,s={unversionedId:"circuits-api/classes/src.BaseProof",id:"version-2.1.x/circuits-api/classes/src.BaseProof",title:"Class: BaseProof",description:"src.BaseProof",source:"@site/versioned_docs/version-2.1.x/circuits-api/classes/src.BaseProof.md",sourceDirName:"circuits-api/classes",slug:"/circuits-api/classes/src.BaseProof",permalink:"/docs/circuits-api/classes/src.BaseProof",draft:!1,editUrl:null,tags:[],version:"2.1.x",frontMatter:{id:"src.BaseProof",title:"Class: BaseProof",sidebar_label:"BaseProof",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"WebProver",permalink:"/docs/circuits-api/classes/provers_web.WebProver"},next:{title:"CircuitConfig",permalink:"/docs/circuits-api/classes/src.CircuitConfig"}},p={},l=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"_snarkProof",id:"_snarkproof",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"circuit",id:"circuit",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"proof",id:"proof",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"prover",id:"prover",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"publicSignals",id:"publicsignals",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"Methods",id:"methods",level:2},{value:"verify",id:"verify",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-6",level:4}],c={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/modules/src"},"src"),".BaseProof"),(0,a.kt)("p",null,"We build proofs using a ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseProof")," class that optionally supports verification.\nProof data can be expressed in one of two formats:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"SnarkProof")," objects for verification by ",(0,a.kt)("inlineCode",{parentName:"li"},"snarkjs")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"string[]")," for contract verification.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseProof")," class can be used to convert between the two formats.\nThis class should not be used directly, but should instead be inherited."),(0,a.kt)("p",null,"The base class for a proof that can be verified using a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/interfaces/src.Prover"},(0,a.kt)("inlineCode",{parentName:"a"},"Prover")),"."),(0,a.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"BaseProof"))),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.EpochKeyProof"},(0,a.kt)("inlineCode",{parentName:"a"},"EpochKeyProof"))),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.EpochKeyLiteProof"},(0,a.kt)("inlineCode",{parentName:"a"},"EpochKeyLiteProof"))),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.ReputationProof"},(0,a.kt)("inlineCode",{parentName:"a"},"ReputationProof"))),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.SignupProof"},(0,a.kt)("inlineCode",{parentName:"a"},"SignupProof"))),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.UserStateTransitionProof"},(0,a.kt)("inlineCode",{parentName:"a"},"UserStateTransitionProof"))),(0,a.kt)("p",{parentName:"li"},"\u21b3 ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.ScopeNullifierProof"},(0,a.kt)("inlineCode",{parentName:"a"},"ScopeNullifierProof"))))),(0,a.kt)("h2",{id:"constructors"},"Constructors"),(0,a.kt)("h3",{id:"constructor"},"constructor"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"new BaseProof"),"(",(0,a.kt)("inlineCode",{parentName:"p"},"publicSignals"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"proof"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"prover?"),")"),(0,a.kt)("p",null,"Create a new instance of the class."),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"publicSignals")),(0,a.kt)("td",{parentName:"tr",align:"left"},"(",(0,a.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"bigint"),")[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The public signals of the proof that can be verified by the prover")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"proof")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Groth16Proof")," ","|"," (",(0,a.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"bigint"),")[]"),(0,a.kt)("td",{parentName:"tr",align:"left"},"The proof that can be verified by the prover")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"prover?")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"/docs/circuits-api/interfaces/src.Prover"},(0,a.kt)("inlineCode",{parentName:"a"},"Prover"))),(0,a.kt)("td",{parentName:"tr",align:"left"},"The prover that can verify the public signals and the proof")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { BaseProof } from '@unirep/circuits'\n\nclass MyCustomProof extends BaseProof {\n constructor(publicSignals, proof, prover) {\n  super(publicSignals, proof, prover)\n\n  // Specify a circuit name for the Prover\n  // This is typically a filename\n  this.circuit = 'MyCustomProof'\n }\n}\n")),(0,a.kt)("h4",{id:"defined-in"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L63"},"circuits/src/BaseProof.ts:63")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"_snarkproof"},"_","snarkProof"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"_","snarkProof"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Groth16Proof")),(0,a.kt)("p",null,"The proof data in ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@types/snarkjs?activeTab=code"},(0,a.kt)("inlineCode",{parentName:"a"},"Groth16Proof"))," format. Use this when manually verifying with ",(0,a.kt)("inlineCode",{parentName:"p"},"snarkjs"),"."),(0,a.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L24"},"circuits/src/BaseProof.ts:24")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"circuit"},"circuit"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"circuit"),": ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/enums/src.Circuit"},(0,a.kt)("inlineCode",{parentName:"a"},"Circuit"))),(0,a.kt)("p",null,"The string name of the type of circuit this proof came from. For the ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseProof")," class this is undefined."),(0,a.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L28"},"circuits/src/BaseProof.ts:28")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"proof"},"proof"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("strong",{parentName:"p"},"proof"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,a.kt)("p",null,"The proof data formatted as ",(0,a.kt)("inlineCode",{parentName:"p"},"string[]"),". Use this property when interacting with smart contracts."),(0,a.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L37"},"circuits/src/BaseProof.ts:37")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"prover"},"prover"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,a.kt)("strong",{parentName:"p"},"prover"),": ",(0,a.kt)("a",{parentName:"p",href:"/docs/circuits-api/interfaces/src.Prover"},(0,a.kt)("inlineCode",{parentName:"a"},"Prover"))),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/interfaces/src.Prover"},(0,a.kt)("inlineCode",{parentName:"a"},"Prover"))," object."),(0,a.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L41"},"circuits/src/BaseProof.ts:41")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"publicsignals"},"publicSignals"),(0,a.kt)("p",null,"\u2022 ",(0,a.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,a.kt)("strong",{parentName:"p"},"publicSignals"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,a.kt)("p",null,"The raw array of public signals for the proof."),(0,a.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L33"},"circuits/src/BaseProof.ts:33")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"verify"},"verify"),(0,a.kt)("p",null,"\u25b8 ",(0,a.kt)("strong",{parentName:"p"},"verify"),"(): ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,a.kt)("p",null,"A function to verify the proof with the supplied ",(0,a.kt)("inlineCode",{parentName:"p"},"Prover"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"prover")," property must be set either in the constructor or manually, otherwise this will throw."),(0,a.kt)("h4",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,a.kt)("p",null,"True if the proof is valid, false otherwise"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const isValid: boolean = await proof.verify()\n")),(0,a.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L95"},"circuits/src/BaseProof.ts:95")))}u.isMDXComponent=!0}}]);