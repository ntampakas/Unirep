"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[8847],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var i=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),f=r,k=c["".concat(l,".").concat(f)]||c[f]||u[f]||a;return n?i.createElement(k,o(o({ref:t},d),{},{components:n})):i.createElement(k,o({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[c]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},14420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var i=n(7896),r=(n(2784),n(30876));const a={id:"src.ReputationProof",title:"Class: ReputationProof",sidebar_label:"ReputationProof",custom_edit_url:null},o=void 0,p={unversionedId:"circuits-api/classes/src.ReputationProof",id:"version-2.1.x/circuits-api/classes/src.ReputationProof",title:"Class: ReputationProof",description:"src.ReputationProof",source:"@site/versioned_docs/version-2.1.x/circuits-api/classes/src.ReputationProof.md",sourceDirName:"circuits-api/classes",slug:"/circuits-api/classes/src.ReputationProof",permalink:"/docs/circuits-api/classes/src.ReputationProof",draft:!1,editUrl:null,tags:[],version:"2.1.x",frontMatter:{id:"src.ReputationProof",title:"Class: ReputationProof",sidebar_label:"ReputationProof",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"EpochKeyProof",permalink:"/docs/circuits-api/classes/src.EpochKeyProof"},next:{title:"ScopeNullifierProof",permalink:"/docs/circuits-api/classes/src.ScopeNullifierProof"}},l={},s=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"_snarkProof",id:"_snarkproof",level:3},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"attesterId",id:"attesterid",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"chainId",id:"chainid",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"circuit",id:"circuit",level:3},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"control0",id:"control0",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"control1",id:"control1",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"data",id:"data",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"epoch",id:"epoch",level:3},{value:"Defined in",id:"defined-in-8",level:4},{value:"epochKey",id:"epochkey",level:3},{value:"Defined in",id:"defined-in-9",level:4},{value:"graffiti",id:"graffiti",level:3},{value:"Defined in",id:"defined-in-10",level:4},{value:"idx",id:"idx",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"maxRep",id:"maxrep",level:3},{value:"Defined in",id:"defined-in-12",level:4},{value:"minRep",id:"minrep",level:3},{value:"Defined in",id:"defined-in-13",level:4},{value:"nonce",id:"nonce",level:3},{value:"Defined in",id:"defined-in-14",level:4},{value:"proof",id:"proof",level:3},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"proveGraffiti",id:"provegraffiti",level:3},{value:"Defined in",id:"defined-in-16",level:4},{value:"proveMaxRep",id:"provemaxrep",level:3},{value:"Defined in",id:"defined-in-17",level:4},{value:"proveMinRep",id:"proveminrep",level:3},{value:"Defined in",id:"defined-in-18",level:4},{value:"proveZeroRep",id:"provezerorep",level:3},{value:"Defined in",id:"defined-in-19",level:4},{value:"prover",id:"prover",level:3},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"publicSignals",id:"publicsignals",level:3},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"revealNonce",id:"revealnonce",level:3},{value:"Defined in",id:"defined-in-22",level:4},{value:"stateTreeRoot",id:"statetreeroot",level:3},{value:"Defined in",id:"defined-in-23",level:4},{value:"Methods",id:"methods",level:2},{value:"verify",id:"verify",level:3},{value:"Returns",id:"returns",level:4},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"buildControl",id:"buildcontrol",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-25",level:4}],d={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/modules/src"},"src"),".ReputationProof"),(0,r.kt)("p",null,"The reputation proof structure that helps to query the public signals"),(0,r.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseProof"))),(0,r.kt)("p",{parentName:"li"},"\u21b3 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"ReputationProof"))))),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new ReputationProof"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"publicSignals"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"proof"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"prover?"),")"),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"publicSignals")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"bigint"),")[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The public signals of the reputation proof that can be verified by the prover")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"proof")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Groth16Proof")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The proof that can be verified by the prover")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"prover?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/circuits-api/interfaces/src.Prover"},(0,r.kt)("inlineCode",{parentName:"a"},"Prover"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The prover that can verify the public signals and the proof")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { ReputationProof } from '@unirep/circuits'\nconst data = new ReputationProof(publicSignals, proof)\n")),(0,r.kt)("h4",{id:"overrides"},"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#constructor"},"constructor")),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L114"},"circuits/src/ReputationProof.ts:114")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"_snarkproof"},"_","snarkProof"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"_","snarkProof"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Groth16Proof")),(0,r.kt)("p",null,"The proof data in ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@types/snarkjs?activeTab=code"},(0,r.kt)("inlineCode",{parentName:"a"},"Groth16Proof"))," format. Use this when manually verifying with ",(0,r.kt)("inlineCode",{parentName:"p"},"snarkjs"),"."),(0,r.kt)("h4",{id:"inherited-from"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#_snarkproof"},"_snarkProof")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L24"},"circuits/src/BaseProof.ts:24")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"attesterid"},"attesterId"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"attesterId"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The attester id for the proof."),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L67"},"circuits/src/ReputationProof.ts:67")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"chainid"},"chainId"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"chainId"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The chain id for the proof."),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L75"},"circuits/src/ReputationProof.ts:75")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"circuit"},"circuit"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,r.kt)("strong",{parentName:"p"},"circuit"),": ",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/enums/src.Circuit"},(0,r.kt)("inlineCode",{parentName:"a"},"Circuit"))),(0,r.kt)("p",null,"The string name of the type of circuit this proof came from. For the ",(0,r.kt)("inlineCode",{parentName:"p"},"BaseProof")," class this is undefined."),(0,r.kt)("h4",{id:"inherited-from-1"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#circuit"},"circuit")),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L28"},"circuits/src/BaseProof.ts:28")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"control0"},"control0"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"control0"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The control field used for the proof. This field contains many signals binary encoded into a single 253 bit value. This value is automatically decoded into the other properties on this class.\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/circuits"},"circuit documentation")," for more information."),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L39"},"circuits/src/ReputationProof.ts:39")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"control1"},"control1"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"control1"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The control field used for the proof. This field contains many signals binary encoded into a single 253 bit value. This value is automatically decoded into the other properties on this class.\nSee the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/circuits"},"circuit documentation")," for more information."),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L44"},"circuits/src/ReputationProof.ts:44")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"data"},"data"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"data"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The signature data included for the proof."),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L53"},"circuits/src/ReputationProof.ts:53")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"epoch"},"epoch"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"epoch"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The epoch the proof was made within."),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L63"},"circuits/src/ReputationProof.ts:63")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"epochkey"},"epochKey"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"epochKey"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The epoch key that owns the reputation."),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L30"},"circuits/src/ReputationProof.ts:30")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"graffiti"},"graffiti"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"graffiti"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The graffiti controlled by the user, which is defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"data[SUM_FIELD_COUNT] % (2 ** REPL_NONCE_BITS)")," in the circuits. This value is only checked if ",(0,r.kt)("inlineCode",{parentName:"p"},"proveGraffiti")," is non-zero."),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L49"},"circuits/src/ReputationProof.ts:49")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"idx"},"idx"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"idx"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"The index of the data in the public signals"),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"control0")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"control1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"epochKey")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"graffiti")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"stateTreeRoot")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L18"},"circuits/src/ReputationProof.ts:18")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"maxrep"},"maxRep"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"maxRep"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"A maximum amount of net positive reputation the user controls. This value is only used if ",(0,r.kt)("inlineCode",{parentName:"p"},"proveMaxRep")," is non-zero.\nExample: Bob has 10 ",(0,r.kt)("inlineCode",{parentName:"p"},"posRep")," and 5 ",(0,r.kt)("inlineCode",{parentName:"p"},"negRep"),". Bob can prove a ",(0,r.kt)("inlineCode",{parentName:"p"},"maxRep")," of 7 because he has a net positive reputation of 5."),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L86"},"circuits/src/ReputationProof.ts:86")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"minrep"},"minRep"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"minRep"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"A minimum amount of net positive reputation the user controls. This value is only used if ",(0,r.kt)("inlineCode",{parentName:"p"},"proveMinRep")," is non-zero.\nExample: Alice has 10 ",(0,r.kt)("inlineCode",{parentName:"p"},"posRep")," and 5 ",(0,r.kt)("inlineCode",{parentName:"p"},"negRep"),". Alice can prove a ",(0,r.kt)("inlineCode",{parentName:"p"},"minRep")," of 2 because she has a net positive reputation of 5."),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L81"},"circuits/src/ReputationProof.ts:81")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"nonce"},"nonce"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"nonce"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The nonce used to generate the epoch key. To determine if this value is set check that ",(0,r.kt)("inlineCode",{parentName:"p"},"revealNonce == 1"),"."),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L59"},"circuits/src/ReputationProof.ts:59")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"proof"},"proof"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"proof"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,r.kt)("p",null,"The proof data formatted as ",(0,r.kt)("inlineCode",{parentName:"p"},"string[]"),". Use this property when interacting with smart contracts."),(0,r.kt)("h4",{id:"inherited-from-2"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#proof"},"proof")),(0,r.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L37"},"circuits/src/BaseProof.ts:37")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"provegraffiti"},"proveGraffiti"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"proveGraffiti"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"Whether the user has chosen to prove a graffiti. If this value is non-zero the user graffiti will be proven."),(0,r.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L102"},"circuits/src/ReputationProof.ts:102")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"provemaxrep"},"proveMaxRep"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"proveMaxRep"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"Whether or not to enforce the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"maxRep")," value. If this value is non-zero the ",(0,r.kt)("inlineCode",{parentName:"p"},"maxRep")," will be proven."),(0,r.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L94"},"circuits/src/ReputationProof.ts:94")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"proveminrep"},"proveMinRep"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"proveMinRep"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"Whether or not to enforce the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"minRep")," value. If this value is non-zero the ",(0,r.kt)("inlineCode",{parentName:"p"},"minRep")," will be proven."),(0,r.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L90"},"circuits/src/ReputationProof.ts:90")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"provezerorep"},"proveZeroRep"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"proveZeroRep"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"Whether or not to prove the user has a net 0 reputation balance. If this value is non-zero the user ",(0,r.kt)("inlineCode",{parentName:"p"},"posRep")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"negRep")," must be equal."),(0,r.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L98"},"circuits/src/ReputationProof.ts:98")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"prover"},"prover"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,r.kt)("strong",{parentName:"p"},"prover"),": ",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/interfaces/src.Prover"},(0,r.kt)("inlineCode",{parentName:"a"},"Prover"))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/interfaces/src.Prover"},(0,r.kt)("inlineCode",{parentName:"a"},"Prover"))," object."),(0,r.kt)("h4",{id:"inherited-from-3"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#prover"},"prover")),(0,r.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L41"},"circuits/src/BaseProof.ts:41")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"publicsignals"},"publicSignals"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"publicSignals"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,r.kt)("p",null,"The raw array of public signals for the proof."),(0,r.kt)("h4",{id:"inherited-from-4"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#publicsignals"},"publicSignals")),(0,r.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L33"},"circuits/src/BaseProof.ts:33")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"revealnonce"},"revealNonce"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"revealNonce"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"A number indicating whether the epoch key nonce was revealed in the proof. This value will be either ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L71"},"circuits/src/ReputationProof.ts:71")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"statetreeroot"},"stateTreeRoot"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"stateTreeRoot"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")),(0,r.kt)("p",null,"The state tree root the user is a member of."),(0,r.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L34"},"circuits/src/ReputationProof.ts:34")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"verify"},"verify"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"verify"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,r.kt)("p",null,"A function to verify the proof with the supplied ",(0,r.kt)("inlineCode",{parentName:"p"},"Prover"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"prover")," property must be set either in the constructor or manually, otherwise this will throw."),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,r.kt)("p",null,"True if the proof is valid, false otherwise"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const isValid: boolean = await proof.verify()\n")),(0,r.kt)("h4",{id:"inherited-from-5"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,r.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#verify"},"verify")),(0,r.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L95"},"circuits/src/BaseProof.ts:95")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"buildcontrol"},"buildControl"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"buildControl"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"config"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,r.kt)("p",null,"Pack several variables into one ",(0,r.kt)("inlineCode",{parentName:"p"},"bigint")," variable."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"config")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"any")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The variables that will be packed.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,r.kt)("p",null,"The controls"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"ReputationProof.buildControl({\n attesterId,\n epoch,\n nonce,\n revealNonce,\n chainId,\n proveGraffiti,\n minRep,\n maxRep,\n proveMinRep,\n proveMaxRep,\n proveZeroRep,\n})\n")),(0,r.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/ReputationProof.ts#L171"},"circuits/src/ReputationProof.ts:171")))}u.isMDXComponent=!0}}]);