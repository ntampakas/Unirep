"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[7940],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var i=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=i.createContext({}),s=function(e){var t=i.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=n,k=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return r?i.createElement(k,o(o({ref:t},c),{},{components:r})):i.createElement(k,o({ref:t},c))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}f.displayName="MDXCreateElement"},68972:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var i=r(7896),n=(r(2784),r(30876));const a={id:"src.SignupProof",title:"Class: SignupProof",sidebar_label:"SignupProof",custom_edit_url:null},o=void 0,l={unversionedId:"circuits-api/classes/src.SignupProof",id:"version-2.1.x/circuits-api/classes/src.SignupProof",title:"Class: SignupProof",description:"src.SignupProof",source:"@site/versioned_docs/version-2.1.x/circuits-api/classes/src.SignupProof.md",sourceDirName:"circuits-api/classes",slug:"/circuits-api/classes/src.SignupProof",permalink:"/docs/circuits-api/classes/src.SignupProof",draft:!1,editUrl:null,tags:[],version:"2.1.x",frontMatter:{id:"src.SignupProof",title:"Class: SignupProof",sidebar_label:"SignupProof",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"ScopeNullifierProof",permalink:"/docs/circuits-api/classes/src.ScopeNullifierProof"},next:{title:"UserStateTransitionProof",permalink:"/docs/circuits-api/classes/src.UserStateTransitionProof"}},p={},s=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"_snarkProof",id:"_snarkproof",level:3},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"attesterId",id:"attesterid",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"chainId",id:"chainid",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"circuit",id:"circuit",level:3},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"control",id:"control",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"epoch",id:"epoch",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"identityCommitment",id:"identitycommitment",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"idx",id:"idx",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"proof",id:"proof",level:3},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"prover",id:"prover",level:3},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"publicSignals",id:"publicsignals",level:3},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"stateTreeLeaf",id:"statetreeleaf",level:3},{value:"Defined in",id:"defined-in-12",level:4},{value:"Methods",id:"methods",level:2},{value:"verify",id:"verify",level:3},{value:"Returns",id:"returns",level:4},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"buildControl",id:"buildcontrol",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-14",level:4}],c={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/modules/src"},"src"),".SignupProof"),(0,n.kt)("p",null,"A class representing a ",(0,n.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/classes/src.SignupProof"},"signup proof"),". Each of the following properties are public signals for the proof."),(0,n.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},(0,n.kt)("inlineCode",{parentName:"a"},"BaseProof"))),(0,n.kt)("p",{parentName:"li"},"\u21b3 ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"SignupProof"))))),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"new SignupProof"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"publicSignals"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"proof"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"prover?"),")"),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"publicSignals")),(0,n.kt)("td",{parentName:"tr",align:"left"},"(",(0,n.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},"bigint"),")[]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The public signals of the user sign up proof that can be verified by the prover")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"proof")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Groth16Proof")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The proof that can be verified by the prover")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"prover?")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/circuits-api/interfaces/src.Prover"},(0,n.kt)("inlineCode",{parentName:"a"},"Prover"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The prover that can verify the public signals and the proof")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { SignupProof } from '@unirep/circuits'\nconst data = new SignupProof(publicSignals, proof)\n")),(0,n.kt)("h4",{id:"overrides"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#constructor"},"constructor")),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L57"},"circuits/src/SignupProof.ts:57")),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"_snarkproof"},"_","snarkProof"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,n.kt)("strong",{parentName:"p"},"_","snarkProof"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"Groth16Proof")),(0,n.kt)("p",null,"The proof data in ",(0,n.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@types/snarkjs?activeTab=code"},(0,n.kt)("inlineCode",{parentName:"a"},"Groth16Proof"))," format. Use this when manually verifying with ",(0,n.kt)("inlineCode",{parentName:"p"},"snarkjs"),"."),(0,n.kt)("h4",{id:"inherited-from"},"Inherited from"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#_snarkproof"},"_snarkProof")),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L24"},"circuits/src/BaseProof.ts:24")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"attesterid"},"attesterId"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"attesterId"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The attester id for the proof."),(0,n.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L37"},"circuits/src/SignupProof.ts:37")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"chainid"},"chainId"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"chainId"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The chain id for the proof."),(0,n.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L45"},"circuits/src/SignupProof.ts:45")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"circuit"},"circuit"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,n.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,n.kt)("strong",{parentName:"p"},"circuit"),": ",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/enums/src.Circuit"},(0,n.kt)("inlineCode",{parentName:"a"},"Circuit"))),(0,n.kt)("p",null,"The string name of the type of circuit this proof came from. For the ",(0,n.kt)("inlineCode",{parentName:"p"},"BaseProof")," class this is undefined."),(0,n.kt)("h4",{id:"inherited-from-1"},"Inherited from"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#circuit"},"circuit")),(0,n.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L28"},"circuits/src/BaseProof.ts:28")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"control"},"control"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"control"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The control field used for the proof. This field contains many signals binary encoded into a single 253 bit value. This value is automatically decoded into the other properties on this class."),(0,n.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L32"},"circuits/src/SignupProof.ts:32")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"epoch"},"epoch"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"epoch"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The epoch the proof was made within."),(0,n.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L41"},"circuits/src/SignupProof.ts:41")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"identitycommitment"},"identityCommitment"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"identityCommitment"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://semaphore.pse.dev/docs/glossary#identity-commitment"},"identity commitment")," for the user signing up."),(0,n.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L23"},"circuits/src/SignupProof.ts:23")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"idx"},"idx"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,n.kt)("strong",{parentName:"p"},"idx"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"Object")),(0,n.kt)("p",null,"The index of the data in the public signals"),(0,n.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"control")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"number"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"identityCommitment")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"number"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"stateTreeLeaf")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"number"))))),(0,n.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L13"},"circuits/src/SignupProof.ts:13")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"proof"},"proof"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"proof"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,n.kt)("p",null,"The proof data formatted as ",(0,n.kt)("inlineCode",{parentName:"p"},"string[]"),". Use this property when interacting with smart contracts."),(0,n.kt)("h4",{id:"inherited-from-2"},"Inherited from"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#proof"},"proof")),(0,n.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L37"},"circuits/src/BaseProof.ts:37")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"prover"},"prover"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,n.kt)("strong",{parentName:"p"},"prover"),": ",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/interfaces/src.Prover"},(0,n.kt)("inlineCode",{parentName:"a"},"Prover"))),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/interfaces/src.Prover"},(0,n.kt)("inlineCode",{parentName:"a"},"Prover"))," object."),(0,n.kt)("h4",{id:"inherited-from-3"},"Inherited from"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#prover"},"prover")),(0,n.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L41"},"circuits/src/BaseProof.ts:41")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"publicsignals"},"publicSignals"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,n.kt)("strong",{parentName:"p"},"publicSignals"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint"),"[]"),(0,n.kt)("p",null,"The raw array of public signals for the proof."),(0,n.kt)("h4",{id:"inherited-from-4"},"Inherited from"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#publicsignals"},"publicSignals")),(0,n.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L33"},"circuits/src/BaseProof.ts:33")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"statetreeleaf"},"stateTreeLeaf"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"stateTreeLeaf"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The new state tree leaf for the user. This leaf will contain values for ",(0,n.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/data.md"},"data"),"."),(0,n.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L27"},"circuits/src/SignupProof.ts:27")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"verify"},"verify"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"verify"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,n.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,n.kt)("p",null,"A function to verify the proof with the supplied ",(0,n.kt)("inlineCode",{parentName:"p"},"Prover"),".\nThe ",(0,n.kt)("inlineCode",{parentName:"p"},"prover")," property must be set either in the constructor or manually, otherwise this will throw."),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,n.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,n.kt)("p",null,"True if the proof is valid, false otherwise"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const isValid: boolean = await proof.verify()\n")),(0,n.kt)("h4",{id:"inherited-from-5"},"Inherited from"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof"},"BaseProof"),".",(0,n.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.BaseProof#verify"},"verify")),(0,n.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/BaseProof.ts#L95"},"circuits/src/BaseProof.ts:95")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"buildcontrol"},"buildControl"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,n.kt)("strong",{parentName:"p"},"buildControl"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"config"),"): ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"Pack several variables into one ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint")," variable."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"config")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"any")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The variables that will be packed.")))),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"bigint")),(0,n.kt)("p",null,"The control"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"SignupProof.buildControl({\n epoch,\n attesterId,\n chainId\n})\n")),(0,n.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/SignupProof.ts#L88"},"circuits/src/SignupProof.ts:88")))}u.isMDXComponent=!0}}]);