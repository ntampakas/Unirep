"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[7703],{30876:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},k="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=o(n),u=i,c=k["".concat(d,".").concat(u)]||k[u]||m[u]||r;return n?a.createElement(c,l(l({ref:t},s),{},{components:n})):a.createElement(c,l({ref:t},s))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[k]="string"==typeof e?e:i,l[1]=p;for(var o=2;o<r;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var a=n(7896),i=(n(2784),n(30876));const r={id:"modules",title:"@unirep/utils",sidebar_label:"Exports",sidebar_position:.5,custom_edit_url:null},l=void 0,p={unversionedId:"utils-api/modules",id:"version-2.1.x/utils-api/modules",title:"@unirep/utils",description:"Classes",source:"@site/versioned_docs/version-2.1.x/utils-api/modules.md",sourceDirName:"utils-api",slug:"/utils-api/modules",permalink:"/docs/utils-api/modules",draft:!1,editUrl:null,tags:[],version:"2.1.x",sidebarPosition:.5,frontMatter:{id:"modules",title:"@unirep/utils",sidebar_label:"Exports",sidebar_position:.5,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Readme",permalink:"/docs/utils-api/"},next:{title:"IncrementalMerkleTree",permalink:"/docs/utils-api/classes/IncrementalMerkleTree"}},d={},o=[{value:"Classes",id:"classes",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:"Node",id:"node",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"Variables",id:"variables",level:2},{value:"ATTESTER_ID_BITS",id:"attester_id_bits",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"CHAIN_ID_BITS",id:"chain_id_bits",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"EPOCH_BITS",id:"epoch_bits",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"F",id:"f",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"MAX_EPOCH",id:"max_epoch",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"NONCE_BITS",id:"nonce_bits",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"ONE_BIT",id:"one_bit",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"REP_BITS",id:"rep_bits",level:3},{value:"Defined in",id:"defined-in-8",level:4},{value:"REVEAL_NONCE_BITS",id:"reveal_nonce_bits",level:3},{value:"Defined in",id:"defined-in-9",level:4},{value:"SNARK_SCALAR_FIELD",id:"snark_scalar_field",level:3},{value:"Defined in",id:"defined-in-10",level:4},{value:"Functions",id:"functions",level:2},{value:"genEpochKey",id:"genepochkey",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"genEpochTreeLeaf",id:"genepochtreeleaf",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"genIdentityHash",id:"genidentityhash",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"genRandomSalt",id:"genrandomsalt",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"genStateTreeLeaf",id:"genstatetreeleaf",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"stringifyBigInts",id:"stringifybigints",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"unstringifyBigInts",id:"unstringifybigints",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-17",level:4}],s={toc:o},k="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(k,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/utils-api/classes/IncrementalMerkleTree"},"IncrementalMerkleTree"))),(0,i.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,i.kt)("h3",{id:"node"},"Node"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"Node"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any")),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,"node_modules/@zk-kit/incremental-merkle-tree/dist/types/types/index.d.ts:1"),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("h3",{id:"attester_id_bits"},"ATTESTER","_","ID","_","BITS"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"ATTESTER","_","ID","_","BITS"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The number of bits in an ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/users-and-attesters#attesters-"},"attester ID")," variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(160)"),"."),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L21"},"packages/utils/src/crypto.ts:21")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"chain_id_bits"},"CHAIN","_","ID","_","BITS"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"CHAIN","_","ID","_","BITS"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The number of bits in a chain id variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(36)"),"."),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L29"},"packages/utils/src/crypto.ts:29")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"epoch_bits"},"EPOCH","_","BITS"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"EPOCH","_","BITS"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The number of bits in an ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/epoch"},"epoch")," variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(48)"),"."),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L25"},"packages/utils/src/crypto.ts:25")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"f"},"F"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"F"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")," representation of the field prime."),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L12"},"packages/utils/src/crypto.ts:12")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"max_epoch"},"MAX","_","EPOCH"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"MAX","_","EPOCH"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"number")),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," representation of the maximum epoch value. Equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"2**48-1"),"."),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L45"},"packages/utils/src/crypto.ts:45")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"nonce_bits"},"NONCE","_","BITS"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"NONCE","_","BITS"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The number of bits in an ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/epoch-key"},"epoch key nonce")," variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(8)"),"."),(0,i.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L17"},"packages/utils/src/crypto.ts:17")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"one_bit"},"ONE","_","BIT"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"ONE","_","BIT"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"It indicates a one bit variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(1)"),"."),(0,i.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L41"},"packages/utils/src/crypto.ts:41")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"rep_bits"},"REP","_","BITS"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"REP","_","BITS"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The number of bits in a Rep variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(64)"),"."),(0,i.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L37"},"packages/utils/src/crypto.ts:37")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"reveal_nonce_bits"},"REVEAL","_","NONCE","_","BITS"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"REVEAL","_","NONCE","_","BITS"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The number of bits in a reveal nonce variable. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},"BigInt(1)"),"."),(0,i.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L33"},"packages/utils/src/crypto.ts:33")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"snark_scalar_field"},"SNARK","_","SCALAR","_","FIELD"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"SNARK","_","SCALAR","_","FIELD"),": ",(0,i.kt)("inlineCode",{parentName:"p"},'"21888242871839275222246405745257275088548364400416034343698204186575808495617"')),(0,i.kt)("p",null,"A decimal string representing the field prime."),(0,i.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L7"},"packages/utils/src/crypto.ts:7")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"genepochkey"},"genEpochKey"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"genEpochKey"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"identitySecret"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"attesterId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nonce"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chainId"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"Calculate an ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/epoch-key"},"epoch key"),"."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"identitySecret")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The secret of a user's ",(0,i.kt)("a",{parentName:"td",href:"https://semaphore.pse.dev/"},"Semaphore identity"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"attesterId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Either an EOA or a smart contract address of an ",(0,i.kt)("a",{parentName:"td",href:"https://developer.unirep.io/docs/protocol/users-and-attesters#attesters-"},"attester"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"epoch")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The epoch information.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"nonce")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A epoch key nonce chosed by user.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"chainId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current chain id.")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The epoch key result."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Identity } from '@semaphore-protocol/identity'\nimport { genEpochKey } from '@unirep/utils'\n\nconst id = new Identity()\nconst attesterId = '0x1234'\nconst epoch = 0\nconst nonce = 0\nconst chainId = 1\nconst epochKey = genEpochKey(\n  id.secret,\n  attesterId,\n  epoch,\n  nonce,\n  chainId\n)\n")),(0,i.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L86"},"packages/utils/src/crypto.ts:86")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"genepochtreeleaf"},"genEpochTreeLeaf"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"genEpochTreeLeaf"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"epochKey"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"Calculate an epoch tree leaf in an ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/trees#epoch-tree"},"epoch tree")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"epochKey")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The ",(0,i.kt)("a",{parentName:"td",href:"https://developer.unirep.io/docs/protocol/epoch-key"},"epoch key")," information.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"data")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint"),")[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The array of ",(0,i.kt)("a",{parentName:"td",href:"https://developer.unirep.io/docs/protocol/data"},"data")," of the epoch key in the epoch tree.")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The epoch tree leaf."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { genEpochTreeLeaf } from '@unirep/utils'\n\nconst epochKey = '0x3456'\nconst FIELD_COUNT = 6\nconst data = Array(FIELD_COUNT).fill(0)\nconst leaf = genEpochTreeLeaf(\n  epochKey,\n  data\n)\n")),(0,i.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L218"},"packages/utils/src/crypto.ts:218")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"genidentityhash"},"genIdentityHash"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"genIdentityHash"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"identitySecret"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"attesterId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chainId"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"Calculate an identity hash for a user. It is used for user signup.\nThe state tree leaf should follow the format: ",(0,i.kt)("inlineCode",{parentName:"p"},"stateTreeLeaf = H(identityHash, H(data))"),"\nwhere ",(0,i.kt)("inlineCode",{parentName:"p"},"identityHash = H(identitySecret, attesterId + (epoch << 160) + (chainId << 208))"),"."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"identitySecret")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The secret of a user's ",(0,i.kt)("a",{parentName:"td",href:"https://semaphore.pse.dev/"},"Semaphore identity"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"attesterId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Either an EOA or a smart contract address of an ",(0,i.kt)("a",{parentName:"td",href:"https://developer.unirep.io/docs/protocol/users-and-attesters#attesters-"},"attester"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"epoch")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The epoch information.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"chainId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current chain id.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The identity hash."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Identity } from '@semaphore-protocol/identity'\nimport { genIdentityHash } from '@unirep/utils'\n\nconst id = new Identity()\nconst attesterId = '0x1234'\nconst epoch = 0\nconst chainId = 1\nconst idHash = genIdentityHash(\n  id.secret,\n  attesterId,\n  epoch,\n  chainId\n)\n")),(0,i.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L134"},"packages/utils/src/crypto.ts:134")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"genrandomsalt"},"genRandomSalt"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"genRandomSalt"),"(): ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"Generate a random ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")," in the snark finite field."),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { genRandomSalt } from '@unirep/utils'\n\n// generate random bigint\nconst salt = genRandomSalt()\n")),(0,i.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L57"},"packages/utils/src/crypto.ts:57")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"genstatetreeleaf"},"genStateTreeLeaf"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"genStateTreeLeaf"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"identitySecret"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"attesterId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"epoch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chainId"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"Calculate a ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/protocol/trees#state-tree"},"state tree")," leaf for a user."),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"identitySecret")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The secret of a user's ",(0,i.kt)("a",{parentName:"td",href:"https://semaphore.pse.dev/"},"Semaphore identity"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"attesterId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Either an EOA or a smart contract address of an ",(0,i.kt)("a",{parentName:"td",href:"https://developer.unirep.io/docs/protocol/users-and-attesters#attesters-"},"attester"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"epoch")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The epoch information.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"data")),(0,i.kt)("td",{parentName:"tr",align:"left"},"(",(0,i.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint"),")[]"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The array of user ",(0,i.kt)("a",{parentName:"td",href:"https://developer.unirep.io/docs/protocol/data"},"data")," in the current epoch.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"chainId")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current chain id.")))),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bigint")),(0,i.kt)("p",null,"The state tree leaf."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Identity } from '@semaphore-protocol/identity'\nimport { genStateTreeLeaf } from '@unirep/utils'\n\nconst id = new Identity()\nconst attesterId = '0x1234'\nconst epoch = 0\nconst FIELD_COUNT = 6\nconst data = Array(FIELD_COUNT).fill(0)\nconst chainId = 1\nconst leaf = genStateTreeLeaf(\n  id.secret,\n  attesterId,\n  epoch,\n  data,\n  chainId\n)\n")),(0,i.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/crypto.ts#L179"},"packages/utils/src/crypto.ts:179")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"stringifybigints"},"stringifyBigInts"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"stringifyBigInts"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"o"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"any")),(0,i.kt)("p",null,"Stringify all ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),"s in an object, a string, or an array."),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"o")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:"left"},"An object with ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint"),", an array of ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint"),"s, or a ",(0,i.kt)("inlineCode",{parentName:"td"},"bigint"),".")))),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"any")),(0,i.kt)("p",null,"Stringified object, an array of string, or a string."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { stringifyBigInts } from '@unirep/utils'\n\nstringifyBigInts(BigInt(3))\n// '3'\n\nstringifyBigInts([BigInt(3)])\n// ['3']\n\nstringifyBigInts({\n item: BigInt(3)\n})\n// { item: '3' }\n")),(0,i.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/stringify.ts#L32"},"packages/utils/src/stringify.ts:32")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"unstringifybigints"},"unstringifyBigInts"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"unstringifyBigInts"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"o"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"any")),(0,i.kt)("p",null,"Unstringify all ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"s in an object, a string, or an array to ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),"s"),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"o")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Stringified object, an array of string, or a string.")))),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"any")),(0,i.kt)("p",null,"An object with ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),", an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),"s, or a ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { unstringifyBigInts } from '@unirep/utils'\n\nconst values = {\n input1: '1',\n input2: '2',\n input3: '3',\n}\n\nunstringifyBigInts(values)\n// { input1: 1n, input2: 2n, input3: 3n }\n")),(0,i.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/utils/src/stringify.ts#L69"},"packages/utils/src/stringify.ts:69")))}m.isMDXComponent=!0}}]);