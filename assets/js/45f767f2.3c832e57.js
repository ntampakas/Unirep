"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[5960],{30876:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>y});var n=t(2784);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),d=c(t),f=i,y=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?n.createElement(y,p(p({ref:r},s),{},{components:t})):n.createElement(y,p({ref:r},s))}));function y(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,p=new Array(o);p[0]=f;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a[d]="string"==typeof e?e:i,p[1]=a;for(var c=2;c<o;c++)p[c]=t[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},21466:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=t(7896),i=(t(2784),t(30876));const o={title:"Deployment"},p=void 0,a={unversionedId:"contracts-api/deploy",id:"version-2.1.x/contracts-api/deploy",title:"Deployment",description:"Import the deployment functions with:",source:"@site/versioned_docs/version-2.1.x/contracts-api/deploy.md",sourceDirName:"contracts-api",slug:"/contracts-api/deploy",permalink:"/docs/contracts-api/deploy",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.1.x/contracts-api/deploy.md",tags:[],version:"2.1.x",frontMatter:{title:"Deployment"},sidebar:"apiSidebar",previous:{title:"ABIs",permalink:"/docs/contracts-api/abis"},next:{title:"Error codes",permalink:"/docs/contracts-api/errors"}},l={},c=[{value:"deployUnirep",id:"deployunirep",level:2},{value:"deployVerifier",id:"deployverifier",level:2},{value:"deployVerifiers",id:"deployverifiers",level:2},{value:"deployVerifierHelpers",id:"deployverifierhelpers",level:2},{value:"deployVerifierHelper",id:"deployverifierhelper",level:2}],s={toc:c},d="wrapper";function u(e){let{components:r,...t}=e;return(0,i.kt)(d,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Import the deployment functions with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { deployUnirep } from '@unirep/contracts/deploy'\n")),(0,i.kt)("h2",{id:"deployunirep"},"deployUnirep"),(0,i.kt)("p",null,"Deploy ",(0,i.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," and its verifiers and connect libraries."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const deployUnirep = async (\n    deployer: ethers.Signer,\n    _settings: CircuitConfig = CircuitConfig.default,\n    prover?: Prover\n): Promise<Unirep>\n")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ethers } from 'ethers'\nimport { Unirep } from '@unirep/contracts'\nimport { deployUnirep } from '@unirep/contracts/deploy'\nconst privateKey = 'YOUR/PRIVATE/KEY'\nconst provider = 'YOUR/ETH/PROVIDER'\nconst deployer = new ethers.Wallet(privateKey, provider);\nconst unirepContract: Unirep = await deployUnirep(deployer)\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The default circuit configuration is set in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/1a3c9c944925ec125a7d7d8bfa9990466389477b/packages/circuits/src/CircuitConfig.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"CircuitConfig.ts")),".",(0,i.kt)("br",null),"\nPlease make sure the ",(0,i.kt)("inlineCode",{parentName:"p"},"CircuitConfig")," matches your ",(0,i.kt)("a",{parentName:"p",href:"/docs/circuits-api/interfaces/src.Prover"},(0,i.kt)("inlineCode",{parentName:"a"},"prover")),"."),(0,i.kt)("p",{parentName:"admonition"},"If you don't compile circuits on your own, please don't change the ",(0,i.kt)("inlineCode",{parentName:"p"},"_settings")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"prover"),".",(0,i.kt)("br",null),"\nSee the current prover and settings of deployed contracts: ",(0,i.kt)("a",{parentName:"p",href:"/docs/testnet-deployment"},"\ud83e\udd1d Testnet Deployment"),".")),(0,i.kt)("h2",{id:"deployverifier"},"deployVerifier"),(0,i.kt)("p",null,"Deploy a given circuit verifier. The verifier is with a certain interface: ",(0,i.kt)("a",{parentName:"p",href:"/docs/contracts-api/verifiers/iverifier-sol"},"IVerifier.sol"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const deployVerifier = async (\n    deployer: ethers.Signer,\n    circuit: Circuit | string,\n    prover?: Prover\n): Promise<ethers.Contract>\n")),(0,i.kt)("h2",{id:"deployverifiers"},"deployVerifiers"),(0,i.kt)("p",null,"Deploy all known circuit verifiers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const deployVerifiers = async (\n    deployer: ethers.Signer,\n    prover?: Prover\n): Promise<{ [circuit: string]: Promise<string> }>\n")),(0,i.kt)("h2",{id:"deployverifierhelpers"},"deployVerifierHelpers"),(0,i.kt)("p",null,"Deploy all known circuit verifier helpers. A helper can help with decoding public signals. For example: ",(0,i.kt)("a",{parentName:"p",href:"/docs/contracts-api/verifiers/epoch-key-verifier-helper"},"EpochKeyVerifierHelper.sol")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const deployVerifierHelpers = async (\n    unirepAddress: string,\n    deployer: ethers.Signer,\n    prover?: Prover\n)\n")),(0,i.kt)("h2",{id:"deployverifierhelper"},"deployVerifierHelper"),(0,i.kt)("p",null,"Deploy a given circuit verifier helper. For example: ",(0,i.kt)("a",{parentName:"p",href:"/docs/contracts-api/verifiers/epoch-key-verifier-helper"},"EpochKeyVerifierHelper.sol")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const deployVerifierHelper = async (\n    unirepAddress: string,\n    deployer: ethers.Signer,\n    circuit: Circuit,\n    prover?: Prover\n): Promise<ethers.Contract>\n")))}u.isMDXComponent=!0}}]);