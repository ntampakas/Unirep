"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[6371],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82009:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(2784),r=n(6277);const i={tabItem:"tabItem_OMyP"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},77336:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7896),r=n(2784),i=n(6277),o=n(24126),s=n(7267),p=n(32424),l=n(42244),c=n(24155);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,p._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=d(e),[o,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[p,l]=h({queryString:n,groupId:a}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),k=(()=>{const e=p??u;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{k&&s(k)}),[k]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),g(e)}),[l,g,i]),tabValues:i}}var k=n(89741);const f={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:p,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=l[n].value;a!==s&&(u(t),p(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=g(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function N(e){const t=(0,k.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},64532:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(7896),r=(n(2784),n(30876)),i=n(77336),o=n(82009);const s={title:"Getting Started with ts/js"},p="\ud83d\ude80 Getting Started with TypeScript/JavaScript",l={unversionedId:"getting-started/ts-js",id:"getting-started/ts-js",title:"Getting Started with ts/js",description:"We provide the following npm packages for developers to build with TypeScript or JavaScript:",source:"@site/docs/getting-started/ts-js.md",sourceDirName:"getting-started",slug:"/getting-started/ts-js",permalink:"/docs/next/getting-started/ts-js",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/docs/getting-started/ts-js.md",tags:[],version:"current",frontMatter:{title:"Getting Started with ts/js"},sidebar:"apiSidebar",previous:{title:"Getting Started with create-unirep-app",permalink:"/docs/next/getting-started/create-unirep-app"},next:{title:"Testnet Addresses",permalink:"/docs/next/testnet-deployment"}},c={},u=[{value:"\ud83d\udcbb Installation",id:"-installation",level:2},{value:"\ud83d\udee0\ufe0f Deploy or connect to a Unirep smart contract",id:"\ufe0f-deploy-or-connect-to-a-unirep-smart-contract",level:2},{value:"Deploy a <code>Unirep.sol</code>",id:"deploy-a-unirepsol",level:3},{value:"Connect to a deployed <code>Unirep.sol</code>",id:"connect-to-a-deployed-unirepsol",level:3},{value:"\ud83e\udd16 Attester sign up",id:"-attester-sign-up",level:2},{value:"1. Attester sign up with a wallet \ud83d\udc5b",id:"1-attester-sign-up-with-a-wallet-",level:3},{value:"2. Attester sign up with a smart contract \ud83d\udcc4",id:"2-attester-sign-up-with-a-smart-contract-",level:3},{value:"\ud83d\udc64 User sign up",id:"-user-sign-up",level:2},{value:"User generates sign up proof",id:"user-generates-sign-up-proof",level:3},{value:"Attester submits sign up proof",id:"attester-submits-sign-up-proof",level:3},{value:"\ud83d\udcee Attestation",id:"-attestation",level:2},{value:"User generates epoch keys",id:"user-generates-epoch-keys",level:3},{value:"Attester submits the transaction",id:"attester-submits-the-transaction",level:3},{value:"\u23f1\ufe0f User state transition",id:"\ufe0f-user-state-transition",level:2},{value:"User generates user state transition proof",id:"user-generates-user-state-transition-proof",level:3},{value:"A transition proof can be relayed",id:"a-transition-proof-can-be-relayed",level:3},{value:"\ud83d\udd10 Prove data",id:"-prove-data",level:2},{value:"User generates data proof",id:"user-generates-data-proof",level:3},{value:"Other users and attesters verify the proof",id:"other-users-and-attesters-verify-the-proof",level:3}],d={toc:u},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-getting-started-with-typescriptjavascript"},"\ud83d\ude80 Getting Started with TypeScript/JavaScript"),(0,r.kt)("p",null,"We provide the following npm packages for developers to build with TypeScript or JavaScript:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Package"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Version"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Unirep/Unirep/tree/main/packages/core"},(0,r.kt)("inlineCode",{parentName:"a"},"@unirep/core"))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{href:"https://www.npmjs.com/package/@unirep/core"},(0,r.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/core?color=%230004&style=flat-square"}))),(0,r.kt)("td",{parentName:"tr",align:null},"Unirep protocol-related functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Unirep/Unirep/tree/main/packages/contracts"},(0,r.kt)("inlineCode",{parentName:"a"},"@unirep/contracts"))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{href:"https://www.npmjs.com/package/@unirep/contracts"},(0,r.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/contracts?color=%230004&style=flat-square"}))),(0,r.kt)("td",{parentName:"tr",align:null},"Unirep smart contracts, ZKP verifiers and contract-related functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Unirep/Unirep/tree/main/packages/circuits"},(0,r.kt)("inlineCode",{parentName:"a"},"@unirep/circuits"))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{href:"https://www.npmjs.com/package/@unirep/circuits"},(0,r.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/circuits?color=%230004&style=flat-square"}))),(0,r.kt)("td",{parentName:"tr",align:null},"Unirep Circom circuits and circuit-related functions")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{parentName:"td",href:"https://github.com/Unirep/Unirep/tree/main/packages/utils"},(0,r.kt)("inlineCode",{parentName:"a"},"@unirep/utils"))),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("a",{href:"https://www.npmjs.com/package/@unirep/utils"},(0,r.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/utils?color=%230004&style=flat-square"}))),(0,r.kt)("td",{parentName:"tr",align:null},"Utilities used in Unirep protocol")))),(0,r.kt)("h2",{id:"-installation"},"\ud83d\udcbb Installation"),(0,r.kt)("p",null,"You can simply install ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@unirep/core"},(0,r.kt)("inlineCode",{parentName:"a"},"@unirep/core"))," to use all of these dependencies."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"yarn",label:"Yarn",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add @unirep/core\n"))),(0,r.kt)(o.Z,{value:"npm",label:"Npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm i @unirep/core\n")))),(0,r.kt)("h2",{id:"\ufe0f-deploy-or-connect-to-a-unirep-smart-contract"},"\ud83d\udee0\ufe0f Deploy or connect to a Unirep smart contract"),(0,r.kt)("h3",{id:"deploy-a-unirepsol"},"Deploy a ",(0,r.kt)("inlineCode",{parentName:"h3"},"Unirep.sol")),(0,r.kt)("p",null,"If there is no ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," deployed in a testnet or a local blockchain environment (e.g. ",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org"},"Hardhat")," node), you can run the following scripts:"),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript",value:"typescript"},{label:"Javascript",value:"javascript"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { ethers } from 'ethers'\nimport { deployUnirep } from '@unirep/contracts/deploy'\n\n// connect to a wallet\nconst privateKey = 'YOUR/PRIVATE/KEY'\nconst provider = 'YOUR/ETH/PROVIDER'\nconst deployer = new ethers.Wallet(privateKey, provider)\n\n// deploy unirep contract\nconst unirepContract = await deployUnirep(deployer)\n"))),(0,r.kt)(o.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const ethers = require('ethers')\nconst { deployUnirep } = require('@unirep/contracts/deploy')\n\n// connect to a wallet\nconst privateKey = 'YOUR/PRIVATE/KEY'\nconst provider = 'YOUR/ETH/PROVIDER'\nconst deployer = new ethers.Wallet(privateKey, provider)\n\n// deploy unirep contract\nconst unirepContract = await deployUnirep(deployer)\n")))),(0,r.kt)("h3",{id:"connect-to-a-deployed-unirepsol"},"Connect to a deployed ",(0,r.kt)("inlineCode",{parentName:"h3"},"Unirep.sol")),(0,r.kt)("p",null,"If a ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," is deployed, you can connect the smart contract with the function:"),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript",value:"typescript"},{label:"Javascript",value:"javascript"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { getUnirepContract, Unirep } from '@unirep/contracts'\n\nconst address = '0x...'\nconst provider = 'YOUR/ETH/PROVIDER'\n\nconst unirepContract: Unirep = getUnirepContract(address, provider)\n"))),(0,r.kt)(o.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { getUnirepContract } = require('@unirep/contracts')\n\nconst address = '0x...'\nconst provider = 'YOUR/ETH/PROVIDER'\n\nconst unirepContract = getUnirepContract(address, provider)\n")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/testnet-deployment"},"Testnet Deployment")," to see the currently deployed ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," contract.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The following actions are initiated by either an attester or a user."),(0,r.kt)("br",null),"\nRead the section ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/protocol/users-and-attesters"},"users and attesters")," to learn more."),(0,r.kt)("h2",{id:"-attester-sign-up"},"\ud83e\udd16 Attester sign up"),(0,r.kt)("p",null,"The app builder must sign up with ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," as an attester. There are two ways to sign up:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#1-attester-sign-up-with-a-wallet-"},"Attester signs up with a wallet")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#2-attester-sign-up-with-a-smart-contract-"},"Attester signs up with a smart contract"))),(0,r.kt)("h3",{id:"1-attester-sign-up-with-a-wallet-"},"1. Attester sign up with a wallet \ud83d\udc5b"),(0,r.kt)("p",null,"Connect a wallet with a private key and a provider, and then call ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/unirep-sol#attestersignup"},(0,r.kt)("inlineCode",{parentName:"a"},"attesterSignUp"))," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// deploy or connect to a unirep smart contract\nlet unirepContract = getUnirepContract(address, provider)\n// attester wallet\nconst attester = new ethers.Wallet(privateKey, provider)\n// connect unirep contract with attester wallet\nunirepContract = await unirepContract.connect(attester)\n// define epoch length\nconst epochLength = 300 // 300 seconds\n// send transaction\nconst tx = await unirepContract.attesterSignUp(epochLength)\nawait tx.wait()\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/getting-started/create-unirep-app#define-epoch-length"},"Define epoch length")," for more information.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.sender")," will be recorded as an attester ID in ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol"),". The attester should connect to this wallet to help users sign up and send attestations to users."),(0,r.kt)("h3",{id:"2-attester-sign-up-with-a-smart-contract-"},"2. Attester sign up with a smart contract \ud83d\udcc4"),(0,r.kt)("p",null,"The app builder can also use a smart contract as an attester. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="App.sol"',title:'"App.sol"'},"pragma solidity ^0.8.0;\nimport {Unirep} from '@unirep/contracts/Unirep.sol';\n\ncontract App {\n    Unirep public unirep;\n    constructor(\n        Unirep _unirep,\n        uint48 _epochLength\n    ) {\n        // set UniRep address\n        unirep = _unirep;\n        // sign up as an attester\n        unirep.attesterSignUp(_epochLength);\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," will record the ",(0,r.kt)("inlineCode",{parentName:"p"},"msg.sender"),", which is the address of ",(0,r.kt)("inlineCode",{parentName:"p"},"App.sol"),", as the attester ID. Now the attester can define the user signup and attestation logic in ",(0,r.kt)("inlineCode",{parentName:"p"},"App.sol"),"."),(0,r.kt)("h2",{id:"-user-sign-up"},"\ud83d\udc64 User sign up"),(0,r.kt)("p",null,"The attester can now start signing up users. Users of this application should provide a ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/circuits-api/circuits#signup-proof"},"signup proof")," which includes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Proving the user owns a ",(0,r.kt)("a",{parentName:"li",href:"https://semaphore.pse.dev/"},"Semaphore identity")),(0,r.kt)("li",{parentName:"ol"},"Proving the user has initialized ",(0,r.kt)("a",{parentName:"li",href:"/docs/next/protocol/data"},"data")),(0,r.kt)("li",{parentName:"ol"},"Proving the user wants to sign up to this attester (proving attester ID)")),(0,r.kt)("h3",{id:"user-generates-sign-up-proof"},"User generates sign up proof"),(0,r.kt)("p",null,"The user will generate the signup proof on the client side:"),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript",value:"typescript"},{label:"Javascript",value:"javascript"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { UserState } from '@unirep/core'\nimport { defaultProver } from '@unirep/circuits/provers/defaultProver'\nimport { Identity } from \"@semaphore-protocol/identity\"\n\n// Semaphore Identity\nconst id = new Identity()\n// generate user state\nconst userState = new UserState({\n  prover: defaultProver, // a circuit prover\n  unirepAddress: unirepContract.address,\n  provider, // an ethers.js provider\n  id,\n})\n\n// start and sync\nawait userState.start()\nawait userState.waitForSync()\n\n// generate signup proof\nconst { proof, publicSignals } = await userState.genUserSignUpProof()\n"))),(0,r.kt)(o.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { UserState } = require('@unirep/core')\nconst { defaultProver } = require('@unirep/circuits/provers/defaultProver')\nconst { Identity } = require(\"@semaphore-protocol/identity\")\n\n// Semaphore Identity\nconst id = new Identity()\n// generate user state\nconst userState = new UserState({\n  prover: defaultProver, // a circuit prover\n  unirepAddress: unirepContract.address,\n  provider, // an ethers.js provider\n  id,\n})\n\n// start and sync\nawait userState.start()\nawait userState.waitForSync()\n\n// generate signup proof\nconst { proof, publicSignals } = await userState.genUserSignUpProof()\n")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"../core-api/classes/UserState.md"},(0,r.kt)("inlineCode",{parentName:"a"},"UserState"))," for more information.")),(0,r.kt)("h3",{id:"attester-submits-sign-up-proof"},"Attester submits sign up proof"),(0,r.kt)("p",null,"The attester will submit this proof by calling the ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/unirep-sol#usersignup"},(0,r.kt)("inlineCode",{parentName:"a"},"userSignUp"))," function on ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol"),"."),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript/Javascript",value:"typescript"},{label:"Solidity",value:"solidity"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="userSignUp.ts/userSignUp.js"',title:'"userSignUp.ts/userSignUp.js"'},"// attester sends the tx\nconst tx = await unirepContract\n    .connect(attester)\n    .userSignUp(publicSignals, proof)\nawait tx.wait()\n"))),(0,r.kt)(o.Z,{value:"solidity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="App.sol"',title:'"App.sol"'},"function userSignUp(\n    uint256[] memory publicSignals,\n    uint256[8] memory proof\n) public {\n    unirep.userSignUp(publicSignals, proof);\n}\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"A user can check if they have signed up successfully with ",(0,r.kt)("inlineCode",{parentName:"p"},"userState"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// let userState synchronize through the latest block\nawait userState.waitForSync()\nconsole.log(await userState.hasSignedUp()) // true\n")),(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"../core-api/classes/Synchronizer.md#waitforsync"},(0,r.kt)("inlineCode",{parentName:"a"},"waitForSync"))," for more information.")),(0,r.kt)("h2",{id:"-attestation"},"\ud83d\udcee Attestation"),(0,r.kt)("p",null,"Users must provide ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/protocol/epoch-key"},"epoch keys")," to receive ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/protocol/data"},"data")," from attesters, similar to how Ethereum users provide address to receive ETH. An ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/protocol/attestation"},"attestation")," is the data an attester gives to a specified epoch key."),(0,r.kt)("h3",{id:"user-generates-epoch-keys"},"User generates epoch keys"),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript",value:"typescript"},{label:"Javascript",value:"javascript"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="epochKey.ts"',title:'"epochKey.ts"'},"import { genEpochKey } from '@unirep/utils'\n// get epoch from contract\nconst epoch = await unirepContract.attesterCurrentEpoch(attester.address)\n// define nonce\nconst nonce = 0 // it could be 0 to (NUM_EPOCH_KEY_NONCE - 1) per user\n// generate an epoch key\nconst epochKey = genEpochKey(\n    identity.secret,\n    BigInt(attester.address),\n    epoch,\n    nonce\n)\n"))),(0,r.kt)(o.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="epochKey.js"',title:'"epochKey.js"'},"const { genEpochKey } = require('@unirep/utils')\n// get epoch from contract\nconst epoch = await unirepContract.attesterCurrentEpoch(attester.address)\n// define nonce\nconst nonce = 0 // it could be 0 to (NUM_EPOCH_KEY_NONCE - 1) per user\n// generate an epoch key\nconst epochKey = genEpochKey(\n    identity.secret,\n    BigInt(attester.address),\n    epoch,\n    nonce\n)\n")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/utils-api/modules#genepochkey"},(0,r.kt)("inlineCode",{parentName:"a"},"genEpochKey"))," for more information.")),(0,r.kt)("h3",{id:"attester-submits-the-transaction"},"Attester submits the transaction"),(0,r.kt)("p",null,"The attester will submit attestations by calling the ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/unirep-sol#attest"},(0,r.kt)("inlineCode",{parentName:"a"},"attest"))," function on ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol"),".",(0,r.kt)("br",null),"\nTo add to a user's data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data[0] += 5\n")),(0,r.kt)("p",null,"the attester will define:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const fieldIndex = 0\nconst change = 5\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"There are ",(0,r.kt)("strong",{parentName:"p"},"addition data fields")," and ",(0,r.kt)("strong",{parentName:"p"},"replacement data fields"),". Please make sure the index of the data is correct."),(0,r.kt)("p",{parentName:"admonition"},"For example, if ",(0,r.kt)("inlineCode",{parentName:"p"},"SUM_FIELD_COUNT = 4")," then the ",(0,r.kt)("inlineCode",{parentName:"p"},"data[4]")," will be ",(0,r.kt)("em",{parentName:"p"},"replaced")," by the ",(0,r.kt)("inlineCode",{parentName:"p"},"change")," but not added together."),(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/protocol/data"},"Data")," for more information.")),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript/Javascript",value:"typescript"},{label:"Solidity",value:"solidity"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="attest.ts/attest.js"',title:'"attest.ts/attest.js"'},"// attester sends the tx\n// the data field that the attester chooses to change\nconst fieldIndex = 0\n// the amount of the change\nconst change = 5\nconst tx = await unirepContract\n    .connect(attester)\n    .attest(\n        epochKey,\n        epoch,\n        fieldIndex,\n        change\n    )\nawait tx.wait()\n"))),(0,r.kt)(o.Z,{value:"solidity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="App.sol"',title:'"App.sol"'},"// attester sends the tx\nfunction attest(\n    uint256 epochKey\n) public {\n    // get epoch from contract\n    uint48 epoch = unirep.attesterCurrentEpoch(uint160(address(this)));\n    // the data field that the attester chooses to change\n    uint fieldIndex = 0;\n    // the amount of the change\n    uint change = 5 ;\n    unirep.attest(\n        epochKey,\n        epoch,\n        fieldIndex,\n        change\n    );\n}\n")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"To verify an epoch key on-chain, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/getting-started/create-unirep-app#verify-epoch-key"},"Verify epoch key on-chain"),".")),(0,r.kt)("h2",{id:"\ufe0f-user-state-transition"},"\u23f1\ufe0f User state transition"),(0,r.kt)("p",null,"After an epoch ends, the user will perform ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/protocol/user-state-transition"},"user state transition")," to finalize the state in the previous epoch, and use a new state to receive more data in a new epoch."),(0,r.kt)("p",null,"The user state transition proof must be built by the user because only the user holds the Semaphore identity secret key."),(0,r.kt)("h3",{id:"user-generates-user-state-transition-proof"},"User generates user state transition proof"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// call to make sure the state is updated\nawait userState.waitForSync()\n// generate the user state transition proof\nconst { proof, publicSignals } = await userState.genUserStateTransitionProof()\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"../core-api/classes/UserState.md#genuserstatetransitionproof"},(0,r.kt)("inlineCode",{parentName:"a"},"genUserStateTransitionProof"))," for more information.")),(0,r.kt)("h3",{id:"a-transition-proof-can-be-relayed"},"A transition proof can be relayed"),(0,r.kt)("p",null,"The user state transition proof should be submitted to ",(0,r.kt)("inlineCode",{parentName:"p"},"Unirep.sol")," to update the user state on-chain but it does not have to be the attester that sends the transaction."),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript/Javascript",value:"typescript"},{label:"Solidity",value:"solidity"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transition.ts/transition.js"',title:'"transition.ts/transition.js"'},"// sends the tx\n// it doesn't need to be the attester\nconst tx = await unirepContract\n    .connect(relayer)\n    .userStateTransition(\n        publicSignals,\n        proof\n    )\nawait tx.wait()\n"))),(0,r.kt)(o.Z,{value:"solidity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="Relayer.sol"',title:'"Relayer.sol"'},"// sends the tx\n// it doesn't need to be the attester\nfunction transition(\n    uint[] memory publicSignals,\n    uint[8] memory proof\n) public {\n    unirep.userStateTransition(\n        publicSignals,\n        proof\n    );\n}\n")))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/unirep-sol#userstatetransition"},(0,r.kt)("inlineCode",{parentName:"a"},"userStateTransition"))," for more information.")),(0,r.kt)("h2",{id:"-prove-data"},"\ud83d\udd10 Prove data"),(0,r.kt)("p",null,"After a user state transition, a user can prove the data they received in previous epochs."),(0,r.kt)("h3",{id:"user-generates-data-proof"},"User generates data proof"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="proveData.ts/proveData.js"',title:'"proveData.ts/proveData.js"'},"// call to make sure the state is updated\nawait userState.waitForSync()\n// the data that the user wants to prove\n// If the user has 5, they can choose to prove they have more than 3\nconst repProof = await userState.genProveReputationProof({\n    minRep: 3\n})\n// check if proof is valid\nconsole.log(await repProof.verify()) // true\n\n// we will use { publicSignals, proof} later\nconst { publicSignals, proof } = repProof\n")),(0,r.kt)("p",null,"In this example, we define ",(0,r.kt)("inlineCode",{parentName:"p"},"data[0]")," as positive reputation and ",(0,r.kt)("inlineCode",{parentName:"p"},"data[1]")," as negative reputation. ",(0,r.kt)("br",null),"\nProving ",(0,r.kt)("inlineCode",{parentName:"p"},"minRep = 3")," is a claim that ",(0,r.kt)("inlineCode",{parentName:"p"},"(data[0] - data[1]) >= 3"),"."),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"#attester-submits-the-transaction"},"above attestation"),", the user's ",(0,r.kt)("inlineCode",{parentName:"p"},"data[0]")," increased by ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"data[1]")," was not changed."),(0,r.kt)("p",null,"Therefore in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"data[0] - data[1]")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"../core-api/classes/UserState.md#getprovabledata"},(0,r.kt)("inlineCode",{parentName:"a"},"getProvableData"))," to know the data that a user can prove."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const data = await userState.getProvableData()\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/circuits-api/circuits#reputation-proof"},(0,r.kt)("inlineCode",{parentName:"a"},"reputationProof"))," for more information.")),(0,r.kt)("h3",{id:"other-users-and-attesters-verify-the-proof"},"Other users and attesters verify the proof"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/verifiers/reputation-verifier-helper"},(0,r.kt)("inlineCode",{parentName:"a"},"ReputationVerifierHelper"))," to learn how to deploy and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"repVerifier"),".")),(0,r.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript/Javascript",value:"typescript"},{label:"Solidity",value:"solidity"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transition.ts/transition.js"',title:'"transition.ts/transition.js"'},"// sends the tx\n// it doesn't need to be the attester\nconst tx = await unirepContract\n    .connect(relayer)\n    .verifyReputationProof(\n        publicSignals,\n        proof\n    )\nawait tx.wait()\n"))),(0,r.kt)(o.Z,{value:"solidity",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="Relayer.sol"',title:'"Relayer.sol"'},"// sends the tx\n// it doesn't need to be the attester\nfunction verifyProof(\n    uint[] memory publicSignals,\n    uint[8] memory proof\n) public {\n    repVerifier.verifyAndCheckCaller(\n        publicSignals,\n        proof\n    );\n}\n")))),(0,r.kt)("p",null,"Now, start building your own application with UniRep. \ud83d\ude80"))}h.isMDXComponent=!0}}]);