"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[7511],{30876:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},52893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7896),a=(n(2784),n(30876));const o={description:"How the UniRep smart contract can help user and attester sign up."},i="Sign up",s={unversionedId:"protocol/contract/sign-up",id:"version-1.0.1/protocol/contract/sign-up",title:"Sign up",description:"How the UniRep smart contract can help user and attester sign up.",source:"@site/versioned_docs/version-1.0.1/protocol/contract/sign-up.md",sourceDirName:"protocol/contract",slug:"/protocol/contract/sign-up",permalink:"/docs/1.0.1/protocol/contract/sign-up",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/protocol/contract/sign-up.md",tags:[],version:"1.0.1",frontMatter:{description:"How the UniRep smart contract can help user and attester sign up."},sidebar:"apiSidebar",previous:{title:"Epoch transition",permalink:"/docs/1.0.1/protocol/contract/epoch-transition"},next:{title:"User state transition",permalink:"/docs/1.0.1/protocol/contract/user-state-transition"}},p={},c=[{value:"User Signs Up",id:"user-signs-up",level:2},{value:"Attester Signs up",id:"attester-signs-up",level:2}],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sign-up"},"Sign up"),(0,a.kt)("h2",{id:"user-signs-up"},"User Signs Up"),(0,a.kt)("p",null,"User signs up by providing an identity commitment and an initial balance. It also inserts a state leaf into the state tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"function userSignUp(uint256 identityCommitment, uint256 initBalance) public\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L170"},"Unirep.sol/userSignUp"))),(0,a.kt)("p",null,"If user signs up through an attester (",(0,a.kt)("inlineCode",{parentName:"p"},"msg.sender")," is a registered attester) and the attester sets the airdrop amount ",(0,a.kt)("inlineCode",{parentName:"p"},"initBalance")," non-zero, the user will have a one non-zero leaf in his user state. The non-zero leaf is computed by"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const hasSignedUp = 1\nconst airdroppedLeaf = hash(initBalance, 0, 0, hasSignedUp)\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"See: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/core/src/utils.ts#L68"},"core/src/computeInitUserStateRoot"))),(0,a.kt)("h2",{id:"attester-signs-up"},"Attester Signs up"),(0,a.kt)("p",null,"Attester can sign up through ",(0,a.kt)("inlineCode",{parentName:"p"},"attesterSignUp")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"attesterSignUpViaRelayer"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"function attesterSignUp() external override\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L246"},"Unirep.sol/attesterSignUp"))),(0,a.kt)("p",null,"If an attester signs up through his wallet or another smart contract, UniRep smart contract will record the ",(0,a.kt)("inlineCode",{parentName:"p"},"msg.sender")," and assign an attester ID to the address."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"function attesterSignUpViaRelayer(\n    address attester,\n    bytes calldata signature\n) external override\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L255"},"Unirep.sol/attesterSignUpViaRelayer"))),(0,a.kt)("p",null,"The attester can also sign up through another relayer, but he has to provide the address of the attester who wants to sign up and the signature. The attester signs over his's own address concatenated with this contract address, then the UniRep smart contract will verify the signature by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/libraries/VerifySignature.sol#L8"},"verifySignature"),"."))}d.isMDXComponent=!0}}]);