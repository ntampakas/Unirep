"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[4513],{30876:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var o=r(2784);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),c=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,m=u["".concat(p,".").concat(d)]||u[d]||h[d]||a;return r?o.createElement(m,i(i({ref:t},l),{},{components:r})):o.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},92162:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=r(7896),n=(r(2784),r(30876));const a={Title:"\ud83e\udde9 Introduction"},i="\ud83e\udde9 Introduction",s={unversionedId:"introduction",id:"version-1.0.1/introduction",title:"\ud83e\udde9 Introduction",description:"How does the Unirep protocol work?",source:"@site/versioned_docs/version-1.0.1/introduction.md",sourceDirName:".",slug:"/introduction",permalink:"/docs/1.0.1/introduction",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/introduction.md",tags:[],version:"1.0.1",frontMatter:{Title:"\ud83e\udde9 Introduction"},sidebar:"apiSidebar",previous:{title:"\ud83d\udc4f Welcome",permalink:"/docs/1.0.1/welcome"},next:{title:"Install & build \ud83d\udee0",permalink:"/docs/1.0.1/getting-started/install-and-build"}},p={},c=[{value:"How does the Unirep protocol work?",id:"how-does-the-unirep-protocol-work",level:2},{value:"1. Registration",id:"1-registration",level:3},{value:"2. Give Reputation",id:"2-give-reputation",level:3},{value:"3. Receive Reputation",id:"3-receive-reputation",level:3},{value:"4. Prove Reputation",id:"4-prove-reputation",level:3},{value:"5. Advanced",id:"5-advanced",level:3}],l={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-introduction"},"\ud83e\udde9 Introduction"),(0,n.kt)("h2",{id:"how-does-the-unirep-protocol-work"},"How does the Unirep protocol work?"),(0,n.kt)("p",null,"There are two different actors in the Unirep protocol: ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/users-and-attesters"},"users and attesters")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Users")," can receive and spend ",(0,n.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/reputation"},(0,n.kt)("strong",{parentName:"a"},"reputation")),", prove their reputation, and use temporary identities called ",(0,n.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/epoch-key"},(0,n.kt)("strong",{parentName:"a"},"epoch keys"))," to interact with other people. Users can generate a set of new epoch keys every ",(0,n.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/epoch"},(0,n.kt)("strong",{parentName:"a"},"epoch"))," (in this case, 7 days). In a way, the user gets a completely new identities every epoch which preserves their privacy."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Attesters")," represent users to give reputation to an epoch key. Attester IDs are public and unchangeable so users can always prove that the reputation is from the attester.")),(0,n.kt)("h3",{id:"1-registration"},"1. Registration"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("strong",{parentName:"em"},"Users and attesters use different ways to sign up in Unirep"))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/4800/0*wcqrf4SN2TRx38YI",alt:"User signup and attester signup in Unirep"})),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"User")),(0,n.kt)("p",{parentName:"li"},"A user generates ",(0,n.kt)("font",{color:"red"},"identity")," and ",(0,n.kt)("font",{color:"green"},"identity commitment")," through ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol"},"Semaphore"),"."),(0,n.kt)("p",{parentName:"li"},"The user holds the ",(0,n.kt)("em",{parentName:"p"},"identity")," like a private key, and the ",(0,n.kt)("em",{parentName:"p"},"identity commitment")," is like a public key that is submitted to the Unirep contract.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Attester")),(0,n.kt)("p",{parentName:"li"},"The attester uses his own ",(0,n.kt)("strong",{parentName:"p"},"wallet")," or the address of a ",(0,n.kt)("strong",{parentName:"p"},"smart contract")," to register. After calling the attester sign up function, the Unirep contract will assign an ",(0,n.kt)("em",{parentName:"p"},"attester ID")," to this ",(0,n.kt)("font",{color:"green"},"address"),"."),(0,n.kt)("p",{parentName:"li"},"Whenever the attester gives an attestation, the Unirep contract will check whether the address is registered. If it is registered, the attester is allowed to give reputation to an epoch key."),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Note:")," Everyone can sign up as an attester with their wallet address and will receive a new attester ID")))),(0,n.kt)("h3",{id:"2-give-reputation"},"2. Give Reputation"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},(0,n.kt)("strong",{parentName:"em"},"Only epoch keys can receive reputation."))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/4800/0*zxlIej01nppoYBoc",alt:"How an attester attests to an epoch key"})),(0,n.kt)("p",null,"After a user signs up to Unirep, he can generate epoch keys to receive reputation. These epoch keys change every epoch, are unique to every user and look completely random. Therefore, to convince others that the epoch key is computed correctly with the current epoch and a valid nonce, an ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/epoch-key-proof"},(0,n.kt)("strong",{parentName:"a"},"epoch key proof"))," is used. Also, to convince others the epoch key is generated by a signed up user, the ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/trees#global-state-tree"},(0,n.kt)("strong",{parentName:"a"},"Global State Tree (GST)"))," is proposed. If the output global state tree root matches one of the history roots in given epoch, others can be sure that the epoch key owner is a valid user in the given epoch."),(0,n.kt)("p",null,"After seeing the valid ",(0,n.kt)("strong",{parentName:"p"},"epoch key")," and ",(0,n.kt)("strong",{parentName:"p"},"epoch key proof"),", the attester (or a user can submit an attestation through an attester) can give reputation to the epoch key through the Unirep smart contract."),(0,n.kt)("h3",{id:"3-receive-reputation"},"3. Receive Reputation"),(0,n.kt)("p",null,"A user can prove which epoch key he owns and everyone can easily query how much reputation the epoch key has from the contract. A user that has received some bad reputation during a certain epoch could ",(0,n.kt)("em",{parentName:"p"},"decide not to show those epoch keys")," to other users. Therefore, after an epoch ends and all epoch keys are sealed, Unirep restricts users to generate a ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/user-state-transition"},(0,n.kt)("strong",{parentName:"a"},"User State Transition"))," proof that is used to update their reputation status."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/4800/0*t18QHcnKhY5LA5P8",alt:"User State Transition in Unirep"})),(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},(0,n.kt)("strong",{parentName:"a"},"User State Transition Proof"))," is used to ensure that the user calculates the latest user state (represents by a ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/trees#user-state-tree"},(0,n.kt)("strong",{parentName:"a"},"User State Tree (UST)")),") in the correct way, and the user does not miss any attestation."),(0,n.kt)("h3",{id:"4-prove-reputation"},"4. Prove Reputation"),(0,n.kt)("p",null,"After a user performs a User State Transition, he will have the latest user state. At this time, the user can prove everyone on the platform how many reputation points he has in Unirep through a ",(0,n.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/reputation-proof"},(0,n.kt)("strong",{parentName:"a"},"reputation proof")),". The reputation proof checks"," "),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"whether the user exists, has the claimed reputation (for example, it sums up positive and negative reputation from a specified attester ID)"),(0,n.kt)("li",{parentName:"ol"},"The user performs User State Transition in the given epoch.")),(0,n.kt)("h3",{id:"5-advanced"},"5. Advanced"),(0,n.kt)("p",null,"To see more functions in Unirep, please refer to the following links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/1.0.1/cli/spend-reputation"},"Spend reputation")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/1.0.1/cli/airdrop-reputation"},"Airdrop reputation"))))}h.isMDXComponent=!0}}]);