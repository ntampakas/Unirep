"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[8808],{30876:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,d=c["".concat(l,".").concat(m)]||c[m]||h[m]||o;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4292:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7896),a=(r(2784),r(30876));const o={description:"Definition of reputation in UniRep"},i="Reputation",s={unversionedId:"protocol/glossary/reputation",id:"version-1.0.1/protocol/glossary/reputation",title:"Reputation",description:"Definition of reputation in UniRep",source:"@site/versioned_docs/version-1.0.1/protocol/glossary/reputation.md",sourceDirName:"protocol/glossary",slug:"/protocol/glossary/reputation",permalink:"/docs/1.0.1/protocol/glossary/reputation",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/protocol/glossary/reputation.md",tags:[],version:"1.0.1",frontMatter:{description:"Definition of reputation in UniRep"},sidebar:"apiSidebar",previous:{title:"Nullifiers",permalink:"/docs/1.0.1/protocol/glossary/nullifiers"},next:{title:"Trees",permalink:"/docs/1.0.1/protocol/glossary/trees"}},l={},p=[{value:"Reputation",id:"reputation-1",level:2},{value:"Attestation",id:"attestation",level:2}],u={toc:p},c="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reputation"},"Reputation"),(0,a.kt)("h2",{id:"reputation-1"},"Reputation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The reputation in UniRep protocol includes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"posRep"),": is the positive reputation given by the attester"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"negRep"),": is the negative reputation given by the attester"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"graffiti"),": is the message given by the attester"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"signUp"),": indicates if the attester authenticates the user"))),(0,a.kt)("li",{parentName:"ul"},"The hash of the reputation is computed by the ",(0,a.kt)("a",{parentName:"li",href:"https://www.poseidon-hash.info/"},"Poseidon hash")," function.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const hashReputation = hash(posRep, negRep, graffiti, signUp)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The overall ",(0,a.kt)("strong",{parentName:"li"},"reputation status")," of a user is stored in the user's ",(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/trees#user-state-tree"},"User State Tree"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"where the index of the leaf is the attester ID"),(0,a.kt)("li",{parentName:"ul"},"the leaf value is the accumulated ",(0,a.kt)("inlineCode",{parentName:"li"},"hashReputation")," that the attester gives")))),(0,a.kt)("h2",{id:"attestation"},"Attestation"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The attestation is almost the same as reputation, but it includes an ",(0,a.kt)("inlineCode",{parentName:"li"},"attesterId")),(0,a.kt)("li",{parentName:"ul"},"The hash of attestation is computed by")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const hashAttestation = hash(attesterId, posRep, negRep, graffiti, signUp)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The attestations to an epoch key would be chained together. A hashchain would be formed by the hashes of the attestations."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"For example, ",(0,a.kt)("strong",{parentName:"li"},"Hash chain")," is computed by")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"const hashChainResult = hash(hashAttestation_3, hash(hashAttestation_2, hash(hashAttestation_1, 0)))\n")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"So user ",(0,a.kt)("strong",{parentName:"li"},"can not omit any attestation")," because the ",(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},"circuit")," requires each attestation in the hashchain to be processed. ",(0,a.kt)("br",null),(0,a.kt)("font",{color:"red"},(0,a.kt)("strong",{parentName:"li"},"->"))," ",(0,a.kt)("font",{color:"red"}),(0,a.kt)("font",{color:"red"})," ",(0,a.kt)("font",{color:"red"}),(0,a.kt)("font",{color:"red"},(0,a.kt)("strong",{parentName:"li"},"Non-repudiable"))),(0,a.kt)("li",{parentName:"ul"},"if user omits an attestation, then the computed hashchain would not match the one in the Unirep contract")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"See also"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/trees"},"Trees")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/epoch-transition"},"Epoch Transition")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/user-state-transition"},"User State Transition")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},"User State Transition Proof")))))}h.isMDXComponent=!0}}]);