"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[575],{30876:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(2784);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},v=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=c(t),v=i,m=l["".concat(p,".").concat(v)]||l[v]||d[v]||o;return t?n.createElement(m,a(a({ref:r},u),{},{components:t})):n.createElement(m,a({ref:r},u))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=v;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s[l]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}v.displayName="MDXCreateElement"},37856:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>v,frontMatter:()=>o,metadata:()=>s,toc:()=>c,version:()=>u});var n=t(7896),i=(t(2784),t(30876));const o={title:"Web Prover"},a=void 0,s={unversionedId:"circuits-api/web-prover",id:"version-2.0.0-beta-4/circuits-api/web-prover",title:"Web Prover",description:"The circuits package includes a browser compatible prover. This prover loads",source:"@site/versioned_docs/version-2.0.0-beta-4/circuits-api/web-prover.mdx",sourceDirName:"circuits-api",slug:"/circuits-api/web-prover",permalink:"/docs/2.0.0-beta-4/circuits-api/web-prover",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/circuits-api/web-prover.mdx",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"Web Prover"},sidebar:"apiSidebar",previous:{title:"Default prover",permalink:"/docs/2.0.0-beta-4/circuits-api/default-prover"},next:{title:"BaseProof",permalink:"/docs/2.0.0-beta-4/circuits-api/base-proof"}},p={},c=[{value:"Usage",id:"usage",level:2},{value:"Default key server",id:"default-key-server",level:3},{value:"Custom key server",id:"custom-key-server",level:3},{value:"API",id:"api",level:2},{value:"warmKeys",id:"warmkeys",level:3}],u=t(23214).i8,l={toc:c,version:u},d="wrapper";function v(e){let{components:r,...t}=e;return(0,i.kt)(d,(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The circuits package includes a browser compatible prover. This prover loads the proving keys from a remote URL. By default this url is"," ",(0,i.kt)("code",null,"https://keys.unirep.io/",u,"/"),"."),(0,i.kt)("p",null,"The server is expected to serve the ",(0,i.kt)("code",null,"zkey"),", ",(0,i.kt)("code",null,"wasm"),", and ",(0,i.kt)("code",null,"vkey")," files at their respective names in the provided subpath. e.g. for the above url the signup zkey is at"," ",(0,i.kt)("code",null,"https://keys.unirep.io/",u,"/signup.zkey`"),"."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The keys included are not safe for production use. A phase 2 trusted setup needs to be done before use.")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"default-key-server"},"Default key server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Circuit } from '@unirep/circuits'\nimport prover from '@unirep/circuits/provers/web'\n\nawait prover.genProofAndPublicSignals(Circuit.signup, {\n    /* inputs */\n})\n")),(0,i.kt)("h3",{id:"custom-key-server"},"Custom key server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Circuit } from '@unirep/circuits'\nimport { WebProver } from '@unirep/circuits/provers/web'\n\n// For a local key server\nconst prover = new WebProver('http://localhost:8000/keys/')\nawait prover.genProofAndPublicSignals(Circuit.signup, {\n    /* inputs */\n})\n")),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("p",null,"The web prover supports all the methods from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Prover")," interface in addition to the following."),(0,i.kt)("h3",{id:"warmkeys"},"warmKeys"),(0,i.kt)("p",null,"Load proving keys for a circuit into memory. Future proofs using these keys will not need to wait for download."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use this function without ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," to start the download in the background.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await webProver.warmKeys(circuitName: string)\n")))}v.isMDXComponent=!0},23214:e=>{e.exports={i8:"2.1.5"}}}]);