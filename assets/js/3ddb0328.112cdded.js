"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[8551],{30876:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=p(r),m=a,h=l["".concat(c,".").concat(m)]||l[m]||u[m]||o;return r?n.createElement(h,s(s({ref:t},d),{},{components:r})):n.createElement(h,s({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},30844:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7896),a=(r(2784),r(30876));const o={title:"User Schema"},s=void 0,i={unversionedId:"core-api/user-schema",id:"version-2.1.x/core-api/user-schema",title:"User Schema",description:"UniRep needs to persist data in order to construct state and make proofs. To do this we use a generic database wrapper called anondb. This wrapper has support for desktop environment databases like SQLite, as well as the IndexedDB browser database.",source:"@site/versioned_docs/version-2.1.x/core-api/user-schema.md",sourceDirName:"core-api",slug:"/core-api/user-schema",permalink:"/docs/core-api/user-schema",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.1.x/core-api/user-schema.md",tags:[],version:"2.1.x",frontMatter:{title:"User Schema"},sidebar:"apiSidebar",previous:{title:"schema",permalink:"/docs/core-api/schema"},next:{title:"Readme",permalink:"/docs/contracts-api/"}},c={},p=[{value:"UserState",id:"userstate",level:2}],d={toc:p},l="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(l,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"UniRep needs to persist data in order to construct state and make proofs. To do this we use a generic database wrapper called ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vimwitch/anondb"},"anondb"),". This wrapper has support for desktop environment databases like SQLite, as well as the IndexedDB browser database."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@unirep/core")," ships a schema that should be used with the database. The user schema extends from a synchronizer schema, which securely stores private user data, including personal information and the latest transitioned epoch."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { userSchema } from '@unirep/core'\nimport { SQLiteConnector } from 'anondb/node'\nimport { IndexedDBConnector } from 'anondb/web'\n\n{\n  // in nodejs\n  const db_mem = await SQLiteConnector.create(userSchema, ':memory:')\n  const db_storage = await SQLiteConnector.create(userSchema, 'db.sqlite')\n}\n{\n  // in browser\n  const db_browser = await IndexedDBConnector.create(userSchema)\n}\n")),(0,a.kt)("h2",{id:"userstate"},"UserState"),(0,a.kt)("p",null,"Used to store information about what user's data have been processed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  attesterId: string,\n  latestTransitionedEpoch: number\n  latestTransitionedIndex: number\n  data: Object\n}\n")),(0,a.kt)("p",null,"where the data object is parsed using the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const parsedData = JSON.parse(\n  `{${data.map((v, i) => `"${i}": "${v}"`).join(\',\')}}`\n)\n')),(0,a.kt)("p",null,"Then the data can then be retrieved with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"for (let i = 0; i < data.length; i++) {\n  data[i] = BigInt(savedData.data[`${i}`])\n}\n")))}u.isMDXComponent=!0}}]);