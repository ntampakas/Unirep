"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[8812],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=d(n),u=i,k=s["".concat(o,".").concat(u)]||s[u]||m[u]||a;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[s]="string"==typeof e?e:i,l[1]=p;for(var d=2;d<a;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},49647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var r=n(7896),i=(n(2784),n(30876));const a={id:"src.Prover",title:"Interface: Prover",sidebar_label:"Prover",custom_edit_url:null},l=void 0,p={unversionedId:"circuits-api/interfaces/src.Prover",id:"version-2.1.x/circuits-api/interfaces/src.Prover",title:"Interface: Prover",description:"src.Prover",source:"@site/versioned_docs/version-2.1.x/circuits-api/interfaces/src.Prover.md",sourceDirName:"circuits-api/interfaces",slug:"/circuits-api/interfaces/src.Prover",permalink:"/docs/circuits-api/interfaces/src.Prover",draft:!1,editUrl:null,tags:[],version:"2.1.x",frontMatter:{id:"src.Prover",title:"Interface: Prover",sidebar_label:"Prover",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"UserStateTransitionProof",permalink:"/docs/circuits-api/classes/src.UserStateTransitionProof"},next:{title:"Circom Circuits",permalink:"/docs/circuits-api/circuits"}},o={},d=[{value:"Properties",id:"properties",level:2},{value:"genProofAndPublicSignals",id:"genproofandpublicsignals",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in",level:4},{value:"getConfig",id:"getconfig",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-1",level:4},{value:"getVKey",id:"getvkey",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"verifyProof",id:"verifyproof",level:3},{value:"Type declaration",id:"type-declaration-3",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Returns",id:"returns-3",level:5},{value:"Defined in",id:"defined-in-3",level:4}],c={toc:d},s="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/circuits-api/modules/src"},"src"),".Prover"),(0,i.kt)("p",null,"The prover interface is used to write custom implementations for creating and verifying proofs.\nThis abstracts away the logic of loading the proving keys. For example, a prover implementation could load the keys from disk, from a remote url, etc."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/modules/provers_defaultProver"},(0,i.kt)("inlineCode",{parentName:"a"},"defaultProver"))," for a nodejs implementation. ",(0,i.kt)("br",null),"\nSee the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/docs/circuits-api/modules/provers_defaultProver"},(0,i.kt)("inlineCode",{parentName:"a"},"webProver"))," for a browser compatible implementation.")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"genproofandpublicsignals"},"genProofAndPublicSignals"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"genProofAndPublicSignals"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"circuitName"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),") => ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,i.kt)("inlineCode",{parentName:"p"},"proof"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"publicSignals"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,i.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"circuitName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,i.kt)("inlineCode",{parentName:"p"},"proof"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"publicSignals"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,i.kt)("p",null,"The function should return snark proof and snark public signals of given circuit and inputs"),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"circuitName")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name of the circuit, which can be chosen from ",(0,i.kt)("inlineCode",{parentName:"td"},"Circuit"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"inputs")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The user inputs of the circuit")))),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,i.kt)("inlineCode",{parentName:"p"},"proof"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," ; ",(0,i.kt)("inlineCode",{parentName:"p"},"publicSignals"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),"  }",">"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"proof")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"publicSignals")," that can be verified by ",(0,i.kt)("inlineCode",{parentName:"p"},"Prover.verifyProof")),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/type.ts#L95"},"circuits/src/type.ts:95")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getconfig"},"getConfig"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,i.kt)("strong",{parentName:"p"},"getConfig"),": () => ",(0,i.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.CircuitConfig"},(0,i.kt)("inlineCode",{parentName:"a"},"CircuitConfig"))),(0,i.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (): ",(0,i.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.CircuitConfig"},(0,i.kt)("inlineCode",{parentName:"a"},"CircuitConfig"))),(0,i.kt)("p",null,"Get the current circuit config"),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/circuits-api/classes/src.CircuitConfig"},(0,i.kt)("inlineCode",{parentName:"a"},"CircuitConfig"))),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/type.ts#L113"},"circuits/src/type.ts:113")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getvkey"},"getVKey"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"getVKey"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"circuitName"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),") => ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,i.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"circuitName"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,i.kt)("p",null,"Get vkey from default built folder ",(0,i.kt)("inlineCode",{parentName:"p"},"zksnarkBuild/")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"circuitName")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name of the circuit, which can be chosen from ",(0,i.kt)("inlineCode",{parentName:"td"},"Circuit"))))),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,i.kt)("p",null,"vkey of the circuit"),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/type.ts#L108"},"circuits/src/type.ts:108")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"verifyproof"},"verifyProof"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"verifyProof"),": (",(0,i.kt)("inlineCode",{parentName:"p"},"circuitName"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"publicSignals"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"proof"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),") => ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,i.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,i.kt)("p",null,"\u25b8 (",(0,i.kt)("inlineCode",{parentName:"p"},"circuitName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"publicSignals"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"proof"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,i.kt)("p",null,"The function returns true if the proof of the circuit is valid, false otherwise."),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"circuitName")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Name of the circuit, which can be chosen from ",(0,i.kt)("inlineCode",{parentName:"td"},"Circuit"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"publicSignals")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The public signals of the snark")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"proof")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"any")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The proof of the snark")))),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),">"),(0,i.kt)("p",null,"True if the proof is valid, false otherwise"),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/circuits/src/type.ts#L83"},"circuits/src/type.ts:83")))}m.isMDXComponent=!0}}]);