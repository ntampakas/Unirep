"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[1686],{30876:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,f=u["".concat(c,".").concat(h)]||u[h]||p[h]||l;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},12392:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7896),r=(n(2784),n(30876));const l={title:"Error codes"},i=void 0,o={unversionedId:"contracts-api/errors",id:"version-2.0.0-beta-4/contracts-api/errors",title:"Error codes",description:"This section contains a list of all possible errors that might occur while using",source:"@site/versioned_docs/version-2.0.0-beta-4/contracts-api/errors.md",sourceDirName:"contracts-api",slug:"/contracts-api/errors",permalink:"/docs/2.0.0-beta-4/contracts-api/errors",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/contracts-api/errors.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"Error codes"},sidebar:"apiSidebar",previous:{title:"UniRep contract helpers",permalink:"/docs/2.0.0-beta-4/contracts-api/helpers"},next:{title:"Installation",permalink:"/docs/2.0.0-beta-4/circuits-api/installation"}},c={},d=[{value:"0x099cfcff",id:"0x099cfcff",level:2},{value:"0x6767dda1",id:"0x6767dda1",level:2},{value:"0xd724105a",id:"0xd724105a",level:2},{value:"0xd7aa5847",id:"0xd7aa5847",level:2},{value:"0xa78d09b9",id:"0xa78d09b9",level:2},{value:"0xdc215c0a",id:"0xdc215c0a",level:2},{value:"0xedc650d7",id:"0xedc650d7",level:2},{value:"0x7db3aba7",id:"0x7db3aba7",level:2},{value:"0x7fa0b337",id:"0x7fa0b337",level:2},{value:"0x8baa579f",id:"0x8baa579f",level:2},{value:"0x2217bbbc",id:"0x2217bbbc",level:2},{value:"0x53d3ff53",id:"0x53d3ff53",level:2},{value:"0xa225656d",id:"0xa225656d",level:2},{value:"0x09bde339",id:"0x09bde339",level:2},{value:"0xd542f669",id:"0xd542f669",level:2}],s={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This section contains a list of all possible errors that might occur while using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sol"},"import { Unirep } from '@unirep/contracts/Unirep.sol';\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When developing with hardhat environment, these custom errors can be seen in the ",(0,r.kt)("inlineCode",{parentName:"p"},"_selector"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'Error: cannot estimate gas; transaction may fail or may require manual gas limit\n...,\n{"type":18,"address":{"type":"Buffer","data":[183,248,188,99,187,202,209,129,85,32,19,8,200,243,84,11,7,248,79,94]},"message":{"value":{"type":"Buffer","data":[103,103,221,161,0,0,0,0,0,0,0,0,0,0,0,0,165,28,31,194,240,209,161,184,73,78,209,254,49,45,124,58,120,237,145,192]},"_selector":"6767dda1"},"isInvalidOpcodeError":false}],"data":"0x6767dda1000000000000000000000000a51c1fc2f0d1a1b8494ed1fe312d7c3a78ed91c0"}, code=UNPREDICTABLE_GAS_LIMIT, version=providers/5.7.2)\n'))),(0,r.kt)("h2",{id:"0x099cfcff"},"0x099cfcff"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"UserAlreadySignedUp(uint256 identityCommitment)")," ",(0,r.kt)("br",null),"\nThe given identity commitment has already signed up in the current Unirep contract. ",(0,r.kt)("br",null),"\nA user cannot double sign-up in an application.")),(0,r.kt)("h2",{id:"0x6767dda1"},"0x6767dda1"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AttesterAlreadySignUp(uint160 attester)")," ",(0,r.kt)("br",null),"\nThe attester has already signed up in the current Unirep contract. ",(0,r.kt)("br",null),"\nAn attester cannot double sign-up in the Unirep protocol.")),(0,r.kt)("h2",{id:"0xd724105a"},"0xd724105a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AttesterNotSignUp(uint160 attester)"),(0,r.kt)("br",null),"\nThe attester has not signed up in the current Unirep contract. ",(0,r.kt)("br",null),"\nPlease call ",(0,r.kt)("a",{parentName:"li",href:"unirep-sol#attestersignup"},(0,r.kt)("inlineCode",{parentName:"a"},"attesterSignUp()")))),(0,r.kt)("h2",{id:"0xd7aa5847"},"0xd7aa5847"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AttesterInvalid()"),(0,r.kt)("br",null),"\nThe given attester address is not a valid ",(0,r.kt)("inlineCode",{parentName:"li"},"uint160")," type data. ",(0,r.kt)("br",null),"\nPlease check if the attester address is correctly assigned while generating proofs.")),(0,r.kt)("h2",{id:"0xa78d09b9"},"0xa78d09b9"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CallerInvalid()"),(0,r.kt)("br",null),"\nThe caller address is not the same as the attester address in a verifier helper contract. ",(0,r.kt)("br",null),"\nPlease verify the caller address.")),(0,r.kt)("h2",{id:"0xdc215c0a"},"0xdc215c0a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NullifierAlreadyUsed(uint256 nullilier)"),(0,r.kt)("br",null),"\nThe ",(0,r.kt)("a",{parentName:"li",href:"../protocol/nullifiers"},"nullifier")," is already used in Unirep contract. ",(0,r.kt)("br",null),"\nA nullifier cannot be submitted twice in the Unirep protocol.")),(0,r.kt)("h2",{id:"0xedc650d7"},"0xedc650d7"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AttesterIdNotMatch(uint160 attesterId)"),(0,r.kt)("br",null),"\nThe ",(0,r.kt)("inlineCode",{parentName:"li"},"msg.sender")," does not match the claimed attester ID. ",(0,r.kt)("br",null),"\nPlease send the transaction through the attester.")),(0,r.kt)("h2",{id:"0x7db3aba7"},"0x7db3aba7"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OutOfRange()"),(0,r.kt)("br",null),"\nA ",(0,r.kt)("a",{parentName:"li",href:"/docs/2.0.0-beta-4/protocol/data#replacement-field"},"replacement field data")," cannot be out of ",(0,r.kt)("inlineCode",{parentName:"li"},"SNARK_SCALAR_FIELD"),".",(0,r.kt)("br",null),"\nPlease use a value which is less than ",(0,r.kt)("inlineCode",{parentName:"li"},"SNARK_SCALAR_FIELD"),".")),(0,r.kt)("h2",{id:"0x7fa0b337"},"0x7fa0b337"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvalidField()"),(0,r.kt)("br",null),"\nAn attestation was made to a field that was either out of range, or not capable of receiving attestations.")),(0,r.kt)("h2",{id:"0x8baa579f"},"0x8baa579f"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvalidSignature()"),(0,r.kt)("br",null),"\nThe signature does not match the attester ID. ",(0,r.kt)("br",null),"\nPlease make sure the signature is signed through the correct attester.")),(0,r.kt)("h2",{id:"0x2217bbbc"},"0x2217bbbc"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvalidEpochKey()"),(0,r.kt)("br",null),"\nIf The epoch key is greater than ",(0,r.kt)("inlineCode",{parentName:"li"},"SNARK_SCALAR_FIELD")," is recognized invalid.")),(0,r.kt)("h2",{id:"0x53d3ff53"},"0x53d3ff53"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EpochNotMatch()")," ",(0,r.kt)("br",null),"\nCurrent ",(0,r.kt)("a",{parentName:"li",href:"/docs/2.0.0-beta-4/protocol/epoch"},"epoch")," does not match the epoch in the proof or the target epoch. ",(0,r.kt)("br",null),"\nPlease check the current epoch and generate a corresponding proof.")),(0,r.kt)("h2",{id:"0xa225656d"},"0xa225656d"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvalidEpoch(uint256 epoch)"),(0,r.kt)("br",null),"\nThe ",(0,r.kt)("a",{parentName:"li",href:"/docs/2.0.0-beta-4/protocol/epoch"},"epoch")," in the proof is greater than the current epoch. ",(0,r.kt)("br",null),"\nPlease check the current epoch and generate a corresponding proof.")),(0,r.kt)("h2",{id:"0x09bde339"},"0x09bde339"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvalidProof()"),(0,r.kt)("br",null),"\nThe proof is verified invalid through on-chain verifiers. ",(0,r.kt)("br",null),"\nPlease verify it with the off-chain ",(0,r.kt)("a",{parentName:"li",href:"/docs/2.0.0-beta-4/circuits-api/prover"},"prover"),". ",(0,r.kt)("br",null),"\nIf it is valid off-chain but invalid through on-chain verifiers, please check the if the proving keys match the ones on-chain.")),(0,r.kt)("h2",{id:"0xd542f669"},"0xd542f669"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InvalidHistoryTreeRoot(uint256 historyTreeRoot)"),(0,r.kt)("br",null),"\nThe ",(0,r.kt)("a",{parentName:"li",href:"/docs/2.0.0-beta-4/protocol/trees#history-tree"},"epoch tree")," root of given epoch does not match the current Unirep contract. ",(0,r.kt)("br",null),"\nPlease check if all attestations are processed correctly and successfully.")))}p.isMDXComponent=!0}}]);