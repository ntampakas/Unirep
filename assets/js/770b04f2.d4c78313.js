"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[5229],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(2784);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,m=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},27234:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(7896),o=(r(2784),r(30876));const a={title:"SignupProof"},i=void 0,p={unversionedId:"circuits-api/signup-proof",id:"version-2.0.0-beta-4/circuits-api/signup-proof",title:"SignupProof",description:"Inherits: BaseProof",source:"@site/versioned_docs/version-2.0.0-beta-4/circuits-api/signup-proof.md",sourceDirName:"circuits-api",slug:"/circuits-api/signup-proof",permalink:"/docs/2.0.0-beta-4/circuits-api/signup-proof",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/circuits-api/signup-proof.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"SignupProof"},sidebar:"apiSidebar",previous:{title:"EpochKeyLiteProof",permalink:"/docs/2.0.0-beta-4/circuits-api/epoch-key-lite-proof"},next:{title:"UserStateTransitionProof",permalink:"/docs/2.0.0-beta-4/circuits-api/user-state-transition-proof"}},s={},l=[{value:"identityCommitment",id:"identitycommitment",level:2},{value:"stateTreeLeaf",id:"statetreeleaf",level:2},{value:"epoch",id:"epoch",level:2},{value:"attesterId",id:"attesterid",level:2},{value:"control",id:"control",level:2}],c={toc:l},u="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Inherits: ",(0,o.kt)("a",{parentName:"p",href:"base-proof"},(0,o.kt)("inlineCode",{parentName:"a"},"BaseProof"))),(0,o.kt)("p",null,"A class representing a ",(0,o.kt)("a",{parentName:"p",href:"circuits#signup-proof"},"signup proof"),". Each of the following properties are public signals for the proof."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { SignupProof } from '@unirep/circuits'\n\nconst data = new SignupProof(publicSignals, proof)\n")),(0,o.kt)("h2",{id:"identitycommitment"},"identityCommitment"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://semaphore.appliedzkp.org/docs/glossary#identity-commitment"},"identity commitment")," for the user signing up."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"this.identityCommitment\n")),(0,o.kt)("h2",{id:"statetreeleaf"},"stateTreeLeaf"),(0,o.kt)("p",null,"The new state tree leaf for the user. This leaf will contain zero values for ",(0,o.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/protocol/data"},"data"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"this.stateTreeLeaf\n")),(0,o.kt)("h2",{id:"epoch"},"epoch"),(0,o.kt)("p",null,"The epoch the proof was made within."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"this.epoch\n")),(0,o.kt)("h2",{id:"attesterid"},"attesterId"),(0,o.kt)("p",null,"The attester id for the proof."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"this.attesterId\n")),(0,o.kt)("h2",{id:"control"},"control"),(0,o.kt)("p",null,"The control field used for the proof. This field contains many signals binary encoded into a single 256 bit value. This value is automatically decoded into the other properties on this class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"this.control\n")))}f.isMDXComponent=!0}}]);