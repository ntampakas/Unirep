"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[9212],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7896),i=(n(2784),n(30876));const a={id:"index",title:"@unirep/utils",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},o="UniRep utils package",s={unversionedId:"utils-api/index",id:"version-2.1.x/utils-api/index",title:"@unirep/utils",description:"Client library for utils functions which are used in UniRep protocol.",source:"@site/versioned_docs/version-2.1.x/utils-api/index.md",sourceDirName:"utils-api",slug:"/utils-api/",permalink:"/docs/utils-api/",draft:!1,editUrl:null,tags:[],version:"2.1.x",sidebarPosition:0,frontMatter:{id:"index",title:"@unirep/utils",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Circom Circuits",permalink:"/docs/circuits-api/circuits"},next:{title:"Exports",permalink:"/docs/utils-api/modules"}},l={},p=[{value:"\ud83d\udca1 About UniRep",id:"-about-unirep",level:2},{value:"\ud83d\udcd8 Documentation",id:"-documentation",level:2},{value:"\ud83d\udee0 Install",id:"-install",level:2},{value:"npm or yarn",id:"npm-or-yarn",level:3},{value:"\ud83d\udcd4 Usage",id:"-usage",level:2},{value:"IncrementalMerkleTree",id:"incrementalmerkletree",level:3},{value:"Crypto utils",id:"crypto-utils",level:3},{value:"\ud83d\ude4c\ud83c\udffb Join our community",id:"-join-our-community",level:2},{value:'<img height="24" src="https://pse.dev/_next/static/media/header-logo.16312102.svg" /> Privacy &amp; Scaling Explorations',id:"-privacy--scaling-explorations",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unirep-utils-package"},"UniRep utils package"),(0,i.kt)("p",null,"Client library for utils functions which are used in UniRep protocol."),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"https://github.com/unirep/unirep"},(0,i.kt)("img",{src:"https://img.shields.io/badge/project-unirep-blue.svg?style=flat-square"})),(0,i.kt)("a",{href:"https://github.com/unirep/unirep/blob/master/LICENSE"},(0,i.kt)("img",{alt:"Github license",src:"https://img.shields.io/github/license/unirep/unirep.svg?style=flat-square"})),(0,i.kt)("a",{href:"https://www.npmjs.com/package/@unirep/utils"},(0,i.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/utils?style=flat-square"})),(0,i.kt)("a",{href:"https://npmjs.org/package/@unirep/utils"},(0,i.kt)("img",{alt:"Downloads",src:"https://img.shields.io/npm/dm/@unirep/utils.svg?style=flat-square"})),(0,i.kt)("a",{href:"https://eslint.org/"},(0,i.kt)("img",{alt:"Linter eslint",src:"https://img.shields.io/badge/linter-eslint-8080f2?style=flat-square&logo=eslint"})),(0,i.kt)("a",{href:"https://prettier.io/"},(0,i.kt)("img",{alt:"Code style prettier",src:"https://img.shields.io/badge/code%20style-prettier-f8bc45?style=flat-square&logo=prettier"}))),(0,i.kt)("div",{align:"center"},(0,i.kt)("h4",null,(0,i.kt)("a",{href:"https://discord.gg/VzMMDJmYc5"},"\ud83e\udd16 Chat & Support"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"-about-unirep"},"\ud83d\udca1 About UniRep"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UniRep")," is a ",(0,i.kt)("em",{parentName:"p"},"private")," and ",(0,i.kt)("em",{parentName:"p"},"non-repudiable")," ",(0,i.kt)("strong",{parentName:"p"},"data system"),". Users can receive attestations from attesters, and voluntarily prove facts about their data without revealing the data itself. Moreover, users cannot refuse to receive attestations from an attester."),(0,i.kt)("h2",{id:"-documentation"},"\ud83d\udcd8 Documentation"),(0,i.kt)("p",null,"Read the ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/privacy-scaling-explorations/unirep-a-private-and-non-repudiable-reputation-system-7fb5c6478549"},"medium article")," to know more about the concept of UniRep protocol.\nFor more information, refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/"},"documentation")),(0,i.kt)("h2",{id:"-install"},"\ud83d\udee0 Install"),(0,i.kt)("h3",{id:"npm-or-yarn"},"npm or yarn"),(0,i.kt)("p",null,"Install the ",(0,i.kt)("inlineCode",{parentName:"p"},"@unirep/utils")," package with npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @unirep/utils\n")),(0,i.kt)("p",null,"or yarn:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @unirep/utils\n")),(0,i.kt)("h2",{id:"-usage"},"\ud83d\udcd4 Usage"),(0,i.kt)("h3",{id:"incrementalmerkletree"},"IncrementalMerkleTree"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Create a IncrementalMerkleTree")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IncrementalMerkleTree } from '@unirep/utils'\n\nconst depth = 4\n// initialize incremental merkle tree with depth 4\nconst tree = new IncrementalMerkleTree(depth)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Get tree root")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const root = tree.root\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Insert leaf")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const leaf = 1\ntree.insert(leaf)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Generate merkle proof")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const index = 0\nconst proof = tree.createProof(index)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Verify merkle proof")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = tree.verifyProof(proof)\n")),(0,i.kt)("h3",{id:"crypto-utils"},"Crypto utils"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"genRandomSalt")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { genRandomSalt } from '@unirep/utils'\n\n// generate random bigint\nconst salt = genRandomSalt()\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"genEpochKey")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Identity } from '@semaphore-protocol/identity'\nimport { genEpochKey } from '@unirep/utils'\n\nconst id = new Identity()\nconst attesterId = '0x1234'\nconst epoch = 0\nconst nonce = 0\nconst chainId = 1\nconst epochKey = genEpochKey(\n    id.secret,\n    attesterId,\n    epoch,\n    nonce,\n    chainId\n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"genIdentityHash")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Identity } from '@semaphore-protocol/identity'\nimport { genIdentityHash } from '@unirep/utils'\n\nconst id = new Identity()\nconst attesterId = '0x1234'\nconst epoch = 0\nconst chainId = 1\nconst idHash = genIdentityHash(\n    id.secret,\n    attesterId,\n    epoch,\n    chainId\n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"genStateTreeLeaf")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Identity } from '@semaphore-protocol/identity'\nimport { genStateTreeLeaf } from '@unirep/utils'\n\nconst id = new Identity()\nconst attesterId = '0x1234'\nconst epoch = 0\nconst FIELD_COUNT = 6\nconst data = Array(FIELD_COUNT).fill(0)\nconst chainId = 1\nconst leaf = genStateTreeLeaf(\n    id.secret,\n    attesterId,\n    epoch,\n    data,\n    chainId\n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"genEpochTreeLeaf")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { genEpochTreeLeaf } from '@unirep/utils'\n\nconst epochKey = '0x3456'\nconst FIELD_COUNT = 6\nconst data = Array(FIELD_COUNT).fill(0)\nconst leaf = genEpochTreeLeaf(\n    epochKey,\n    data\n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"stringifyBigInts/unstringifyBigInts")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { stringifyBigInts, unstringifyBigInts } from '@unirep/utils'\n\nconst values = {\n    input1: genRandomSalt(),\n    input2: genRandomSalt(),\n    input3: genRandomSalt(),\n}\n// stringify bigint elements with stringifyBigInts function\nconst stringifiedValues = stringifyBigInts(values)\n// it can be recoverd by unstringifyBigInts function\nconst unstringifiedValues = unstringifyBigInts(stringifiedValues)\n")),(0,i.kt)("h2",{id:"-join-our-community"},"\ud83d\ude4c\ud83c\udffb Join our community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Discord server: ",(0,i.kt)("a",{href:"https://discord.gg/VzMMDJmYc5"},(0,i.kt)("img",{src:"https://img.shields.io/discord/931582072152281188?label=Discord&style=flat-square&logo=discord"}))),(0,i.kt)("li",{parentName:"ul"},"Twitter account: ",(0,i.kt)("a",{href:"https://twitter.com/UniRep_Protocol"},(0,i.kt)("img",{src:"https://img.shields.io/twitter/follow/UniRep_Protocol?style=flat-square&logo=twitter"}))),(0,i.kt)("li",{parentName:"ul"},"Telegram group: ",(0,i.kt)("a",{href:"https://t.me/unirep"},(0,i.kt)("img",{src:"https://img.shields.io/badge/telegram-@unirep-blue.svg?style=flat-square&logo=telegram"})))),(0,i.kt)("h2",{id:"-privacy--scaling-explorations"},(0,i.kt)("img",{height:"24",src:"https://pse.dev/_next/static/media/header-logo.16312102.svg"})," Privacy & Scaling Explorations"),(0,i.kt)("p",null,"This project is supported by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/privacy-scaling-explorations"},"Privacy & Scaling Explorations")," and the Ethereum Foundation.\nSee more projects on: ",(0,i.kt)("a",{parentName:"p",href:"https://pse.dev/"},"https://pse.dev/"),"."))}m.isMDXComponent=!0}}]);