"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[1645],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},62103:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(7896),a=(r(2784),r(30876));const o={id:"index",title:"@unirep/core",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},i="Unirep protocol package",s={unversionedId:"core-api/index",id:"version-2.1.x/core-api/index",title:"@unirep/core",description:"Client library for protocol related functions which are used in UniRep protocol.",source:"@site/versioned_docs/version-2.1.x/core-api/index.md",sourceDirName:"core-api",slug:"/core-api/",permalink:"/docs/core-api/",draft:!1,editUrl:null,tags:[],version:"2.1.x",sidebarPosition:0,frontMatter:{id:"index",title:"@unirep/core",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Subgraph",permalink:"/docs/subgraph"},next:{title:"Exports",permalink:"/docs/core-api/modules"}},p={},l=[{value:"\ud83d\udca1 About Unirep",id:"-about-unirep",level:2},{value:"\ud83d\udcd8 Documentation",id:"-documentation",level:2},{value:"\ud83d\udee0 Install",id:"-install",level:2},{value:"npm or yarn",id:"npm-or-yarn",level:3},{value:"\ud83d\udcd4 Usage",id:"-usage",level:2},{value:"Synchronizer \u23f2",id:"synchronizer-",level:3},{value:"UserState \ud83d\udc64",id:"userstate-",level:3},{value:"Schema \ud83d\udcc1",id:"schema-",level:3},{value:"\ud83d\ude4c\ud83c\udffb Join our community",id:"-join-our-community",level:2},{value:'<img height="24" src="https://pse.dev/_next/static/media/header-logo.16312102.svg" /> Privacy &amp; Scaling Explorations',id:"-privacy--scaling-explorations",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unirep-protocol-package"},"Unirep protocol package"),(0,a.kt)("p",null,"Client library for protocol related functions which are used in UniRep protocol."),(0,a.kt)("p",{align:"center"},(0,a.kt)("a",{href:"https://github.com/unirep/unirep"},(0,a.kt)("img",{src:"https://img.shields.io/badge/project-unirep-blue.svg?style=flat-square"})),(0,a.kt)("a",{href:"https://github.com/unirep/unirep/blob/master/LICENSE"},(0,a.kt)("img",{alt:"Github license",src:"https://img.shields.io/github/license/unirep/unirep.svg?style=flat-square"})),(0,a.kt)("a",{href:"https://www.npmjs.com/package/@unirep/core"},(0,a.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/core?style=flat-square"})),(0,a.kt)("a",{href:"https://npmjs.org/package/@unirep/core"},(0,a.kt)("img",{alt:"Downloads",src:"https://img.shields.io/npm/dm/@unirep/core.svg?style=flat-square"})),(0,a.kt)("a",{href:"https://eslint.org/"},(0,a.kt)("img",{alt:"Linter eslint",src:"https://img.shields.io/badge/linter-eslint-8080f2?style=flat-square&logo=eslint"})),(0,a.kt)("a",{href:"https://prettier.io/"},(0,a.kt)("img",{alt:"Code style prettier",src:"https://img.shields.io/badge/code%20style-prettier-f8bc45?style=flat-square&logo=prettier"}))),(0,a.kt)("div",{align:"center"},(0,a.kt)("h4",null,(0,a.kt)("a",{href:"https://discord.gg/VzMMDJmYc5"},"\ud83e\udd16 Chat & Support"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"-about-unirep"},"\ud83d\udca1 About Unirep"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"UniRep")," is a ",(0,a.kt)("em",{parentName:"p"},"private")," and ",(0,a.kt)("em",{parentName:"p"},"non-repudiable")," ",(0,a.kt)("strong",{parentName:"p"},"data system"),". Users can receive attestations from attesters, and voluntarily prove facts about their data without revealing the data itself. Moreover, users cannot refuse to receive attestations from an attester."),(0,a.kt)("h2",{id:"-documentation"},"\ud83d\udcd8 Documentation"),(0,a.kt)("p",null,"Read the ",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/privacy-scaling-explorations/unirep-a-private-and-non-repudiable-reputation-system-7fb5c6478549"},"medium article")," to know more about the concept of Unirep protocol.\nFor more information, refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.unirep.io/"},"documentation")),(0,a.kt)("h2",{id:"-install"},"\ud83d\udee0 Install"),(0,a.kt)("h3",{id:"npm-or-yarn"},"npm or yarn"),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"@unirep/core")," package with npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @unirep/core\n")),(0,a.kt)("p",null,"or yarn:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @unirep/core\n")),(0,a.kt)("h2",{id:"-usage"},"\ud83d\udcd4 Usage"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Check current deployment: ",(0,a.kt)("a",{parentName:"strong",href:"https://developer.unirep.io/docs/testnet-deployment"},"\ud83e\udd1d Testnet Deployment"))),(0,a.kt)("h3",{id:"synchronizer-"},"Synchronizer \u23f2"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Construct a synchronizer")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Synchronizer } from '@unirep/core'\n\nconst address = '0x....'\nconst provider = 'YOUR/ETH/PROVIDER'\n\n// 1. initialize a synchronizer\nconst synchronizer = new Synchronizer({\n    unirepAddress: address,\n    provider: provider,\n})\n// 2. start listening to unriep contract events\nawait synchronizer.start()\n// 3. wait until the latest block is processed\nawait synchronizer.waitForSync()\n// 4. stop the synchronizer deamon\nsynchronizer.stop()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example: use the synchronizer to generate unirep state")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const epoch = 0\nconst attesterId = 'ATTESTER/ADDRESS' // the msg.sender signs up through `attesterSignUp()`\n// e.g.\n// const attester = new ethers.Wallet(key, provider)\n// const epochLength = 300\n// const tx = await unirepContract.connect(attester).attesterSignUp(epochLength)\n// await tx.wait()\nconst stateTree = await synchronizer.genStateTree(epoch, attesterId)\n")),(0,a.kt)("h3",{id:"userstate-"},"UserState \ud83d\udc64"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Construct a user state")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Identity } from '@semaphore-protocol/identity'\nimport { UserState } from '@unirep/core'\nimport { defaultProver } from '@unirep/circuits/provers/defaultProver'\n\n// random generate a user identity\nconst identity = new Identity()\nconst provider = 'YOUR/ETH/PROVIDER'\nconst attesterId = 'ATTESTER/ADDRESS' // the msg.sender signs up through `attesterSignUp()`\n\n// 1. initialize a user state object\nconst userState = new UserState({\n    unirepAddress: address,\n    provider: provider,\n    prover: defaultProver,\n    id: identity,\n    attesterId: attesterId,\n})\n// or through a synchronicr\n// const userState = new UserState({synchronizer, id: identity})\n// 2. start listening to unriep contract events\nawait userState.start()\n// 3. wait until the latest block is processed\nawait userState.waitForSync()\n// 4. stop the synchronizer deamon\nuserState.stop()\n")),(0,a.kt)("h3",{id:"schema-"},"Schema \ud83d\udcc1"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate a database with the schema")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { schema } from '@unirep/core'\nimport { SQLiteConnector } from 'anondb/node'\nimport { IndexedDBConnector } from 'anondb/web'\n\n// in nodejs\nconst db_mem = await SQLiteConnector.create(schema, ':memory:')\nconst db_storage = await SQLiteConnector.create(schema, 'db.sqlite')\n// in browser\nconst db_browser = await IndexedDBConnector.create(schema)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Use the database in a synchronizer")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const synchronizer = new Synchronizer({\n    unirepAddress: address,\n    provider: provider,\n    db: db_storage\n})\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example: use the user state to generate proofs")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// 1. generate a signup proof of the user\nconst { publicSignals, proof } = await userState.genUserSignUpProof({ attesterId: attester.address })\n\n// 2. submit the signup proof through the attester\nconst tx = await unirepContract\n    .connect(attester)\n    .userSignUp(publicSignals, proof)\nawait tx.wait()\n")),(0,a.kt)("h2",{id:"-join-our-community"},"\ud83d\ude4c\ud83c\udffb Join our community"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Discord server: ",(0,a.kt)("a",{href:"https://discord.gg/VzMMDJmYc5"},(0,a.kt)("img",{src:"https://img.shields.io/discord/931582072152281188?label=Discord&style=flat-square&logo=discord"}))),(0,a.kt)("li",{parentName:"ul"},"Twitter account: ",(0,a.kt)("a",{href:"https://twitter.com/UniRep_Protocol"},(0,a.kt)("img",{src:"https://img.shields.io/twitter/follow/UniRep_Protocol?style=flat-square&logo=twitter"}))),(0,a.kt)("li",{parentName:"ul"},"Telegram group: ",(0,a.kt)("a",{href:"https://t.me/unirep"},(0,a.kt)("img",{src:"https://img.shields.io/badge/telegram-@unirep-blue.svg?style=flat-square&logo=telegram"})))),(0,a.kt)("h2",{id:"-privacy--scaling-explorations"},(0,a.kt)("img",{height:"24",src:"https://pse.dev/_next/static/media/header-logo.16312102.svg"})," Privacy & Scaling Explorations"),(0,a.kt)("p",null,"This project is supported by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/privacy-scaling-explorations"},"Privacy & Scaling Explorations")," and the Ethereum Foundation.\nSee more projects on: ",(0,a.kt)("a",{parentName:"p",href:"https://pse.dev/"},"https://pse.dev/"),"."))}d.isMDXComponent=!0}}]);