"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[2973],{30876:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(r),y=a,f=d["".concat(s,".").concat(y)]||d[y]||u[y]||o;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},51683:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=r(7896),a=(r(2784),r(30876));const o={},i="4. Epoch key proof",p={unversionedId:"getting-started/start-with-typescript/epoch-key-proof",id:"version-1.0.1/getting-started/start-with-typescript/epoch-key-proof",title:"4. Epoch key proof",description:"Before generating an epoch key proof, we should generate a current user state to know the current global state trees and the attestation histories.",source:"@site/versioned_docs/version-1.0.1/getting-started/start-with-typescript/4.-epoch-key-proof.md",sourceDirName:"getting-started/start-with-typescript",slug:"/getting-started/start-with-typescript/epoch-key-proof",permalink:"/docs/1.0.1/getting-started/start-with-typescript/epoch-key-proof",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/getting-started/start-with-typescript/4.-epoch-key-proof.md",tags:[],version:"1.0.1",sidebarPosition:4,frontMatter:{},sidebar:"apiSidebar",previous:{title:"3. Attester signs up",permalink:"/docs/1.0.1/getting-started/start-with-typescript/attester-signs-up"},next:{title:"5. Attest",permalink:"/docs/1.0.1/getting-started/start-with-typescript/attest"}},s={},c=[{value:"DB",id:"db",level:3},{value:"Prover",id:"prover",level:3},{value:"Identity",id:"identity",level:3},{value:"Generate current user state",id:"generate-current-user-state",level:3},{value:"Generate epoch key proof",id:"generate-epoch-key-proof",level:3},{value:"Verify epoch key proof ",id:"verify-epoch-key-proof-",level:3},{value:"Verify UniRep state",id:"verify-unirep-state",level:3}],l={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"4-epoch-key-proof"},"4. Epoch key proof"),(0,a.kt)("p",null,"Before generating an epoch key proof, we should generate a current user state to know the current ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/trees#global-state-tree"},"global state tree"),"s and the attestation histories."),(0,a.kt)("h3",{id:"db"},"DB"),(0,a.kt)("p",null,"We should initialize a storage to save the state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { DB, SQLiteConnector } from 'anondb/node'\nimport { schema } from '@unirep/core'\n\n// construct a memory db\nconst db = await SQLiteConnector.create(schema, ':memory:')\n// or construct a SQLite db\n// const db = await SQLiteConnector.create(schema, 'test.sqlite')\n")),(0,a.kt)("h3",{id:"prover"},"Prover"),(0,a.kt)("p",null,"Also we have to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/v1.0.1/packages/circuits/provers/defaultProver.ts"},"initialize a prover")," to generate proofs and verify proofs. Or a ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultProver")," can be used in the ",(0,a.kt)("inlineCode",{parentName:"p"},"@unirep/circuits")," package."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defaultProver as prover } from '@unirep/circuits/provers/defaultProver'\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"See: ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/package/circuits"},"@unirep/circuits"))),(0,a.kt)("h3",{id:"identity"},"Identity"),(0,a.kt)("p",null,"Also, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ZkIdentity")," can be unserialized with a serialized identity, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ZkIdentity, Strategy } from \'@unirep/crypto\'\n\nconst identity = new ZkIdentity(\n    Strategy.SERIALIZED, \n    `{"identityNullifier":"27d1ae5c98aab64b851a9c668a7eec0d835867a17d4b9454a8bf9824836271d6","identityTrapdoor":"2596ecc2a1e1f6a8f279e097464e6edc3b18b946d934398dfe52a34c4e414e67","secret":["27d1ae5c98aab64b851a9c668a7eec0d835867a17d4b9454a8bf9824836271d6","2596ecc2a1e1f6a8f279e097464e6edc3b18b946d934398dfe52a34c4e414e67"]}`\n)\n')),(0,a.kt)("h3",{id:"generate-current-user-state"},"Generate current user state"),(0,a.kt)("p",null,"And then we can use a ",(0,a.kt)("inlineCode",{parentName:"p"},"genUserState")," to perform synchronization."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { UserState } from '@unirep/core'\n\nconst genUserState = async (\n    provider: ethers.providers.Provider,\n    address: string,\n    identity: ZkIdentity,\n    db: DB\n) => {\n    const contract = getUnirepContract(address, provider)\n    const userState = new UserState(\n        db,\n        prover,\n        contract,\n        identity\n    )\n    await userState.start()\n    await userState.waitForSync()\n    return userState\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const userState = await genUserState(\n    provider,\n    UNIREP_CONTRACT_ADDRESS,\n    identity,\n    db\n)\n")),(0,a.kt)("h3",{id:"generate-epoch-key-proof"},"Generate epoch key proof"),(0,a.kt)("p",null,"Use the user state to generate epoch key proof."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// genearte epoch key proof\nconst epochKeyNonce = 0\nconst proof = await userState.genVerifyEpochKeyProof(epochKeyNonce)\n")),(0,a.kt)("h3",{id:"verify-epoch-key-proof-"},"Verify epoch key proof"," "),(0,a.kt)("p",null,"Verify the proof with UniRep smart contract"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = await contract.verifyEpochKeyValidity(\n    proof.publicSignals,\n    proof.proof\n)\nconsole.log(isValid)\n")),(0,a.kt)("p",null,"Verify the proof with local prover"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = await proof.verify()\nconsole.log(isValid)\n")),(0,a.kt)("h3",{id:"verify-unirep-state"},"Verify UniRep state"),(0,a.kt)("p",null,"Check if the global state tree exists in the current UniRep state."),(0,a.kt)("p",null,"It can be verified by either a ",(0,a.kt)("inlineCode",{parentName:"p"},"Synchronizer")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"UserState")," object. But the ",(0,a.kt)("inlineCode",{parentName:"p"},"Synchronizer")," doesn't take ",(0,a.kt)("inlineCode",{parentName:"p"},"ZkIdentity")," as an input. For example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Synchronizer } from '@unirep/core'\n\nconst genUnirepState = async (\n    provider: ethers.providers.Provider,\n    address: string,\n    db: DB\n) => {\n    const contract = getUnirepContract(address, provider)\n    const unirepState = new Synchronizer(\n        db,\n        prover,\n        contract,\n    )\n    await unirepState.start()\n    await unirepState.waitForSync()\n    return unirepState\n}\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const unirepState = await genUnirepState(\n    provider,\n    UNIREP_CONTRACT_ADDRESS,\n    db\n)\n")),(0,a.kt)("p",null,"Then we can use the identity-free object to verify the global state tree root."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const isGSTRootExisted = await unirepState.GSTRootExists(\n    proof.globalStateTree as string,\n    proof.epoch as number\n)\nconsole.log(isGSTRootExisted) // false then the proof will be invalid\n")))}u.isMDXComponent=!0}}]);