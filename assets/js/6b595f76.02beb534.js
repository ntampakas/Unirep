"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[197],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,d=c["".concat(l,".").concat(h)]||c[h]||m[h]||i;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7896),r=(n(2784),n(30876));const i={description:"The tree structures that are used in UniRep protocol."},o="Trees",s={unversionedId:"protocol/glossary/trees",id:"version-1.0.1/protocol/glossary/trees",title:"Trees",description:"The tree structures that are used in UniRep protocol.",source:"@site/versioned_docs/version-1.0.1/protocol/glossary/trees.md",sourceDirName:"protocol/glossary",slug:"/protocol/glossary/trees",permalink:"/docs/1.0.1/protocol/glossary/trees",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/protocol/glossary/trees.md",tags:[],version:"1.0.1",frontMatter:{description:"The tree structures that are used in UniRep protocol."},sidebar:"apiSidebar",previous:{title:"Reputation",permalink:"/docs/1.0.1/protocol/glossary/reputation"},next:{title:"User State Transition",permalink:"/docs/1.0.1/protocol/glossary/user-state-transition"}},l={},p=[{value:"<strong>User state tree</strong>",id:"user-state-tree",level:2},{value:"<strong>Global state tree</strong>",id:"global-state-tree",level:2},{value:"<strong>Epoch tree</strong>",id:"epoch-tree",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"trees"},"Trees"),(0,r.kt)("h2",{id:"user-state-tree"},(0,r.kt)("strong",{parentName:"h2"},"User state tree")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A user state tree is a ",(0,r.kt)("strong",{parentName:"li"},"sparse merkle tree")," with it's leaves storing reputation received from each attester, e.g.,",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a user state tree leaf = hash of the reputation")))),(0,r.kt)("img",{src:"/img/v1/user-state-tree.png",alt:"An example of user state tree with only reputation from attester 3."}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hash of the reputation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const hashReputation = hash(posRep, negRep, graffiti, signUp)\n")),(0,r.kt)("p",null,"where"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"posRep")," is the positive reputation given by the attester"," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"negRep")," is the negative reputation given by the attester"," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"graffiti")," is the message given by the attester"," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signUp")," indicates if the attester authenticates the user")),(0,r.kt)("p",null,"If there is no reputation from attester, then the leaf stores a default reputation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const defaultReputation = hash(0,0,0,0)\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The index ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is reserved to have no reputation (default reputation) since the attester ID starts from index ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),".")),(0,r.kt)("h2",{id:"global-state-tree"},(0,r.kt)("strong",{parentName:"h2"},"Global state tree")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A global state tree stores the updated user state after a user signs up and a user performs the ",(0,r.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/user-state-transition"},"user state transition"),"."),(0,r.kt)("li",{parentName:"ul"},"It is an ",(0,r.kt)("strong",{parentName:"li"},"incremental merkle tree")," with it's leaves storing users' ",(0,r.kt)("inlineCode",{parentName:"li"},"identityCommitment"),"s and ",(0,r.kt)("inlineCode",{parentName:"li"},"userStateRoot"),"s, e.g.,",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a global state tree leaf: ",(0,r.kt)("inlineCode",{parentName:"li"},"hash(identityCommitment, userStateTreeRoot)")),(0,r.kt)("li",{parentName:"ul"},"The default leaf is ",(0,r.kt)("inlineCode",{parentName:"li"},"0"))))),(0,r.kt)("img",{src:"/img/v1/global-state-tree.png",alt:"An example of global state tree"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"NOTE:")," this is an incremental merkle tree so leaves are inserted from left (leaf index 0) to right, one by one, instead of inserted directly into the specified leaf index."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"NOTE:")," since global state tree leaf is the hash of ",(0,r.kt)("inlineCode",{parentName:"p"},"identityCommitment")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"userStateRoot"),", others will be not be able to tell which user (his ",(0,r.kt)("inlineCode",{parentName:"p"},"identityCommitment"),") inserted his user state into global state tree.")),(0,r.kt)("h2",{id:"epoch-tree"},(0,r.kt)("strong",{parentName:"h2"},"Epoch tree")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An epoch tree is used to ",(0,r.kt)("strong",{parentName:"li"},"prevent users from omitting any attestation")," attesting to the user. If the user skip one attestation, the hash chain and the output epoch tree root will be different from others."),(0,r.kt)("li",{parentName:"ul"},"An epoch tree is a ",(0,r.kt)("strong",{parentName:"li"},"sparse merkle tree")," with it's leaves storing hashchain results of each epoch key, e.g.,",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"leaf index: epoch key"),(0,r.kt)("li",{parentName:"ul"},"leaf value: sealed hash chain",(0,r.kt)("br",null),"\nThe sealed hash chain is computed by")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const hashChainResult = hash(attestation_3, hash(attestation_2, hash(attestation_1, 0)))\nconst sealedHashChain = hash(1, hashChainResult)\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The hash chain is ",(0,r.kt)("strong",{parentName:"p"},"sealed")," because it prevents epoch keys from receiving attestations anymore.",(0,r.kt)("br",null),"\nSee: ",(0,r.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/epoch-transition"},"Epoch Transition"))),(0,r.kt)("img",{src:"/img/v1/epoch-tree.png",alt:"An example of epoch tree with epoch key 1 and epoch key 3 has non-zero attestations."}),(0,r.kt)("p",null,"An attestation includes the following data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Attestation {\n  // The attester\u2019s ID\n  uint256 attesterId;\n  // Positive reputation\n  uint256 posRep;\n  // Negative reputation\n  uint256 negRep;\n  // A hash of an arbitary string\n  uint256 graffiti;\n  // A flag to indicate if user has signed up in this leaf\n  uint256 signUp;\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"A reputation includes the following data: ",(0,r.kt)("inlineCode",{parentName:"p"},"posRep, negRep, graffiti, signUp"),".",(0,r.kt)("br",null),"\nIt does not include ",(0,r.kt)("inlineCode",{parentName:"p"},"attesterId")," like an attestation does because reputation is already stored in user state tree with ",(0,r.kt)("inlineCode",{parentName:"p"},"attesterId")," as leaf index",(0,r.kt)("br",null),"\nSee: ",(0,r.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/glossary/reputation"},"Reputation"))))}m.isMDXComponent=!0}}]);