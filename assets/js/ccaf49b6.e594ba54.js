"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[1121],{30876:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},14825:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=r(7896),a=(r(2784),r(30876));const l={title:"Incremental Merkle Tree"},o=void 0,i={unversionedId:"utils-api/incremental-tree",id:"version-2.0.0-beta-4/utils-api/incremental-tree",title:"Incremental Merkle Tree",description:"The tree extends from @zk-kit/incremental-merkle-tree",source:"@site/versioned_docs/version-2.0.0-beta-4/utils-api/incremental-tree.md",sourceDirName:"utils-api",slug:"/utils-api/incremental-tree",permalink:"/docs/2.0.0-beta-4/utils-api/incremental-tree",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/utils-api/incremental-tree.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"Incremental Merkle Tree"},sidebar:"apiSidebar",previous:{title:"Snark types",permalink:"/docs/2.0.0-beta-4/utils-api/types"},next:{title:"Helpers",permalink:"/docs/2.0.0-beta-4/utils-api/helpers"}},p={},c=[{value:"constructor",id:"constructor",level:2},{value:"Node",id:"node",level:2},{value:"insert",id:"insert",level:2},{value:"update",id:"update",level:2},{value:"delete",id:"delete",level:2},{value:"indexOf",id:"indexof",level:2},{value:"MerkleProof",id:"merkleproof",level:2},{value:"createProof",id:"createproof",level:2},{value:"verifyProof",id:"verifyproof",level:2}],s={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The tree extends from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/privacy-scaling-explorations/zk-kit/tree/main/packages/incremental-merkle-tree"},"@zk-kit/incremental-merkle-tree"),(0,a.kt)("br",null))),(0,a.kt)("p",null,"Import this class like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { IncrementalMerkleTree } from '@unirep/utils'\n\nconst tree = new IncrementalMerkleTree(32)\n")),(0,a.kt)("h2",{id:"constructor"},"constructor"),(0,a.kt)("p",null,"Get a new tree instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"constructor(\n  depth: number,\n  zeroValue: Node = 0,\n  arity: number = 2\n): IncrementalMerkleTree\n")),(0,a.kt)("h2",{id:"node"},"Node"),(0,a.kt)("p",null,"The type of each leaf."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type Node = any\n")),(0,a.kt)("h2",{id:"insert"},"insert"),(0,a.kt)("p",null,"Insert a new leaf in the next free index."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"tree.insert(leaf: Node)\n")),(0,a.kt)("h2",{id:"update"},"update"),(0,a.kt)("p",null,"Update a leaf in the tree by index."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"tree.update(index: number, leaf: Node)\n")),(0,a.kt)("h2",{id:"delete"},"delete"),(0,a.kt)("p",null,"Delete (set to zero value) a leaf in the tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"tree.delete(index: number)\n")),(0,a.kt)("h2",{id:"indexof"},"indexOf"),(0,a.kt)("p",null,"Get the index of given node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"tree.indexOf(leaf: Node)\n")),(0,a.kt)("h2",{id:"merkleproof"},"MerkleProof"),(0,a.kt)("p",null,"A struct for representing merkle proofs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type MerkleProof = {\n  root: any\n  leaf: any\n  siblings: any[]\n  pathIndices: number[]\n}\n")),(0,a.kt)("h2",{id:"createproof"},"createProof"),(0,a.kt)("p",null,"Get a merkle inclusion proof for an index."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"tree.createProof(index: number): MerkleProof\n")),(0,a.kt)("h2",{id:"verifyproof"},"verifyProof"),(0,a.kt)("p",null,"Verify a merkle proof in the tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"tree.verifyProof(proof: MerkleProof): boolean\n")))}d.isMDXComponent=!0}}]);