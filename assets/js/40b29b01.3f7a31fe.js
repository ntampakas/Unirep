"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[5721],{30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,m=c["".concat(o,".").concat(d)]||c[d]||g[d]||a;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[c]="string"==typeof e?e:i,l[1]=p;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(7896),i=(n(2784),n(30876));const a={title:"Helpers"},l=void 0,p={unversionedId:"utils-api/helpers",id:"version-2.0.0-beta-4/utils-api/helpers",title:"Helpers",description:"SNARKSCALARFIELD",source:"@site/versioned_docs/version-2.0.0-beta-4/utils-api/helpers.md",sourceDirName:"utils-api",slug:"/utils-api/helpers",permalink:"/docs/2.0.0-beta-4/utils-api/helpers",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/utils-api/helpers.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"Helpers"},sidebar:"apiSidebar",previous:{title:"Incremental Merkle Tree",permalink:"/docs/2.0.0-beta-4/utils-api/incremental-tree"}},o={},s=[{value:"SNARK_SCALAR_FIELD",id:"snark_scalar_field",level:2},{value:"F",id:"f",level:2},{value:"MAX_EPOCH",id:"max_epoch",level:2},{value:"genEpochKey",id:"genepochkey",level:2},{value:"genIdentityHash",id:"genidentityhash",level:2},{value:"genStateTreeLeaf",id:"genstatetreeleaf",level:2},{value:"genEpochTreeLeaf",id:"genepochtreeleaf",level:2},{value:"stringifyBigInts",id:"stringifybigints",level:2},{value:"unstringifyBigInts",id:"unstringifybigints",level:2}],u={toc:s},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"snark_scalar_field"},"SNARK_SCALAR_FIELD"),(0,i.kt)("p",null,"A decimal string representing the field prime."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { SNARK_SCALAR_FIELD } from '@unirep/utils'\n")),(0,i.kt)("h2",{id:"f"},"F"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint")," representation of the field prime."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { F } from '@unirep/utils'\n")),(0,i.kt)("h2",{id:"max_epoch"},"MAX_EPOCH"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," representation of the maximum epoch value. Equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"2**48-1"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { MAX_EPOCH } from '@unirep/utils'\n")),(0,i.kt)("h2",{id:"genepochkey"},"genEpochKey"),(0,i.kt)("p",null,"Calculate an ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/protocol/epoch-key"},"epoch key"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { genEpochKey } from '@unirep/utils'\n\ngenEpochKey(\n    identitySecret: bigint,\n    attesterId: bigint | string,\n    epoch: bigint | number,\n    nonce: bigint | number,\n): bigint\n")),(0,i.kt)("h2",{id:"genidentityhash"},"genIdentityHash"),(0,i.kt)("p",null,"Calculate an identity hash for a user. It is used for user signup. The state tree leaf should follow the format: ",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"stateTreeLeaf = H(identityHash, H(data))")," where ",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"identityHash = H(identitySecret, attesterId + (epoch << 160))"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/protocol/trees#state-tree"},"state tree")," for more details.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { genIdentityHash } from '@unirep/utils'\n\ngenIdentityHash(\n    idSecret: bigint,\n    attesterId: bigint | string,\n    epoch: bigint | number\n): bigint\n")),(0,i.kt)("h2",{id:"genstatetreeleaf"},"genStateTreeLeaf"),(0,i.kt)("p",null,"Calculate a ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/protocol/trees#state-tree"},"state tree")," leaf for a user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { genStateTreeLeaf } from '@unirep/utils'\n\ngenStateTreeLeaf(\n    idSecret: bigint,\n    attesterId: bigint | string,\n    epoch: bigint | number,\n    data: (bigint | string | number)[]\n): bigint\n")),(0,i.kt)("h2",{id:"genepochtreeleaf"},"genEpochTreeLeaf"),(0,i.kt)("p",null,"Calculate an epoch tree leaf in an ",(0,i.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/protocol/trees#epoch-tree"},"epoch tree"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { genEpochTreeLeaf } from '@unirep/utils'\n\ngenEpochTreeLeaf(\n    epochKey: bigint | string,\n    data: (bigint | string | number)[]\n): bigint\n")),(0,i.kt)("h2",{id:"stringifybigints"},"stringifyBigInts"),(0,i.kt)("p",null,"Stringify all ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),"s in an object, a string, or an array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { stringifyBigInts } from '@unirep/utils'\n\nstringifyBigInts(BigInt(3)) \n// '3'\n\nstringifyBigInts([BigInt(3)]) \n// ['3']\n\nstringifyBigInts({\n  item: BigInt(3)\n}) \n// { item: '3' }\n")),(0,i.kt)("h2",{id:"unstringifybigints"},"unstringifyBigInts"),(0,i.kt)("p",null,"Unstringify all ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"s in an object, a string, or an array to ",(0,i.kt)("inlineCode",{parentName:"p"},"bigint"),"s"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { unstringifyBigInts } from '@unirep/utils'\n\nconst values = {\n    input1: '1',\n    input2: '2',\n    input3: '3',\n}\n\nunstringifyBigInts(values)\n// { input1: 1n, input2: 2n, input3: 3n }\n")))}g.isMDXComponent=!0}}]);