"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[3913],{30876:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,o(o({ref:t},s),{},{components:r})):n.createElement(m,o({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},82009:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(2784),a=r(6277);const i={tabItem:"tabItem_OMyP"};function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,o),hidden:r},t)}},77336:(e,t,r)=>{r.d(t,{Z:()=>N});var n=r(7896),a=r(2784),i=r(6277),o=r(24126),l=r(7267),u=r(32424),c=r(42244),s=r(24155);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function d(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function f(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:r}=e;const n=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,u._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function h(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,i=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[u,c]=m({queryString:r,groupId:n}),[p,h]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,s.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:n}),v=(()=>{const e=u??p;return f({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!f({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),c(e),h(e)}),[c,h,i]),tabValues:i}}var v=r(89741);const b={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};function y(e){let{className:t,block:r,selectedValue:l,selectValue:u,tabValues:c}=e;const s=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,r=s.indexOf(t),n=c[r].value;n!==l&&(p(t),u(n))},f=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;t=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;t=s[r]??s[s.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},t)},c.map((e=>{let{value:t,label:r,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>s.push(e),onKeyDown:f,onClick:d},o,{className:(0,i.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":l===t})}),r??t)})))}function g(e){let{lazy:t,children:r,selectedValue:n}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=h(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},a.createElement(y,(0,n.Z)({},e,t)),a.createElement(g,(0,n.Z)({},e,t)))}function N(e){const t=(0,v.Z)();return a.createElement(k,(0,n.Z)({key:String(t)},e))}},39006:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var n=r(7896),a=(r(2784),r(30876)),i=r(77336),o=r(82009);const l={title:"ReputationVerifierHelper.sol"},u=void 0,c={unversionedId:"contracts-api/verifiers/reputation-verifier-helper",id:"contracts-api/verifiers/reputation-verifier-helper",title:"ReputationVerifierHelper.sol",description:"A contract address for a reputation verifier helper. See IVerifier for more info.",source:"@site/docs/contracts-api/verifiers/reputation-verifier-helper.md",sourceDirName:"contracts-api/verifiers",slug:"/contracts-api/verifiers/reputation-verifier-helper",permalink:"/docs/next/contracts-api/verifiers/reputation-verifier-helper",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/docs/contracts-api/verifiers/reputation-verifier-helper.md",tags:[],version:"current",frontMatter:{title:"ReputationVerifierHelper.sol"},sidebar:"apiSidebar",previous:{title:"IVerifier.sol",permalink:"/docs/next/contracts-api/verifiers/iverifier-sol"},next:{title:"Circom Circuits",permalink:"/docs/next/circuits-api/circuits"}},s={},p=[{value:"decodeReputationControl",id:"decodereputationcontrol",level:2},{value:"decodeReputationSignals",id:"decodereputationsignals",level:2},{value:"verifyAndCheck",id:"verifyandcheck",level:2},{value:"verifyAndCheckCaller",id:"verifyandcheckcaller",level:2}],d={toc:p},f="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(f,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A contract address for a reputation verifier helper. See ",(0,a.kt)("a",{parentName:"p",href:"iverifier-sol"},"IVerifier")," for more info."),(0,a.kt)(i.Z,{defaultValue:"typescript",values:[{label:"Typescript/Javascript",value:"typescript"},{label:"Solidity",value:"solidity"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"typescript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="reputationVerifierHelper.ts"',title:'"reputationVerifierHelper.ts"'},"import { deployUnirep, deployVerifierHelper } from '@unirep/contracts/deploy'\nimport { defaultProver } from '@unirep/circuits/provers/defaultProver'\nimport { Circuit, ReputationProof } from '@unirep/circuits'\n\n// deploys reputation verifier helper contract\nconst reputationVerifierHelper = await deployVerifierHelper(\n  unirep.address,\n  accounts[0],\n  Circuit.reputation\n)\n\nconst r = await defaultProver.genProofAndPublicSignals(\n  Circuit.reputation,\n  CircuitInputs // see @unirep/circuits to know the whole circuit inputs\n)\n\nconst { publicSignals, proof } = new ReputationProof(\n  r.publicSignals,\n  r.proof\n)\n\n// fails or returns proof signals\nconst signals = await reputationVerifierHelper.verifyAndCheck(\n  publicSignals,\n  proof\n) \n"))),(0,a.kt)(o.Z,{value:"solidity",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol",metastring:'title="App.sol"',title:'"App.sol"'},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { ReputationVerifierHelper } from '@unirep/contracts/verifierHelpers/ReputationVerifierHelper.sol';\n\ncontract App {\n  // use the deployed helper\n  ReputationVerifierHelper public helper;\n  constructor(\n    ReputationVerifierHelper _helper\n  ) {\n    helper = _helper;\n  }\n\n  // decode and verify the proofs\n  // fails or returns proof signals\n  function decodeAndVerify(\n    uint256[] calldata publicSignals,\n    uint256[8] calldata proof\n  ) public view returns (ReputationVerifierHelper.ReputationSignals memory) {\n    return helper.verifyAndCheck(publicSignals, proof);\n  }\n}\n\n")))),(0,a.kt)("h2",{id:"decodereputationcontrol"},"decodeReputationControl"),(0,a.kt)("p",null,"Decode a reputation related control from ",(0,a.kt)("a",{parentName:"p",href:"../../circuits-api/classes/src.ReputationProof.md"},"reputation proof")," into named variables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol"},"function decodeReputationControl(uint256 control)\n    public\n    pure\n    returns (\n      uint64 minRep,\n      uint64 maxRep,\n      bool proveMinRep,\n      bool proveMaxRep,\n      bool proveZeroRep,\n      bool proveGraffiti\n    )\n")),(0,a.kt)("h2",{id:"decodereputationsignals"},"decodeReputationSignals"),(0,a.kt)("p",null,"Decode the public signals from a ",(0,a.kt)("a",{parentName:"p",href:"../../circuits-api/classes/src.ReputationProof.md"},"reputation proof")," into named variables."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol"},"function decodeReputationSignals(uint256[] memory publicSignals)\n    public\n    pure\n    returns (ReputationSignals memory)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol"},"struct ReputationSignals {\n  uint256 epochKey;\n  uint256 stateTreeRoot;\n  uint256 minRep;\n  uint256 maxRep;\n  uint256 graffiti;\n  uint256 data;\n  uint160 attesterId;\n  uint48 epoch;\n  uint48 chainId;\n  uint8 nonce;\n  bool revealNonce;\n  bool proveMinRep;\n  bool proveMaxRep;\n  bool proveZeroRep;\n  bool proveGraffiti;\n}\n")),(0,a.kt)("h2",{id:"verifyandcheck"},"verifyAndCheck"),(0,a.kt)("p",null,"Verify a ",(0,a.kt)("a",{parentName:"p",href:"../../circuits-api/classes/src.ReputationProof.md"},"reputation proof")," and validate the public signals against the onchain state. This function will revert if any inputs are invalid."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This function ",(0,a.kt)("strong",{parentName:"p"},"does not")," require the epoch for the proof to be the ",(0,a.kt)("strong",{parentName:"p"},"current epoch"),". The user may generate a valid proof for a past epoch. If you require the proof to be for the current epoch you should add an additional check using ",(0,a.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/unirep-sol#attestercurrentepoch"},(0,a.kt)("inlineCode",{parentName:"a"},"attesterCurrentEpoch")),".")),(0,a.kt)("admonition",{type:"danger"},(0,a.kt)("p",{parentName:"admonition"},"This function does not verify that the ",(0,a.kt)("inlineCode",{parentName:"p"},"attesterId")," is the same as the caller. Thus, we recommend that to either use ",(0,a.kt)("a",{parentName:"p",href:"#verifyandcheckcaller"},"verifyAndCheckCaller")," or to manually verify the ",(0,a.kt)("inlineCode",{parentName:"p"},"attesterId"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol"},"function verifyAndCheck(\n    uint256[] calldata publicSignals,\n    uint256[8] calldata proof\n) public\n  view\n  returns (ReputationSignals memory) \n")),(0,a.kt)("h2",{id:"verifyandcheckcaller"},"verifyAndCheckCaller"),(0,a.kt)("p",null,"Verify a ",(0,a.kt)("a",{parentName:"p",href:"../../circuits-api/classes/src.ReputationProof.md"},"reputation proof")," and validate the public signals against the onchain state. This function will revert if any inputs are invalid. This is identical to ",(0,a.kt)("inlineCode",{parentName:"p"},"verifyAndCheck")," but also checks that the caller is the attester."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This function ",(0,a.kt)("strong",{parentName:"p"},"does not")," require the epoch for the proof to be the ",(0,a.kt)("strong",{parentName:"p"},"current epoch"),". The user may generate a valid proof for a past epoch. If you require the proof to be for the current epoch you should add an additional check using ",(0,a.kt)("a",{parentName:"p",href:"/docs/next/contracts-api/unirep-sol#attestercurrentepoch"},(0,a.kt)("inlineCode",{parentName:"a"},"attesterCurrentEpoch")),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol"},"function verifyAndCheckCaller(\n    uint256[] calldata publicSignals,\n    uint256[8] calldata proof\n) public\n  view\n  returns (ReputationSignals memory) \n")))}m.isMDXComponent=!0}}]);