"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[3481],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(7896),i=(n(2784),n(30876));const r={title:"Data Schema"},s=void 0,o={unversionedId:"core-api/data-schema",id:"version-2.0.0-beta-4/core-api/data-schema",title:"Data Schema",description:"The DataSchema class abstracts UniRep data into a JavaScript object. This class can be used to encode and decode attestation data, and build attestations that are ready to be submitted to the UniRep smart contract.",source:"@site/versioned_docs/version-2.0.0-beta-4/core-api/data-schema.md",sourceDirName:"core-api",slug:"/core-api/data-schema",permalink:"/docs/2.0.0-beta-4/core-api/data-schema",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/core-api/data-schema.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"Data Schema"},sidebar:"apiSidebar",previous:{title:"schema",permalink:"/docs/2.0.0-beta-4/core-api/schema"},next:{title:"Installation",permalink:"/docs/2.0.0-beta-4/contracts-api/installation"}},c={},l=[{value:"SchemaField",id:"schemafield",level:2},{value:"Attestation",id:"attestation",level:2},{value:"parseSchema",id:"parseschema",level:2},{value:"buildAttestation",id:"buildattestation",level:2},{value:"buildAttestations",id:"buildattestations",level:2},{value:"parseData",id:"parsedata",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DataSchema")," class abstracts UniRep data into a JavaScript object. This class can be used to encode and decode attestation data, and build attestations that are ready to be submitted to the UniRep smart contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Attestation, DataSchema, SchemaField } from '@unirep/core'\n\nconst schema: SchemaField[] = [\n    {\n        name: 'posRep',\n        type: 'uint64',\n        updateBy: 'sum',\n    },\n    {\n        name: 'negRep',\n        type: 'uint64',\n        updateBy: 'sum',\n    },\n    {\n        name: 'graffiti',\n        type: 'uint205', // replacement fields must be `uint205`\n        updateBy: 'replace',\n    },\n    {\n        name: 'postCount',\n        type: 'uint49',\n        updateBy: 'sum',\n    },\n    {\n        name: 'commentCount',\n        type: 'uint49',\n        updateBy: 'sum',\n    },\n    {\n        name: 'voteCount',\n        type: 'uint49',\n        updateBy: 'sum',\n    },\n]\n\nconst d = new DataSchema(schema)\n\n// 10 will be added to the 'posRep' field in the user data\nconst sumChange = { name: 'posRep', val: BigInt(10) }\nconst sumAttestation: Attestation = d.buildAttestation(sumChange)\n\n// 20 will replace the current value in the 'graffiti' field in user data\nconst replacementChange = { name: 'graffiti', val: BigInt(20) }\nconst replacementAttestation: Attestation =\n    d.buildAttestation(replacementChange)\n\n// Multiple attestations can build using `buildAttestations()`\nconst changes = [\n    { name: 'posRep', val: BigInt(10) },\n    { name: 'negRep', val: BigInt(10) },\n    { name: 'negRep', val: BigInt(20) },\n    { name: 'graffiti', val: BigInt(30) },\n]\n\n//Returns two `Attestation` objects: 'posRep' and 'negRep' attestations are combined into one attestation\nconst attestations: Attestation[] = d.buildAttestations(changes)\n\n// JS literal representing emitted data from a UniRep contract\nconst data = [\n  553402322211286548490n,\n  0n,\n  0n,\n  0n,\n  205688069665150755269371147819668813122841983204197482918576158n,\n  0n\n]\n\n/*\nResult: \nparsedData = {\n  posRep: 10n,\n  negRep: 30n,\n  graffiti: 30n,\n  postCount: 0n,\n  commentCount: 0n,\n  voteCount: 0n\n}\n*/\nconst parsedData = d.parseData(data)\n")),(0,i.kt)("h2",{id:"schemafield"},"SchemaField"),(0,i.kt)("p",null,"Type describing each field in the user-defined schema. Schema field type must be a ",(0,i.kt)("inlineCode",{parentName:"p"},"uint")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type SchemaField = {\n    name: string // field name\n    type: string // uint*\n    updateBy: 'sum' | 'replace' // either update by adding or replacing user data\n}\n")),(0,i.kt)("h2",{id:"attestation"},"Attestation"),(0,i.kt)("p",null,"Type to be used with a deployed ",(0,i.kt)("inlineCode",{parentName:"p"},"unirepContract")," object"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type Attestation = {\n    fieldIndex: number\n    change: bigint\n}\n")),(0,i.kt)("h2",{id:"parseschema"},"parseSchema"),(0,i.kt)("p",null,"Verify a user-defined data schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"dataSchema.parseSchema(schema: SchemaField[]): \n{\n    ...schema: SchemaField, // exploded `SchemaField` fields\n    dataIndex: number, \n    offset: number, // bit offset in attester change\n    bits: number // bits allocated\n}\n")),(0,i.kt)("h2",{id:"buildattestation"},"buildAttestation"),(0,i.kt)("p",null,"Build an ",(0,i.kt)("inlineCode",{parentName:"p"},"Attestation")," object to be used for a UniRep contract"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"dataSchema.buildAttestation(change: { name: string; val: bigint }): Attestation \n")),(0,i.kt)("h2",{id:"buildattestations"},"buildAttestations"),(0,i.kt)("p",null,"Build multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Attestation")," objects trying to combine attestation changes when possible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"dataSchema.buildAttestations(changes: { name: string; val: bigint }[]): Attestation[]\n")),(0,i.kt)("h2",{id:"parsedata"},"parseData"),(0,i.kt)("p",null,"Parse encoded schema, producing a dictionary of user-defined field names and attestation value"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"dataSchema.parseData(data: bigint[]): any\n")))}u.isMDXComponent=!0}}]);