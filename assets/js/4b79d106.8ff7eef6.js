"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[445],{30876:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||p;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,i=new Array(p);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<p;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83561:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>p,metadata:()=>o,toc:()=>c});var r=n(7896),a=(n(2784),n(30876));const p={description:"Client library for cryptography related functions which are used in UniRep protocol."},i="@unirep/crypto",o={unversionedId:"package/crypto",id:"version-1.0.1/package/crypto",title:"@unirep/crypto",description:"Client library for cryptography related functions which are used in UniRep protocol.",source:"@site/versioned_docs/version-1.0.1/package/crypto.md",sourceDirName:"package",slug:"/package/crypto",permalink:"/docs/1.0.1/package/crypto",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/package/crypto.md",tags:[],version:"1.0.1",frontMatter:{description:"Client library for cryptography related functions which are used in UniRep protocol."},sidebar:"apiSidebar",previous:{title:"Verify proofs",permalink:"/docs/1.0.1/protocol/contract/verify-proofs"},next:{title:"@unirep/circuits",permalink:"/docs/1.0.1/package/circuits"}},l={},c=[{value:"\ud83d\udee0 Install",id:"-install",level:2},{value:"npm or yarn",id:"npm-or-yarn",level:3},{value:"\ud83d\udcd4 Usage",id:"-usage",level:2},{value:"ZkIdentity",id:"zkidentity",level:3},{value:"IncrementalMerkleTree",id:"incrementalmerkletree",level:3},{value:"SparseMerkleTree",id:"sparsemerkletree",level:3},{value:"Crypto utils",id:"crypto-utils",level:3}],s={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unirepcrypto"},"@unirep/crypto"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/unirep/unirep"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/5124fc18e7c4eea90190045bc66eddafb19a7b4d93c696e88c65dc530cec9b02/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a6563742d756e697265702d626c75652e7376673f7374796c653d666c61742d737175617265",alt:null})," "),(0,a.kt)("a",{parentName:"p",href:"https://github.com/unirep/unirep/blob/master/LICENSE"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/9dc25f9a3042124b664e5c386b48a35246c09e7fa0e514bf151c2034b183ec62/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f756e697265702f756e697265702e7376673f7374796c653d666c61742d737175617265",alt:"Github license"})," "),(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@unirep/crypto"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/4774ba9193678c694b6cfaeb67630a07cac1188c9052630db4654234a920366c/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40756e697265702f63727970746f3f7374796c653d666c61742d737175617265",alt:"NPM version"})," "),(0,a.kt)("a",{parentName:"p",href:"https://npmjs.org/package/@unirep/crypto"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/1e833aa109c88580fa56d15c0270422a6bf401040513530fa83b91f497868e11/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40756e697265702f63727970746f2e7376673f7374796c653d666c61742d737175617265",alt:"Downloads"})," "),(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/ed5849d453eb089b4ad8f56f316f492ceef5e7aa5404ee4df4d97ff6cb3f375f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e7465722d65736c696e742d3830383066323f7374796c653d666c61742d737175617265266c6f676f3d65736c696e74",alt:"Linter eslint"})," "),(0,a.kt)("a",{parentName:"p",href:"https://prettier.io/"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/81082ed03d1efb3d135c66d183ce379d0d30a0091d09d472f5e96ab4e2ff4375/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d70726574746965722d6638626334353f7374796c653d666c61742d737175617265266c6f676f3d7072657474696572",alt:"Code style prettier"}))),(0,a.kt)("h2",{id:"-install"},"\ud83d\udee0 Install"),(0,a.kt)("h3",{id:"npm-or-yarn"},"npm or yarn"),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"@unirep/crypto")," package with npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @unirep/crypto\n")),(0,a.kt)("p",null,"or yarn:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @unirep/crypto\n")),(0,a.kt)("h2",{id:"-usage"},"\ud83d\udcd4 Usage"),(0,a.kt)("h3",{id:"zkidentity"},"ZkIdentity"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate a random ZkIdentity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ZkIdentity } from '@unirep/crypto'\nconst identity = new ZkIdentity()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate identity commitment")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const commitment = identity.genIdentityCommitment()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Get identity nullifier")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const idNullifier = identity.identityNullifier\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"get identity trapdoor")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const idTrapdoor = identity.trapdoor\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Serialize/ unserialize identity")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Strategy } from '@unirep/crypto'\n// serialize identity\nconst serializedIdentity = identity.serializeIdentity()\n// unserialize identity\nconst unserializedIdentity = new ZkIdentity(\n    Strategy.SERIALIZED,\n    serializedIdentity\n)\n")),(0,a.kt)("h3",{id:"incrementalmerkletree"},"IncrementalMerkleTree"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Create a IncrementalMerkleTree")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { IncrementalMerkleTree } from '@unirep/crypto'\n\nconst depth = 4\n// initialize incremental merkle tree with depth 4\nconst tree = new IncrementalMerkleTree(depth)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Get tree root")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const root = tree.root\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Insert leaf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const leaf = 1\ntree.insert(leaf)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate merkle proof")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const index = 0\nconst proof = tree.createProof(index)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Verify merkle proof")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = tree.verifyProof(proof)\n")),(0,a.kt)("h3",{id:"sparsemerkletree"},"SparseMerkleTree"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Create a SparseMerkleTree")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { SparseMerkleTree } from '@unirep/crypto'\n\nconst depth = 4\n// initialize incremental merkle tree with depth 4\nconst zeroHash = BigInt(0)\n// initialize sparse merkle tree with depth 4 and zeroHash 0\nconst tree = new SparseMerkleTree(\n    depth, \n    zeroHash\n)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Get tree root")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const root = tree.root\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Update leaf")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const leafKey = BigInt(3)\nconst leafValue = BigInt(4)\ntree.update(leafKey, leafValue)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Generate merkle proof")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const leafKey = BigInt(1)\nconst proof = tree.createProof(leafKey)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Verify merkle proof")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = tree.verifyProof(leafKey, proof)\n")),(0,a.kt)("h3",{id:"crypto-utils"},"Crypto utils"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"genRandomSalt")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { genRandomSalt } from '@unirep/crypto'\n\n// generate random BigInt\nconst salt = genRandomSalt()\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"hash5")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { hash5 } from '@unirep/crypto'\n\n// poseidon hash 5 BigInt elements\nconst values = [\n    genRandomSalt(),\n    genRandomSalt(),\n    genRandomSalt(),\n    genRandomSalt(),\n    genRandomSalt(),\n]\nconst hash5Value = hash5(values)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"hashOne")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { hashOne } from '@unirep/crypto'\n\n// poseidon hash 1 BigInt elements\nconst value = genRandomSalt()\nconst hashOneValue = hashOne(value)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"hashLeftRight")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { hashLeftRight } from '@unirep/crypto'\n\n// poseidon hash 2 BigInt elements\nconst leftValue = genRandomSalt()\nconst rightValue = genRandomSalt()\nconst hash = hashLeftRight(leftValue, rightValue)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"stringifyBigInts/unstringifyBigInts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { stringifyBigInts, unstringifyBigInts } from '@unirep/crypto'\n\nconst values = {\n    input1: BigInt(1),\n    input2: BigInt(2),\n    input3: BigInt(3),\n}\n// stringify BigInt elements with stringifyBigInts function\nconst stringifiedValues = stringifyBigInts(values)\n// it can be recoverd by unstringifyBigInts function\nconst unstringifiedValues = unstringifyBigInts(stringifiedValues)\n")))}m.isMDXComponent=!0}}]);