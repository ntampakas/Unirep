"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[50],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(2784);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=i,g=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},13632:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7896),i=(r(2784),r(30876));const a={id:"index",title:"@unirep/circuits",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},o="UniRep circuits package",s={unversionedId:"circuits-api/index",id:"version-2.1.x/circuits-api/index",title:"@unirep/circuits",description:"Client library for circuit related functions which are used in UniRep protocol.",source:"@site/versioned_docs/version-2.1.x/circuits-api/index.md",sourceDirName:"circuits-api",slug:"/circuits-api/",permalink:"/docs/circuits-api/",draft:!1,editUrl:null,tags:[],version:"2.1.x",sidebarPosition:0,frontMatter:{id:"index",title:"@unirep/circuits",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"ReputationVerifierHelper.sol",permalink:"/docs/contracts-api/verifiers/reputation-verifier-helper"},next:{title:"Table of Contents",permalink:"/docs/circuits-api/modules"}},p={},l=[{value:"\ud83d\udca1 About UniRep",id:"-about-unirep",level:2},{value:"\ud83d\udcd8 Documentation",id:"-documentation",level:2},{value:"\ud83d\udee0 Install",id:"-install",level:2},{value:"npm or yarn",id:"npm-or-yarn",level:3},{value:"\ud83d\udcd4 Usage",id:"-usage",level:2},{value:"Prover",id:"prover",level:3},{value:"Circom",id:"circom",level:3},{value:"Proof helpers",id:"proof-helpers",level:3},{value:"\ud83d\ude4c\ud83c\udffb Join our community",id:"-join-our-community",level:2},{value:'<img height="24" src="https://pse.dev/_next/static/media/header-logo.16312102.svg" /> Privacy &amp; Scaling Explorations',id:"-privacy--scaling-explorations",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unirep-circuits-package"},"UniRep circuits package"),(0,i.kt)("p",null,"Client library for circuit related functions which are used in UniRep protocol."),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"https://github.com/unirep/unirep"},(0,i.kt)("img",{src:"https://img.shields.io/badge/project-unirep-blue.svg?style=flat-square"})),(0,i.kt)("a",{href:"https://github.com/unirep/unirep/blob/master/LICENSE"},(0,i.kt)("img",{alt:"Github license",src:"https://img.shields.io/github/license/unirep/unirep.svg?style=flat-square"})),(0,i.kt)("a",{href:"https://www.npmjs.com/package/@unirep/circuits"},(0,i.kt)("img",{alt:"NPM version",src:"https://img.shields.io/npm/v/@unirep/circuits?style=flat-square"})),(0,i.kt)("a",{href:"https://npmjs.org/package/@unirep/circuits"},(0,i.kt)("img",{alt:"Downloads",src:"https://img.shields.io/npm/dm/@unirep/circuits.svg?style=flat-square"})),(0,i.kt)("a",{href:"https://eslint.org/"},(0,i.kt)("img",{alt:"Linter eslint",src:"https://img.shields.io/badge/linter-eslint-8080f2?style=flat-square&logo=eslint"})),(0,i.kt)("a",{href:"https://prettier.io/"},(0,i.kt)("img",{alt:"Code style prettier",src:"https://img.shields.io/badge/code%20style-prettier-f8bc45?style=flat-square&logo=prettier"}))),(0,i.kt)("div",{align:"center"},(0,i.kt)("h4",null,(0,i.kt)("a",{href:"https://discord.gg/VzMMDJmYc5"},"\ud83e\udd16 Chat & Support"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"-about-unirep"},"\ud83d\udca1 About UniRep"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UniRep")," is a ",(0,i.kt)("em",{parentName:"p"},"private")," and ",(0,i.kt)("em",{parentName:"p"},"non-repudiable")," ",(0,i.kt)("strong",{parentName:"p"},"data system"),". Users can receive attestations from attesters, and voluntarily prove facts about their data without revealing the data itself. Moreover, users cannot refuse to receive attestations from an attester."),(0,i.kt)("h2",{id:"-documentation"},"\ud83d\udcd8 Documentation"),(0,i.kt)("p",null,"Read the ",(0,i.kt)("a",{parentName:"p",href:"https://medium.com/privacy-scaling-explorations/unirep-a-private-and-non-repudiable-reputation-system-7fb5c6478549"},"medium article")," to know more about the concept of UniRep protocol.\nFor more information, refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://developer.unirep.io/"},"documentation")),(0,i.kt)("h2",{id:"-install"},"\ud83d\udee0 Install"),(0,i.kt)("h3",{id:"npm-or-yarn"},"npm or yarn"),(0,i.kt)("p",null,"Install the ",(0,i.kt)("inlineCode",{parentName:"p"},"@unirep/circuits")," package with npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @unirep/circuits\n")),(0,i.kt)("p",null,"or yarn:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @unirep/circuits\n")),(0,i.kt)("h2",{id:"-usage"},"\ud83d\udcd4 Usage"),(0,i.kt)("h3",{id:"prover"},"Prover"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use default nodejs prover")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defaultProver } from '@unirep/circuits/provers/defaultProver'\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use web prover")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// default web prover from url: https://keys.unirep.io/${version}/.\nimport prover from '@unirep/circuits/provers/web'\n\n// construct web prover from other url\nimport { WebProver } from '@unirep/circuits/provers/web'\nconst prover = new WebProver('https://YOUR/KEYS/URL')\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Generate proof and verify it with the above prover")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Circuit } from '@unirep/circuits'\n\n// See ./test/verifyEpochKey.test.ts for generating circuit inputs\nconst circuitInputs = {\n    state_tree_elements: ...,\n    state_tree_indices: ...,\n    ...\n}\nconst { proof, publicSignals } = await prover.genProofAndPublicSignals(\n    Circuit.epochKey,\n    circuitInputs\n)\n\nconst isValid = await prover.verifyProof(\n    Circuit.epochKey,\n    publicSignals,\n    proof\n)\n")),(0,i.kt)("h3",{id:"circom"},"Circom"),(0,i.kt)("p",null,"Use the unirep ",(0,i.kt)("a",{parentName:"p",href:"https://docs.circom.io/"},"circom")," circuits like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-circom"},'pragma circom 2.1.0;\n\ninclude "PATH/TO/node_modules/@unirep/circuits/circuits/epochKey.circom";\n\ntemplate DataProof(STATE_TREE_DEPTH, EPOCH_KEY_NONCE_PER_EPOCH, FIELD_COUNT) {\n    signal input state_tree_indices[STATE_TREE_DEPTH];\n    signal input state_tree_elements[STATE_TREE_DEPTH];\n    signal input identity_secret;\n    signal input data[FIELD_COUNT];\n    signal input sig_data;\n    signal input reveal_nonce;\n    signal input attester_id;\n    signal input epoch;\n    signal input nonce;\n    signal input chain_id;\n\n    signal output epoch_key;\n    signal output state_tree_root;\n    signal output control;\n\n    (epoch_key, state_tree_root, control) <== EpochKey(STATE_TREE_DEPTH, EPOCH_KEY_NONCE_PER_EPOCH, FIELD_COUNT)(\n        state_tree_indices, \n        state_tree_elements, \n        identity_secret,\n        reveal_nonce,\n        attester_id,\n        epoch,\n        nonce,\n        data,\n        sig_data,\n        chain_id\n    );\n\n    // add your customized circuits\n    ...\n}\n')),(0,i.kt)("h3",{id:"proof-helpers"},"Proof helpers"),(0,i.kt)("p",null,"Proof helpers can help users query the public signals in each proof."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"EpochKeyProof")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { EpochKeyProof } from '@unirep/circuits'\n\nconst { proof, publicSignals } = await prover.genProofAndPublicSignals(\n    Circuit.epochKey,\n    circuitInputs\n)\nconst data = new EpochKeyProof(publicSignals, proof)\nconst epk = data.epochKey\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SignupProof")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { SignupProof } from '@unirep/circuits'\n\nconst { proof, publicSignals } = await prover.genProofAndPublicSignals(\n    Circuit.signup,\n    circuitInputs\n)\nconst data = new SignupProof(publicSignals, proof)\nconst identityCommitment = data.identityCommitment\n")),(0,i.kt)("h2",{id:"-join-our-community"},"\ud83d\ude4c\ud83c\udffb Join our community"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Discord server: ",(0,i.kt)("a",{href:"https://discord.gg/VzMMDJmYc5"},(0,i.kt)("img",{src:"https://img.shields.io/discord/931582072152281188?label=Discord&style=flat-square&logo=discord"}))),(0,i.kt)("li",{parentName:"ul"},"Twitter account: ",(0,i.kt)("a",{href:"https://twitter.com/UniRep_Protocol"},(0,i.kt)("img",{src:"https://img.shields.io/twitter/follow/UniRep_Protocol?style=flat-square&logo=twitter"}))),(0,i.kt)("li",{parentName:"ul"},"Telegram group: ",(0,i.kt)("a",{href:"https://t.me/unirep"},(0,i.kt)("img",{src:"https://img.shields.io/badge/telegram-@unirep-blue.svg?style=flat-square&logo=telegram"})))),(0,i.kt)("h2",{id:"-privacy--scaling-explorations"},(0,i.kt)("img",{height:"24",src:"https://pse.dev/_next/static/media/header-logo.16312102.svg"})," Privacy & Scaling Explorations"),(0,i.kt)("p",null,"This project is supported by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/privacy-scaling-explorations"},"Privacy & Scaling Explorations")," and the Ethereum Foundation.\nSee more projects on: ",(0,i.kt)("a",{parentName:"p",href:"https://pse.dev/"},"https://pse.dev/"),"."))}m.isMDXComponent=!0}}]);