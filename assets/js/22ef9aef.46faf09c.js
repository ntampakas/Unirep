"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[1838],{30876:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(a),u=r,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||i;return a?n.createElement(k,o(o({ref:t},d),{},{components:a})):n.createElement(k,o({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},592:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(7896),r=(a(2784),a(30876));const i={id:"modules",title:"@unirep/core",sidebar_label:"Exports",sidebar_position:.5,custom_edit_url:null},o=void 0,l={unversionedId:"core-api/modules",id:"version-2.1.x/core-api/modules",title:"@unirep/core",description:"Classes",source:"@site/versioned_docs/version-2.1.x/core-api/modules.md",sourceDirName:"core-api",slug:"/core-api/modules",permalink:"/docs/core-api/modules",draft:!1,editUrl:null,tags:[],version:"2.1.x",sidebarPosition:.5,frontMatter:{id:"modules",title:"@unirep/core",sidebar_label:"Exports",sidebar_position:.5,custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Readme",permalink:"/docs/core-api/"},next:{title:"DataSchema",permalink:"/docs/core-api/classes/DataSchema"}},p={},s=[{value:"Classes",id:"classes",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:"Attestation",id:"attestation",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"SchemaField",id:"schemafield",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"Variables",id:"variables",level:2},{value:"schema",id:"schema",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"userSchema",id:"userschema",level:3},{value:"Defined in",id:"defined-in-3",level:4}],d={toc:s},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/core-api/classes/DataSchema"},"DataSchema")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/core-api/classes/Synchronizer"},"Synchronizer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/core-api/classes/UserState"},"UserState"))),(0,r.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,r.kt)("h3",{id:"attestation"},"Attestation"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Attestation"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Type to be used with a deployed Unirep contract object"),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"change")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bigint"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fieldIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L26"},"packages/core/src/DataSchema.ts:26")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"schemafield"},"SchemaField"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"SchemaField"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Type describing each field in the user-defined schema. Schema field type must be a ",(0,r.kt)("inlineCode",{parentName:"p"},"uint"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Replacement field must be ",(0,r.kt)("inlineCode",{parentName:"p"},"uint205"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const schema: SchemaField = {\n  name: 'posRep', // field name\n  type: 'uint64', // uint*\n  updatedBy: 'sum', // either update by adding or replacing user data\n}\n")),(0,r.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"updateBy")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},'"sum"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"replace"'))))),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/DataSchema.ts#L17"},"packages/core/src/DataSchema.ts:17")),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("h3",{id:"schema"},"schema"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"schema"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"TableData"),"[]"),(0,r.kt)("p",null,"UniRep needs to persist data in order to construct state and make proofs.\nTo do this we use a generic database wrapper called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vimwitch/anondb"},"anondb"),".\nThis wrapper has support for desktop environment databases like SQLite, as well as the IndexedDB browser database."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@unirep/core")," ships a schema that should be used with the database.\nThis schema can be extended by adding additional collections for application specific data storage."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://developer.unirep.io/docs/core-api/schema"},"http://developer.unirep.io/docs/core-api/schema")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { schema } from '@unirep/core'\nimport { SQLiteConnector } from 'anondb/node'\nimport { IndexedDBConnector } from 'anondb/web'\n// in nodejs\nconst db_mem = await SQLiteConnector.create(schema, ':memory:')\nconst db_storage = await SQLiteConnector.create(schema, 'db.sqlite')\n// in browser\nconst db_browser = await IndexedDBConnector.create(schema)\n")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/schema.ts#L142"},"packages/core/src/schema.ts:142")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"userschema"},"userSchema"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"userSchema"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"TableData"),"[]"),(0,r.kt)("p",null,"UniRep needs to persist data in order to construct state and make proofs.\nTo do this we use a generic database wrapper called ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vimwitch/anondb"},"anondb"),".\nThis wrapper has support for desktop environment databases like SQLite, as well as the IndexedDB browser database."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@unirep/core")," ships a schema that should be used with the database.\nThe user schema extends from a synchronizer schema, which securely stores private user data, including personal information and the latest transitioned epoch."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://developer.unirep.io/docs/core-api/user-schema"},"http://developer.unirep.io/docs/core-api/user-schema")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { userSchema } from '@unirep/core'\nimport { SQLiteConnector } from 'anondb/node'\nimport { IndexedDBConnector } from 'anondb/web'\n// in nodejs\nconst db_mem = await SQLiteConnector.create(userSchema, ':memory:')\nconst db_storage = await SQLiteConnector.create(userSchema, 'db.sqlite')\n// in browser\nconst db_browser = await IndexedDBConnector.create(userSchema)\n")),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/60105749/packages/core/src/userSchema.ts#L53"},"packages/core/src/userSchema.ts:53")))}m.isMDXComponent=!0}}]);