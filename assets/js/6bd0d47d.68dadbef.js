"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[218],{30876:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var r=n(2784);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),p=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},u="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=p(n),g=a,d=u["".concat(c,".").concat(g)]||u[g]||f[g]||o;return n?r.createElement(d,i(i({ref:e},l),{},{components:n})):r.createElement(d,i({ref:e},l))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[u]="string"==typeof t?t:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},65555:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7896),a=(n(2784),n(30876));const o={},i="5. Attest",s={unversionedId:"getting-started/start-with-typescript/attest",id:"version-1.0.1/getting-started/start-with-typescript/attest",title:"5. Attest",description:"Construct an attestation object",source:"@site/versioned_docs/version-1.0.1/getting-started/start-with-typescript/5.-attest.md",sourceDirName:"getting-started/start-with-typescript",slug:"/getting-started/start-with-typescript/attest",permalink:"/docs/1.0.1/getting-started/start-with-typescript/attest",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/getting-started/start-with-typescript/5.-attest.md",tags:[],version:"1.0.1",sidebarPosition:5,frontMatter:{},sidebar:"apiSidebar",previous:{title:"4. Epoch key proof",permalink:"/docs/1.0.1/getting-started/start-with-typescript/epoch-key-proof"},next:{title:"6. Epoch transition",permalink:"/docs/1.0.1/getting-started/start-with-typescript/epoch-transition"}},c={},p=[],l={toc:p},u="wrapper";function f(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"5-attest"},"5. Attest"),(0,a.kt)("p",null,"Construct an attestation object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { genRandomSalt, hashOne } from '@unirep/crypto'\nimport { Attestation } from '@unirep/contracts' \n\nconst attesterID = await contract.attesters(attester.address)\n// positive reputation\nconst posRep = 10\n// negative reputation\nconst negRep = 3\n// a random bigint\nconst graffitiPreImage = genRandomSalt()\n// hash of the random bigint\nconst graffiti = hashOne(graffitiPreImage)\n// a sign up flag in the attester's application\nconst signUp = 0\n\n// the attestation object\nconst attestation = new Attestation(\n    attesterID,\n    posRep,\n    negRep,\n    graffiti,\n    signUp\n)\n")),(0,a.kt)("p",null,"Submit the attestation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const config = await contract.config()\nconst tx = await contract\n    .connect(attester)\n    .submitAttestation(\n        attestation,\n        proof.epochKey,\n        {\n            value: config.attestingFee\n        }\n    )\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Attesting fee can be set in UniRep configuration to force attesters attest an epoch key with an amount of ETH .")))}f.isMDXComponent=!0}}]);