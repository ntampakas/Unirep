"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[7952],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(2784);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||a;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9807:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var n=r(7896),o=(r(2784),r(30876));const a={},i="8. Reputation proof",p={unversionedId:"getting-started/start-with-typescript/reputation-proof",id:"version-1.0.1/getting-started/start-with-typescript/reputation-proof",title:"8. Reputation proof",description:"Generate a reputation proof",source:"@site/versioned_docs/version-1.0.1/getting-started/start-with-typescript/8.-reputation-proof.md",sourceDirName:"getting-started/start-with-typescript",slug:"/getting-started/start-with-typescript/reputation-proof",permalink:"/docs/1.0.1/getting-started/start-with-typescript/reputation-proof",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/getting-started/start-with-typescript/8.-reputation-proof.md",tags:[],version:"1.0.1",sidebarPosition:8,frontMatter:{},sidebar:"apiSidebar",previous:{title:"7. User state transition",permalink:"/docs/1.0.1/getting-started/start-with-typescript/user-state-transition"},next:{title:"Epoch Key",permalink:"/docs/1.0.1/protocol/glossary/epoch-key"}},s={},l=[{value:"Generate a reputation proof",id:"generate-a-reputation-proof",level:3},{value:"Spend reputation",id:"spend-reputation",level:3},{value:"Verify the proof",id:"verify-the-proof",level:3},{value:"Verify UniRep state",id:"verify-unirep-state",level:3}],c={toc:l},u="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"8-reputation-proof"},"8. Reputation proof"),(0,o.kt)("h3",{id:"generate-a-reputation-proof"},"Generate a reputation proof"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.1/getting-started/start-with-typescript/epoch-key-proof#4.-generate-current-user-state"},"4. Epoch key proof")," to know how to generate a current user state."),(0,o.kt)("p",null,"Specify what will be included in the reputation proof:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Prove the minimum ",(0,o.kt)("inlineCode",{parentName:"li"},"posRep-negRep")," that an attester gives: ",(0,o.kt)("inlineCode",{parentName:"li"},"minRep")),(0,o.kt)("li",{parentName:"ol"},"Prove the ",(0,o.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/nullifiers#reputation-nullifiers"},"reputation nullifiers"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"spendAmount")),(0,o.kt)("li",{parentName:"ol"},"Prove the graffiti pre-image: ",(0,o.kt)("inlineCode",{parentName:"li"},"graffitiPreImage"))),(0,o.kt)("p",null,"User should also specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"attesterId")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"epochKeyNonce")," to generate an output epoch key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const attesterID = await contract.attesters(attester.address)\nconst epkNonce = 0\nconst rep = await userState.getRepByAttester(attesterID.toBigInt())\nconst minRep = Number(rep.posRep) - Number(rep.negRep)\nconst proveGraffiti = 0 // 0 then it will not prove the pre-image\nconst spendAmount = 0 // 0 if user choose not to generate reputation nullifiers\n\nconst proof = await userState.genProveReputationProof(\n    attesterId,\n    epkNonce,\n    minRep,\n    proveGraffiti,\n    graffitiPreImage,\n    spendAmount\n)\n")),(0,o.kt)("h3",{id:"spend-reputation"},"Spend reputation"),(0,o.kt)("p",null,"Call the spendReputation in UniRep smart contract"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const tx = await contract.spendReputation(\n    proof.publicSignals,\n    proof.proof,\n    {\n        value: attestingFee,\n    }\n)\n")),(0,o.kt)("h3",{id:"verify-the-proof"},"Verify the proof"),(0,o.kt)("p",null,"with UniRep smart contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = await contract.verifyReputation(\n    proof.publicSignals,\n    proof.proof\n)\n")),(0,o.kt)("p",null,"with a prover:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = await proof.verify()\n")),(0,o.kt)("h3",{id:"verify-unirep-state"},"Verify UniRep state"),(0,o.kt)("p",null,"Check global state tree root exits."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const isGSTRootExisted = await unirepState.GSTRootExists(\n    proof.globalStateTree as string,\n    proof.epoch as number\n)\nconsole.log(isGSTRootExisted) // false then the proof will be invalid\n")),(0,o.kt)("p",null,"Verify reputation nullifiers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const repNullifiers = proof.repNullifiers.map((i) => i.toString())\nfor (const nullifier of repNullifiers) {\n    if (await unirepState.nullifierExist(nullifier)) {\n        console.log(false) // then the proof will be invalid\n    }\n}\n")))}f.isMDXComponent=!0}}]);