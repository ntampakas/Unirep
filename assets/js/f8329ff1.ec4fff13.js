"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[5449],{30876:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var o=n(2784);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=o.createContext({}),c=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=c(t.components);return o.createElement(s.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},f=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,s=t.parentName,l=p(t,["components","mdxType","originalType","parentName"]),u=c(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||r;return n?o.createElement(m,i(i({ref:e},l),{},{components:n})):o.createElement(m,i({ref:e},l))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,i=new Array(r);i[0]=f;var p={};for(var s in e)hasOwnProperty.call(e,s)&&(p[s]=e[s]);p.originalType=t,p[u]="string"==typeof t?t:a,i[1]=p;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},16804:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var o=n(7896),a=(n(2784),n(30876));const r={description:"How airdrop, attestation, spending reputation happens in UniRep smart contract."},i="Attestations",p={unversionedId:"protocol/contract/attestations",id:"version-1.0.1/protocol/contract/attestations",title:"Attestations",description:"How airdrop, attestation, spending reputation happens in UniRep smart contract.",source:"@site/versioned_docs/version-1.0.1/protocol/contract/attestations.md",sourceDirName:"protocol/contract",slug:"/protocol/contract/attestations",permalink:"/docs/1.0.1/protocol/contract/attestations",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/protocol/contract/attestations.md",tags:[],version:"1.0.1",frontMatter:{description:"How airdrop, attestation, spending reputation happens in UniRep smart contract."},sidebar:"apiSidebar",previous:{title:"User State Transition Proof",permalink:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},next:{title:"Epoch transition",permalink:"/docs/1.0.1/protocol/contract/epoch-transition"}},s={},c=[{value:"Submit Attestation",id:"submit-attestation",level:2},{value:"Spend Reputation",id:"spend-reputation",level:2}],l={toc:c},u="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,o.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"attestations"},"Attestations"),(0,a.kt)("h2",{id:"submit-attestation"},"Submit Attestation"),(0,a.kt)("p",null,"An attester can submit the attestation with a ",(0,a.kt)("strong",{parentName:"p"},"proof index"),". A valid proof is either an ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/epoch-key-proof"},"epoch key proof"),", a ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/user-sign-up-proof"},"user sign up proof")," or a ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/reputation-proof"},"reputation proof")," with epoch key being one of the public signals. An attester can also submit attestations through a relayer or not."),(0,a.kt)("p",null,"It it is from a ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/reputation-proof"},"reputation proof")," we should include a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"fromProofIndex"))," to make sure the attestation is from a valid reputation proof, or the attestation will fail."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"function submitAttestation(\n    Attestation calldata attestation,\n    uint256 epochKey\n) external payable {\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L335"},"Unirep.sol/submitAttestation"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"function submitAttestationViaRelayer(\n    address attester,\n    bytes calldata signature,\n    Attestation calldata attestation,\n    uint256 epochKey\n) external payable {\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L362"},"Unirep.sol/submitAttestationViaRelayer"))),(0,a.kt)("h2",{id:"spend-reputation"},"Spend Reputation"),(0,a.kt)("p",null,"A user include a ",(0,a.kt)("a",{parentName:"p",href:"/docs/1.0.1/protocol/circuits/reputation-proof"},"reputation proof")," to spend reputation via an attester, the non-zero nullifiers will be processed as a negative attestation, and the spent reputation cannot be re-used."," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=contracts/Unirep.sol",title:"contracts/Unirep.sol"},"/**\n* @dev A user spend reputation via an attester, the non-zero nullifiers will be processed as a negative attestation\n* publicSignals[0] = [ epochKey ]\n* publicSignals[1] = [ globalStateTree ]\n* publicSignals[2: maxReputationBudget + 2] = [ reputationNullifiers ]\n* publicSignals[maxReputationBudget + 2] = [ epoch ]\n* publicSignals[maxReputationBudget + 3] = [ attesterId ]\n* publicSignals[maxReputationBudget + 4] = [ proveReputationAmount ]\n* publicSignals[maxReputationBudget + 5] = [ minRep ]\n* publicSignals[maxReputationBudget + 6] = [ minRep ]\n* publicSignals[maxReputationBudget + 7] = [ proveGraffiti ]\n* publicSignals[maxReputationBudget + 8] = [ graffitiPreImage ]\n* @param publicSignals The public signals of the reputation proof\n * @param proof The The proof of the reputation proof\n */\nfunction spendReputation(\n    uint256[] memory publicSignals,\n    uint256[8] memory proof\n) external payable {\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"source: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L427"},"Unirep.sol/spendReputation"))))}d.isMDXComponent=!0}}]);