"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[4641],{30876:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var o=t(2784);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=o.createContext({}),l=function(e){var r=o.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=l(e.components);return o.createElement(p.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=n,m=u["".concat(p,".").concat(d)]||u[d]||f[d]||a;return t?o.createElement(m,i(i({ref:r},c),{},{components:t})):o.createElement(m,i({ref:r},c))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1879:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(7896),n=(t(2784),t(30876));const a={title:"BaseProof"},i=void 0,s={unversionedId:"circuits-api/base-proof",id:"version-2.0.0-beta-4/circuits-api/base-proof",title:"BaseProof",description:"We build proofs using a BaseProof class that optionally supports verification. Proof data can be expressed in one of two formats:",source:"@site/versioned_docs/version-2.0.0-beta-4/circuits-api/base-proof.md",sourceDirName:"circuits-api",slug:"/circuits-api/base-proof",permalink:"/docs/2.0.0-beta-4/circuits-api/base-proof",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/circuits-api/base-proof.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"BaseProof"},sidebar:"apiSidebar",previous:{title:"Web Prover",permalink:"/docs/2.0.0-beta-4/circuits-api/web-prover"},next:{title:"ReputationProof",permalink:"/docs/2.0.0-beta-4/circuits-api/reputation-proof"}},p={},l=[{value:"BaseProof",id:"baseproof",level:2},{value:"constructor",id:"constructor",level:2},{value:"_snarkProof",id:"_snarkproof",level:2},{value:"circuit",id:"circuit",level:2},{value:"publicSignals",id:"publicsignals",level:2},{value:"proof",id:"proof",level:2},{value:"verify",id:"verify",level:2}],c={toc:l},u="wrapper";function f(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,o.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"We build proofs using a ",(0,n.kt)("inlineCode",{parentName:"p"},"BaseProof")," class that optionally supports verification. Proof data can be expressed in one of two formats:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"SnarkProof")," objects for verification by ",(0,n.kt)("inlineCode",{parentName:"li"},"snarkjs")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("inlineCode",{parentName:"li"},"bigint[]")," for contract verification.")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"BaseProof")," class can be used to convert between the two formats. This class should not be used directly, but should instead be inherited."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { BaseProof } from '@unirep/circuits'\n\nclass MyCustomProof extends BaseProof {\n  constructor(publicSignals, proof, prover) {\n    super(publicSignals, proof, prover)\n\n    // Specify a circuit name for the Prover\n    // This is typically a filename\n    this.circuit = 'MyCustomProof'\n  }\n}\n")),(0,n.kt)("h2",{id:"baseproof"},"BaseProof"),(0,n.kt)("p",null,"The base class for a proof that can be verified using a ",(0,n.kt)("a",{parentName:"p",href:"prover"},(0,n.kt)("inlineCode",{parentName:"a"},"Prover")),"."),(0,n.kt)("h2",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"Create a new instance of the class."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"constructor(\n  publicSignals: bigint[],\n  proof: SnarkProof | bigint[],\n  prover?: Prover\n)\n")),(0,n.kt)("h2",{id:"_snarkproof"},"_","snarkProof"),(0,n.kt)("p",null,"The proof data in ",(0,n.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/utils-api/types#snarkproof"},(0,n.kt)("inlineCode",{parentName:"a"},"SnarkProof"))," format. Use this when manually verifying with ",(0,n.kt)("inlineCode",{parentName:"p"},"snarkjs"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"proof._snarkProof\n")),(0,n.kt)("h2",{id:"circuit"},"circuit"),(0,n.kt)("p",null,"The string name of the type of circuit this proof came from. For the ",(0,n.kt)("inlineCode",{parentName:"p"},"BaseProof")," class this is undefined."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"proof.circuit\n")),(0,n.kt)("h2",{id:"publicsignals"},"publicSignals"),(0,n.kt)("p",null,"The raw array of public signals for the proof."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"proof.publicSignals\n")),(0,n.kt)("h2",{id:"proof"},"proof"),(0,n.kt)("p",null,"The proof data formatted as ",(0,n.kt)("inlineCode",{parentName:"p"},"bigint[]"),". Use this property when interacting with smart contracts."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"proof.proof\n")),(0,n.kt)("h2",{id:"verify"},"verify"),(0,n.kt)("p",null,"A function to verify the proof with the supplied ",(0,n.kt)("inlineCode",{parentName:"p"},"Prover"),". The ",(0,n.kt)("inlineCode",{parentName:"p"},"prover")," property must be set either in the constructor or manually, otherwise this will throw."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"proof.verify(): Promise<boolean>\n")))}f.isMDXComponent=!0}}]);