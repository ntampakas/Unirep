"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[4360],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var o=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,a=function(e,t){if(null==e)return{};var r,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)r=n[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),h=a,m=u["".concat(l,".").concat(h)]||u[h]||f[h]||n;return r?o.createElement(m,s(s({ref:t},c),{},{components:r})):o.createElement(m,s({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,s=new Array(n);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<n;p++)s[p]=r[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},14426:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var o=r(7896),a=(r(2784),r(30876));const n={description:"Definition of user state transition in UniRep protocol."},s="User State Transition",i={unversionedId:"protocol/glossary/user-state-transition",id:"version-1.0.1/protocol/glossary/user-state-transition",title:"User State Transition",description:"Definition of user state transition in UniRep protocol.",source:"@site/versioned_docs/version-1.0.1/protocol/glossary/user-state-transition.md",sourceDirName:"protocol/glossary",slug:"/protocol/glossary/user-state-transition",permalink:"/docs/1.0.1/protocol/glossary/user-state-transition",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/protocol/glossary/user-state-transition.md",tags:[],version:"1.0.1",frontMatter:{description:"Definition of user state transition in UniRep protocol."},sidebar:"apiSidebar",previous:{title:"Trees",permalink:"/docs/1.0.1/protocol/glossary/trees"},next:{title:"Users and Attesters",permalink:"/docs/1.0.1/protocol/glossary/users-and-attesters"}},l={},p=[{value:"Why users have to perform user state transition?",id:"why-users-have-to-perform-user-state-transition",level:3},{value:"Workflow of a user state transition",id:"workflow-of-a-user-state-transition",level:3},{value:"1. User computes epoch key of the latest transition (or sign up) epoch",id:"1-user-computes-epoch-key-of-the-latest-transition-or-sign-up-epoch",level:4},{value:"2. Update user state tree",id:"2-update-user-state-tree",level:4},{value:"3. Check if epoch tree root matches computed hashchains and epoch keys",id:"3-check-if-epoch-tree-root-matches-computed-hashchains-and-epoch-keys",level:4},{value:"4. Compute a new global state tree leaf",id:"4-compute-a-new-global-state-tree-leaf",level:4},{value:"5. Call UniRep smart contract to insert a new global state tree leaf",id:"5-call-unirep-smart-contract-to-insert-a-new-global-state-tree-leaf",level:4}],c={toc:p},u="wrapper";function f(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"user-state-transition"},"User State Transition"),(0,a.kt)("h3",{id:"why-users-have-to-perform-user-state-transition"},"Why users have to perform user state transition?"),(0,a.kt)("p",null,"User state transition is used to"," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Make sure users process their attestations correctly including the bad reputation."),(0,a.kt)("li",{parentName:"ul"},"Generate a new user state in a new epoch to prove the latest reputation.")),(0,a.kt)("p",null,"After user performs user state transition, he can"," "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Prove the latest reputation status."),(0,a.kt)("li",{parentName:"ol"},"Generate new epoch key proofs to receive attestations in the latest epoch.")),(0,a.kt)("h3",{id:"workflow-of-a-user-state-transition"},"Workflow of a user state transition"),(0,a.kt)("h4",{id:"1-user-computes-epoch-key-of-the-latest-transition-or-sign-up-epoch"},"1. User computes epoch key of the latest transition (or sign up) epoch"),(0,a.kt)("img",{src:"/img/v1/UST-0.png",alt:"Epoch keys are iterated computed in the circuits."}),(0,a.kt)("h4",{id:"2-update-user-state-tree"},"2. Update user state tree"),(0,a.kt)("img",{src:"/img/v1/UST-1.png",alt:"Step 1: update leaf index 3"}),(0,a.kt)("img",{src:"/img/v1/UST-2.png",alt:"Step 2: update leaf index 1"}),(0,a.kt)("h4",{id:"3-check-if-epoch-tree-root-matches-computed-hashchains-and-epoch-keys"},"3. Check if epoch tree root matches computed hashchains and epoch keys"),(0,a.kt)("img",{src:"/img/v1/epoch-tree.png",alt:""}),(0,a.kt)("h4",{id:"4-compute-a-new-global-state-tree-leaf"},"4. Compute a new global state tree leaf"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const newLeaf = hash(idCommitment, userStateTreeRoot)\n")),(0,a.kt)("img",{src:"/img/v1/UST-3.png",alt:"How a new global state tree is computed."}),(0,a.kt)("h4",{id:"5-call-unirep-smart-contract-to-insert-a-new-global-state-tree-leaf"},"5. Call UniRep smart contract to insert a new global state tree leaf"),(0,a.kt)("p",null,"User performs user state transition by calling ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Unirep/Unirep/blob/5ef3fa8ed70761e0d128fe054bcdb6c72be2f7a1/packages/contracts/contracts/Unirep.sol#L606"},(0,a.kt)("inlineCode",{parentName:"a"},"updateUserStateRoot()"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User will attach a ",(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},"User State Transition Proof")," when calling ",(0,a.kt)("inlineCode",{parentName:"li"},"updateUserStateRoot"),". Others can make sure if the user state transition is correct by verifying the User State Transition Proof."),(0,a.kt)("li",{parentName:"ul"},"Once the user performed user state transition, his user state will be inserted into the ",(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/trees#global-state-tree"},"global state tree")," of the latest epoch."),(0,a.kt)("li",{parentName:"ul"},"So if a user does not perform user state transition during an epoch, his user state will not be in the global state tree of that epoch.")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"See also"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/trees"},"Trees")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/glossary/epoch"},"Epoch Transition")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/1.0.1/protocol/circuits/user-state-transition-proof"},"User State Transition Proof")))))}f.isMDXComponent=!0}}]);