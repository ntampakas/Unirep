"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[5553],{30876:(t,e,r)=>{r.d(e,{Zo:()=>l,kt:()=>m});var n=r(2784);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var p=n.createContext({}),c=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},l=function(t){var e=c(t.components);return n.createElement(p.Provider,{value:e},t.children)},u="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,i=t.originalType,p=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=c(r),d=o,m=u["".concat(p,".").concat(d)]||u[d]||f[d]||i;return r?n.createElement(m,a(a({ref:e},l),{},{components:r})):n.createElement(m,a({ref:e},l))}));function m(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s[u]="string"==typeof t?t:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6389:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7896),o=(r(2784),r(30876));const i={},a="7. User state transition",s={unversionedId:"getting-started/start-with-typescript/user-state-transition",id:"version-1.0.1/getting-started/start-with-typescript/user-state-transition",title:"7. User state transition",description:"See how to generate a user state: 4. Epoch key proof.",source:"@site/versioned_docs/version-1.0.1/getting-started/start-with-typescript/7.-user-state-transition.md",sourceDirName:"getting-started/start-with-typescript",slug:"/getting-started/start-with-typescript/user-state-transition",permalink:"/docs/1.0.1/getting-started/start-with-typescript/user-state-transition",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/getting-started/start-with-typescript/7.-user-state-transition.md",tags:[],version:"1.0.1",sidebarPosition:7,frontMatter:{},sidebar:"apiSidebar",previous:{title:"6. Epoch transition",permalink:"/docs/1.0.1/getting-started/start-with-typescript/epoch-transition"},next:{title:"8. Reputation proof",permalink:"/docs/1.0.1/getting-started/start-with-typescript/reputation-proof"}},p={},c=[{value:"Submit start transition proof",id:"submit-start-transition-proof",level:3},{value:"Submit process attestations proofs",id:"submit-process-attestations-proofs",level:3},{value:"Submit user state transition proof",id:"submit-user-state-transition-proof",level:3},{value:"Verify UniRep state",id:"verify-unirep-state",level:3}],l={toc:c},u="wrapper";function f(t){let{components:e,...r}=t;return(0,o.kt)(u,(0,n.Z)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"7-user-state-transition"},"7. User state transition"),(0,o.kt)("p",null,"See how to generate a user state: ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.1/getting-started/start-with-typescript/epoch-key-proof"},"4. Epoch key proof"),".\nThen use the user state to generate user state transition proofs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const {\n    startTransitionProof,\n    processAttestationProofs,\n    finalTransitionProof,\n} = await userState.genUserStateTransitionProofs()\n")),(0,o.kt)("h3",{id:"submit-start-transition-proof"},"Submit start transition proof"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const tx = await contract.startUserStateTransition(\n    startTransitionProof.publicSignals,\n    startTransitionProof.proof\n)\nawait tx.wait()\n")),(0,o.kt)("h3",{id:"submit-process-attestations-proofs"},"Submit process attestations proofs"),(0,o.kt)("p",null,"Submit all process attestations proofs and get the proof indexes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"for (let i = 0; i < processAttestationProofs.length; i++) {\n    const tx = await contract.processAttestations(\n        processAttestationProofs[i].publicSignals,\n        processAttestationProofs[i].proof\n    )\n    await tx.wait() // wait until the transaction is confirmed\n}\n")),(0,o.kt)("h3",{id:"submit-user-state-transition-proof"},"Submit user state transition proof"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const tx = await contract.updateUserStateRoot(\n    finalTransitionProof.publicSignals,\n    finalTransitionProof.proof\n)\n")),(0,o.kt)("h3",{id:"verify-unirep-state"},"Verify UniRep state"),(0,o.kt)("p",null,"It can be checked with either a ",(0,o.kt)("inlineCode",{parentName:"p"},"Synchronizer")," object or a ",(0,o.kt)("inlineCode",{parentName:"p"},"UserState")," object. See: ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.1/getting-started/start-with-typescript/epoch-key-proof#9.-verify-unirep-state"},"4. Epoch Key Proof"),"."),(0,o.kt)("p",null,"Check if global state tree root exists in the current UniRep state"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const fromEpoch = Number(finalTransitionProof.transitionFromEpoch)\nconst GSTRoot = finalTransitionProof.fromGlobalStateTree.toString()\nconst isGSTRootExisted = await userState.GSTRootExists(\n    GSTRoot, \n    fromEpoch\n)\nconsole.log(isGSTRootExisted) // false then the proof will be invalid \n")),(0,o.kt)("p",null,"Check if epoch tree root matches the epoch"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const fromEpoch = Number(finalTransitionProof.transitionFromEpoch)\nconst epochTreeRoot = finalTransitionProof.fromEpochTree.toString()\nconst isEpochTreeExisted = await userState.epochTreeRootExists(\n    epochTreeRoot, \n    fromEpoch\n)\nconsole.log(isEpochTreeExisted) // false then the proof will be invalid\n")),(0,o.kt)("p",null,"Check epoch key nullifiers are not existed"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const epkNullifiers = finalTransitionProof.epkNullifiers.map((i) => i.toString())\nfor (const nullifier of epkNullifiers) {\n    if (await userState.nullifierExist(nullifier)) {\n        console.log(false) // then the proof will be invalid\n    }\n}\n")))}f.isMDXComponent=!0}}]);