"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[4598],{30876:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(2784);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||i;return t?n.createElement(m,a(a({ref:r},s),{},{components:t})):n.createElement(m,a({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var p={};for(var c in r)hasOwnProperty.call(r,c)&&(p[c]=r[c]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1444:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=t(7896),o=(t(2784),t(30876));const i={title:"Prover"},a=void 0,p={unversionedId:"circuits-api/prover",id:"version-2.0.0-beta-4/circuits-api/prover",title:"Prover",description:"Prover",source:"@site/versioned_docs/version-2.0.0-beta-4/circuits-api/prover.md",sourceDirName:"circuits-api",slug:"/circuits-api/prover",permalink:"/docs/2.0.0-beta-4/circuits-api/prover",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/circuits-api/prover.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"Prover"},sidebar:"apiSidebar",previous:{title:"CircuitConfig",permalink:"/docs/2.0.0-beta-4/circuits-api/circuit-config"},next:{title:"Default prover",permalink:"/docs/2.0.0-beta-4/circuits-api/default-prover"}},c={},l=[{value:"Prover",id:"prover",level:2},{value:"verifyProof",id:"verifyproof",level:2},{value:"genProofAndPublicSignals",id:"genproofandpublicsignals",level:2},{value:"getVKey",id:"getvkey",level:2}],s={toc:l},u="wrapper";function f(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"prover"},"Prover"),(0,o.kt)("p",null,"The prover interface is used to write custom implementations for creating and verifying proofs. This abstracts away the logic of loading the proving keys. For example, a prover implementation could load the keys from disk, from a remote url, etc."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"See the ",(0,o.kt)("a",{parentName:"p",href:"default-prover"},(0,o.kt)("inlineCode",{parentName:"a"},"defaultProver"))," for a nodejs implementation."),(0,o.kt)("p",{parentName:"admonition"},"See the ",(0,o.kt)("a",{parentName:"p",href:"web-prover"},(0,o.kt)("inlineCode",{parentName:"a"},"webProver"))," for a browser compatible implementation.")),(0,o.kt)("h2",{id:"verifyproof"},"verifyProof"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"verifyProof: (\n    name: string | Circuit,\n    publicSignals: any,\n    proof: any\n) => Promise<boolean>\n")),(0,o.kt)("h2",{id:"genproofandpublicsignals"},"genProofAndPublicSignals"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"genProofAndPublicSignals: (\n    proofType: string | Circuit,\n    inputs: any\n) => Promise<{\n    proof: any\n    publicSignals: any\n}>\n")),(0,o.kt)("h2",{id:"getvkey"},"getVKey"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getVKey: (name: string | Circuit) => Promise<any>\n")))}f.isMDXComponent=!0}}]);