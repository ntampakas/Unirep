"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[1200],{30876:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},24717:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7896),a=(n(2784),n(30876));const o={description:"Client library for contracts related functions which are used in UniRep protocol."},i="@unirep/contracts",c={unversionedId:"package/contracts",id:"version-1.0.1/package/contracts",title:"@unirep/contracts",description:"Client library for contracts related functions which are used in UniRep protocol.",source:"@site/versioned_docs/version-1.0.1/package/contracts.md",sourceDirName:"package",slug:"/package/contracts",permalink:"/docs/1.0.1/package/contracts",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-1.0.1/package/contracts.md",tags:[],version:"1.0.1",frontMatter:{description:"Client library for contracts related functions which are used in UniRep protocol."},sidebar:"apiSidebar",previous:{title:"@unirep/circuits",permalink:"/docs/1.0.1/package/circuits"},next:{title:"@unirep/core",permalink:"/docs/1.0.1/package/core"}},p={},s=[{value:"\ud83d\udee0 Install",id:"-install",level:2},{value:"npm or yarn",id:"npm-or-yarn",level:3},{value:"Deploy Unirep contract",id:"deploy-unirep-contract",level:2},{value:"Get unirep contract with address",id:"get-unirep-contract-with-address",level:3},{value:"\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb Call Unirep contract with <code>ethers</code>",id:"-call-unirep-contract-with-ethers",level:2},{value:"\ud83d\ude4b\ud83c\udffb\u200d\u2642\ufe0f Call Unirep contract in DApps",id:"\ufe0f-call-unirep-contract-in-dapps",level:2},{value:"\ud83d\udcda Other usages",id:"-other-usages",level:2},{value:"Proofs",id:"proofs",level:3},{value:"Attestation",id:"attestation",level:3},{value:"Event/ Attestation event",id:"event-attestation-event",level:3}],l={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"unirepcontracts"},"@unirep/contracts"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/unirep/unirep"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/5124fc18e7c4eea90190045bc66eddafb19a7b4d93c696e88c65dc530cec9b02/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70726f6a6563742d756e697265702d626c75652e7376673f7374796c653d666c61742d737175617265",alt:null})," "),(0,a.kt)("a",{parentName:"p",href:"https://github.com/unirep/unirep/blob/master/LICENSE"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/9dc25f9a3042124b664e5c386b48a35246c09e7fa0e514bf151c2034b183ec62/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f756e697265702f756e697265702e7376673f7374796c653d666c61742d737175617265",alt:"Github license"})," "),(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@unirep/contracts"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/32103befc3323b32e0061d6524cfd8d22e5f8048d4e1dde5a8e11a50123a70cf/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40756e697265702f636f6e7472616374733f7374796c653d666c61742d737175617265",alt:"NPM version"})," "),(0,a.kt)("a",{parentName:"p",href:"https://npmjs.org/package/@unirep/contracts"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/85f6bbf84a600d0b04d95c6d875f8090c528203cf31ca65005531aa782930ada/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40756e697265702f636f6e7472616374732e7376673f7374796c653d666c61742d737175617265",alt:"Downloads"})," "),(0,a.kt)("a",{parentName:"p",href:"https://eslint.org/"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/ed5849d453eb089b4ad8f56f316f492ceef5e7aa5404ee4df4d97ff6cb3f375f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e7465722d65736c696e742d3830383066323f7374796c653d666c61742d737175617265266c6f676f3d65736c696e74",alt:"Linter eslint"})," "),(0,a.kt)("a",{parentName:"p",href:"https://prettier.io/"},(0,a.kt)("img",{parentName:"a",src:"https://camo.githubusercontent.com/81082ed03d1efb3d135c66d183ce379d0d30a0091d09d472f5e96ab4e2ff4375/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d70726574746965722d6638626334353f7374796c653d666c61742d737175617265266c6f676f3d7072657474696572",alt:"Code style prettier"}))),(0,a.kt)("h2",{id:"-install"},"\ud83d\udee0 Install"),(0,a.kt)("h3",{id:"npm-or-yarn"},"npm or yarn"),(0,a.kt)("p",null,"Install the ",(0,a.kt)("inlineCode",{parentName:"p"},"@unirep/contracts")," package with npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @unirep/contracts\n")),(0,a.kt)("p",null,"or yarn:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @unirep/contracts\n")),(0,a.kt)("h2",{id:"deploy-unirep-contract"},"Deploy Unirep contract"),(0,a.kt)("p",null,"Deploy Unirep smart contract with default config:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ethers } from 'ethers'\nimport { deployUnirep } from '@unirep/contracts/deploy'\nimport { Unirep } from '@unirep/contracts'\n\nconst privateKey = 'YOUR/PRIVATE/KEY'\nconst provider = 'YOUR/ETH/PROVIDER'\nconst deployer = new ethers.Wallet(privateKey, provider);\n\nconst unirepContract: Unirep = await deployUnirep(deployer)\n")),(0,a.kt)("h3",{id:"get-unirep-contract-with-address"},"Get unirep contract with address"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ethers } from 'ethers'\nimport { getUnirepContract, Unirep } from '@unirep/contracts'\n\nconst address = '0x....'\nconst provider = 'YOUR/ETH/PROVIDER'\n\nconst unirepContract: Unirep = getUnirepContract(address, provider)\n")),(0,a.kt)("h2",{id:"-call-unirep-contract-with-ethers"},"\ud83e\uddd1\ud83c\udffb\u200d\ud83d\udcbb Call Unirep contract with ",(0,a.kt)("inlineCode",{parentName:"h2"},"ethers")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ethers } from 'ethers'\nimport { ZkIdentity } from '@unirep/crypto'\nimport { getUnirepContract, Unirep } from '@unirep/contracts'\n\nconst address = '0x....'\nconst privateKey = 'YOUR/PRIVATE/KEY'\nconst provider = 'YOUR/ETH/PROVIDER'\n\n// connect a signer\nconst signer = new ethers.Wallet(privateKey, provider)\nconst unirepContract: Unirep = getUnirepContract(address, signer)\n\n// user sign up\nconst id = new ZkIdentity()\nconst tx = await unirepContract['userSignUp(uint256)'](id.genIdentityCommitment())\n\n// attester sign up\nconst tx = await unirepContract.attesterSignUp()\n")),(0,a.kt)("h2",{id:"\ufe0f-call-unirep-contract-in-dapps"},"\ud83d\ude4b\ud83c\udffb\u200d\u2642\ufe0f Call Unirep contract in DApps"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"import { Unirep } from '@unirep/contracts/Unirep.sol';\n\ncontract YourContract {\n    Unirep public unirep;\n\n    uint256 internal _attesterId;\n\n    // Initialize contract with a deployed\n    constructor(Unirep _unirepContract) {\n        // Set the unirep contract address\n        unirep = _unirepContract;\n    }\n\n    // Relay Users sign up in Unirep\n    function signUp(uint256 idCommitment) external {\n        unirep.userSignUp(idCommitment);\n    }\n\n    // Sign up this contract as an attester\n    function signUpContract() external {\n        unirep.attesterSignUp();\n        _attesterId = unirep.attesters(address(this));\n    }\n\n    // And get attestation from the contract\n    function submitAttestation(\n        uint256[] memory publicSignals,\n        uint256[8] memory proof\n    ) external payable {\n        // Step 1. verify epoch key proof\n        bool valid = unirep.verifyEpochKeyValidity(publicSignals, proof);\n        require(valid);\n\n        // Step 2. init attestation\n        // create an attestation which sends 5 positive Rep to the epochKey\n        Unirep.Attestation memory attestation;\n        attestation.attesterId = _attesterId;\n        attestation.posRep = 5;\n\n        // Step 3. send attestation\n        unirep.submitAttestation{ value: unirep.attestingFee() }(\n            attestation,\n            publicSignals[0] // epoch key\n        );\n    }\n}\n")),(0,a.kt)("h2",{id:"-other-usages"},"\ud83d\udcda Other usages"),(0,a.kt)("h3",{id:"proofs"},"Proofs"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"An example of epoch key proof"),"\n",(0,a.kt)("strong",{parentName:"p"},"1. Generate an epoch key proof structure")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Circuit } from '@unirep/circuits'\nimport { EpochKeyProof } from '@unirep/contracts'\n\n// see @unirep/circuits to know how to generate a prover and circuitInputs\nconst prover = {\n    ...\n}\nconst circuitInputs = {\n    ...\n}\n\nconst { publicSignals, proof } = await prover.genProofAndPublicSignals(\n    Circuit.verifyEpochKey,\n    circuitInputs\n)\n\nconst epkProof = new EpochKeyProof(\n    publicSignals,\n    proof,\n    prover\n)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2. Get data from epoch key proof structure")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const epoch = epkProof.epoch\nconst epochKey = epkProof.epochKey\nconst globalStateTree = epkProof.globalStateTree\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"3. Verify the epoch key proof")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const isValid = await epkProof.verify()\n")),(0,a.kt)("h3",{id:"attestation"},"Attestation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"An example of constructing an Attestation object")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Attestation } from '@unirep/contracts'\n\nconst attestation = new Attestation(\n    attesterID,\n    positiveReputation,\n    negativeReputation,\n    graffiti,\n    signUpFlag\n)\nconst hash = attestation.hash()\n")),(0,a.kt)("h3",{id:"event-attestation-event"},"Event/ Attestation event"),(0,a.kt)("p",null,"The event enum is used to help with determining the type of the event, which are as the same definition in ",(0,a.kt)("inlineCode",{parentName:"p"},"IUnirep.sol")))}d.isMDXComponent=!0}}]);