"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[1446],{30876:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(2784);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(r),h=a,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},52389:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=r(7896),a=(r(2784),r(30876));const o={title:"ReputationProof"},i=void 0,p={unversionedId:"circuits-api/reputation-proof",id:"version-2.0.0-beta-4/circuits-api/reputation-proof",title:"ReputationProof",description:"Inherits: BaseProof",source:"@site/versioned_docs/version-2.0.0-beta-4/circuits-api/reputation-proof.md",sourceDirName:"circuits-api",slug:"/circuits-api/reputation-proof",permalink:"/docs/2.0.0-beta-4/circuits-api/reputation-proof",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/versioned_docs/version-2.0.0-beta-4/circuits-api/reputation-proof.md",tags:[],version:"2.0.0-beta-4",frontMatter:{title:"ReputationProof"},sidebar:"apiSidebar",previous:{title:"BaseProof",permalink:"/docs/2.0.0-beta-4/circuits-api/base-proof"},next:{title:"EpochKeyProof",permalink:"/docs/2.0.0-beta-4/circuits-api/epoch-key-proof"}},l={},s=[{value:"epochKey",id:"epochkey",level:2},{value:"stateTreeRoot",id:"statetreeroot",level:2},{value:"nonce",id:"nonce",level:2},{value:"revealNonce",id:"revealnonce",level:2},{value:"epoch",id:"epoch",level:2},{value:"attesterId",id:"attesterid",level:2},{value:"data",id:"data",level:2},{value:"minRep",id:"minrep",level:2},{value:"proveMinRep",id:"proveminrep",level:2},{value:"maxRep",id:"maxrep",level:2},{value:"proveMaxRep",id:"provemaxrep",level:2},{value:"proveZeroRep",id:"provezerorep",level:2},{value:"proveGraffiti",id:"provegraffiti",level:2},{value:"graffiti",id:"graffiti",level:2},{value:"control",id:"control",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Inherits: ",(0,a.kt)("a",{parentName:"p",href:"base-proof"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseProof"))),(0,a.kt)("p",null,"A class representing a ",(0,a.kt)("a",{parentName:"p",href:"/docs/2.0.0-beta-4/circuits-api/circuits#prove-reputation-proof"},"reputation proof"),". Each of the following are accessible as properties on the object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { ReputationProof } from '@unirep/circuits'\n\nconst data = new ReputationProof(publicSignals, proof)\n")),(0,a.kt)("h2",{id:"epochkey"},"epochKey"),(0,a.kt)("p",null,"The epoch key that owns the reputation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.epochKey\n")),(0,a.kt)("h2",{id:"statetreeroot"},"stateTreeRoot"),(0,a.kt)("p",null,"The state tree root the user is a member of."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.stateTreeRoot\n")),(0,a.kt)("h2",{id:"nonce"},"nonce"),(0,a.kt)("p",null,"The nonce of the epoch key being proven. This value is only set if ",(0,a.kt)("inlineCode",{parentName:"p"},"revealNonce")," is truthy."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.nonce\n")),(0,a.kt)("h2",{id:"revealnonce"},"revealNonce"),(0,a.kt)("p",null,"An integer indicating whether or not the nonce should be revealed. If this value is non-zero the nonce is revealed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.revealNonce\n")),(0,a.kt)("h2",{id:"epoch"},"epoch"),(0,a.kt)("p",null,"The epoch the user is proving membership in."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.epoch\n")),(0,a.kt)("h2",{id:"attesterid"},"attesterId"),(0,a.kt)("p",null,"The attester id for the proof."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.attesterId\n")),(0,a.kt)("h2",{id:"data"},"data"),(0,a.kt)("p",null,"The signature data included for the proof."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.data\n")),(0,a.kt)("h2",{id:"minrep"},"minRep"),(0,a.kt)("p",null,"A minimum amount of net positive reputation the user controls. This value is only used if ",(0,a.kt)("inlineCode",{parentName:"p"},"proveMinRep")," is non-zero."),(0,a.kt)("p",null,"Example: Alice has 10 ",(0,a.kt)("inlineCode",{parentName:"p"},"posRep")," and 5 ",(0,a.kt)("inlineCode",{parentName:"p"},"negRep"),". Alice can prove a ",(0,a.kt)("inlineCode",{parentName:"p"},"minRep")," of 2 because she has a net positive reputation of 5."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.minRep\n")),(0,a.kt)("h2",{id:"proveminrep"},"proveMinRep"),(0,a.kt)("p",null,"Whether or not to enforce the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"minRep")," value. If this value is non-zero the ",(0,a.kt)("inlineCode",{parentName:"p"},"minRep")," will be proven."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.proveMinRep\n")),(0,a.kt)("h2",{id:"maxrep"},"maxRep"),(0,a.kt)("p",null,"A maximum amount of net positive reputation the user controls. This value is only used if ",(0,a.kt)("inlineCode",{parentName:"p"},"proveMaxRep")," is non-zero."),(0,a.kt)("p",null,"Example: Bob has 10 ",(0,a.kt)("inlineCode",{parentName:"p"},"posRep")," and 5 ",(0,a.kt)("inlineCode",{parentName:"p"},"negRep"),". Bob can prove a ",(0,a.kt)("inlineCode",{parentName:"p"},"maxRep")," of 7 because he has a net positive reputation of 5."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.maxRep\n")),(0,a.kt)("h2",{id:"provemaxrep"},"proveMaxRep"),(0,a.kt)("p",null,"Whether or not to enforce the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"maxRep")," value. If this value is non-zero the ",(0,a.kt)("inlineCode",{parentName:"p"},"maxRep")," will be proven."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.proveMaxRep\n")),(0,a.kt)("h2",{id:"provezerorep"},"proveZeroRep"),(0,a.kt)("p",null,"Whether or not to prove the user has a net 0 reputation balance. If this value is non-zero the user ",(0,a.kt)("inlineCode",{parentName:"p"},"posRep")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"negRep")," must be equal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.proveZeroRep\n")),(0,a.kt)("h2",{id:"provegraffiti"},"proveGraffiti"),(0,a.kt)("p",null,"Whether the user has chosen to prove a graffiti. If this value is non-zero the user graffiti will be proven."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.proveGraffiti\n")),(0,a.kt)("h2",{id:"graffiti"},"graffiti"),(0,a.kt)("p",null,"The graffiti controlled by the user, which is defined by ",(0,a.kt)("inlineCode",{parentName:"p"},"data[SUM_FIELD_COUNT]")," in the circuits. This value is only checked if ",(0,a.kt)("inlineCode",{parentName:"p"},"proveGraffiti")," is non-zero."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.graffiti\n")),(0,a.kt)("h2",{id:"control"},"control"),(0,a.kt)("p",null,"The control field used for the proof. This field contains many signals binary encoded into an array of 256 bit values. This value is automatically decoded into the other properties on this class. See the ",(0,a.kt)("a",{parentName:"p",href:"circuits#prove-reputation-proof"},"circuit documentation")," for more information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"this.control[0]\nthis.control[1]\n")))}d.isMDXComponent=!0}}]);