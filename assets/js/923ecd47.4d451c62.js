"use strict";(self.webpackChunk_unirep_docs=self.webpackChunk_unirep_docs||[]).push([[6334],{30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(7896),a=(n(2784),n(30876));const s={title:"schema"},o=void 0,i={unversionedId:"core-api/schema",id:"core-api/schema",title:"schema",description:"UniRep needs to persist data in order to construct state and make proofs. To do this we use a generic database wrapper called anondb. This wrapper has support for desktop environment databases like SQLite, as well as the IndexedDB browser database.",source:"@site/docs/core-api/schema.md",sourceDirName:"core-api",slug:"/core-api/schema",permalink:"/docs/next/core-api/schema",draft:!1,editUrl:"https://github.com/Unirep/Unirep/tree/main/packages/docs/docs/core-api/schema.md",tags:[],version:"current",frontMatter:{title:"schema"},sidebar:"apiSidebar",previous:{title:"Subgraph",permalink:"/docs/next/subgraph"},next:{title:"User Schema",permalink:"/docs/next/core-api/user-schema"}},l={},c=[{value:"SynchronizerState",id:"synchronizerstate",level:2},{value:"Attestation",id:"attestation",level:2},{value:"StateTreeLeaf",id:"statetreeleaf",level:2},{value:"EpochTreeLeaf",id:"epochtreeleaf",level:2},{value:"HistoryTreeLeaf",id:"historytreeleaf",level:2},{value:"Epoch",id:"epoch",level:2},{value:"Nullifier",id:"nullifier",level:2},{value:"UserSignUp",id:"usersignup",level:2},{value:"Attester",id:"attester",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"UniRep needs to persist data in order to construct state and make proofs. To do this we use a generic database wrapper called ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/vimwitch/anondb"},"anondb"),". This wrapper has support for desktop environment databases like SQLite, as well as the IndexedDB browser database."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@unirep/core")," ships a schema that should be used with the database. This schema can be extended by adding additional collections for application specific data storage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { schema } from '@unirep/core'\nimport { SQLiteConnector } from 'anondb/node'\nimport { IndexedDBConnector } from 'anondb/web'\n\n{\n  // in nodejs\n  const db_mem = await SQLiteConnector.create(schema, ':memory:')\n  const db_storage = await SQLiteConnector.create(schema, 'db.sqlite')\n}\n{\n  // in browser\n  const db_browser = await IndexedDBConnector.create(schema)\n}\n")),(0,a.kt)("h2",{id:"synchronizerstate"},"SynchronizerState"),(0,a.kt)("p",null,"Used to store information about what blocks/transactions/events have been processed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  attesterId: string,\n  latestProcessedBlock: number\n  latestProcessedTransactionIndex: number\n  latestProcessedEventIndex: number\n  latestCompleteBlock: number\n}\n")),(0,a.kt)("h2",{id:"attestation"},"Attestation"),(0,a.kt)("p",null,"An attestation given to an epoch key."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  epoch: number\n  epochKey: string // base 10\n  index: string\n  attesterId: string\n  fieldIndex: number\n  change: string\n  blockNumber: number\n}\n")),(0,a.kt)("h2",{id:"statetreeleaf"},"StateTreeLeaf"),(0,a.kt)("p",null,"A leaf from a state tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  epoch: number\n  hash: string\n  index: number\n  attesterId: string\n  blockNumber: number\n}\n")),(0,a.kt)("h2",{id:"epochtreeleaf"},"EpochTreeLeaf"),(0,a.kt)("p",null,"A leaf from an epoch tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  id: string\n  epoch: number\n  hash: string\n  index: string\n  attesterId: string\n  blockNumber: number\n}\n")),(0,a.kt)("h2",{id:"historytreeleaf"},"HistoryTreeLeaf"),(0,a.kt)("p",null,"A leaf from an attester history tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  id: string\n  index: number\n  attesterId: string\n  leaf: string\n}\n")),(0,a.kt)("h2",{id:"epoch"},"Epoch"),(0,a.kt)("p",null,"An epoch entry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  number: number\n  attesterId: string\n  sealed: boolean\n}\n")),(0,a.kt)("h2",{id:"nullifier"},"Nullifier"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  epoch: number\n  attesterId: string\n  nullifier: string\n  transactionHash: string\n  blockNumber: number\n}\n")),(0,a.kt)("h2",{id:"usersignup"},"UserSignUp"),(0,a.kt)("p",null,"An object created when a user joins an attester."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  commitment: string\n  epoch: number\n  attesterId: string\n  blockNumber: number\n}\n")),(0,a.kt)("h2",{id:"attester"},"Attester"),(0,a.kt)("p",null,"An object created when an attester registers with the UniRep instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  _id: string // the attester address\n  startTimestamp: number\n  epochLength: number\n}\n")))}d.isMDXComponent=!0}}]);